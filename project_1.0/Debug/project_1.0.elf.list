
project_1.0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000031c  08007150  08007150  00017150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800746c  0800746c  0001746c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08007478  08007478  00017478  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000570  20000000  0800747c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00020570  2**0
                  CONTENTS
  8 .bss          00000204  20000570  20000570  00020570  2**2
                  ALLOC
  9 ._user_heap_stack 00000600  20000774  20000774  00020570  2**0
                  ALLOC
 10 .ARM.attributes 00000030  00000000  00000000  00020570  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000d40e  00000000  00000000  000205a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00001e90  00000000  00000000  0002d9ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00006fbd  00000000  00000000  0002f83e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000998  00000000  00000000  00036800  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000db0  00000000  00000000  00037198  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00004d13  00000000  00000000  00037f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003522  00000000  00000000  0003cc5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007e  00000000  00000000  0004017d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00002a7c  00000000  00000000  000401fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 20 .stab         0000009c  00000000  00000000  00042c78  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .stabstr      0000014d  00000000  00000000  00042d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000570 	.word	0x20000570
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007134 	.word	0x08007134

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000574 	.word	0x20000574
 80001cc:	08007134 	.word	0x08007134

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003be:	f1a4 0401 	sub.w	r4, r4, #1
 80003c2:	d1e9      	bne.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f092 0f00 	teq	r2, #0
 800056a:	bf14      	ite	ne
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	4770      	bxeq	lr
 8000572:	b530      	push	{r4, r5, lr}
 8000574:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800057c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000580:	e720      	b.n	80003c4 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_ul2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	e00a      	b.n	80005aa <__aeabi_l2d+0x16>

08000594 <__aeabi_l2d>:
 8000594:	ea50 0201 	orrs.w	r2, r0, r1
 8000598:	bf08      	it	eq
 800059a:	4770      	bxeq	lr
 800059c:	b530      	push	{r4, r5, lr}
 800059e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005a2:	d502      	bpl.n	80005aa <__aeabi_l2d+0x16>
 80005a4:	4240      	negs	r0, r0
 80005a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005b6:	f43f aedc 	beq.w	8000372 <__adddf3+0xe6>
 80005ba:	f04f 0203 	mov.w	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005d2:	f1c2 0320 	rsb	r3, r2, #32
 80005d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005da:	fa20 f002 	lsr.w	r0, r0, r2
 80005de:	fa01 fe03 	lsl.w	lr, r1, r3
 80005e2:	ea40 000e 	orr.w	r0, r0, lr
 80005e6:	fa21 f102 	lsr.w	r1, r1, r2
 80005ea:	4414      	add	r4, r2
 80005ec:	e6c1      	b.n	8000372 <__adddf3+0xe6>
 80005ee:	bf00      	nop

080005f0 <__aeabi_dmul>:
 80005f0:	b570      	push	{r4, r5, r6, lr}
 80005f2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005f6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005fa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005fe:	bf1d      	ittte	ne
 8000600:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000604:	ea94 0f0c 	teqne	r4, ip
 8000608:	ea95 0f0c 	teqne	r5, ip
 800060c:	f000 f8de 	bleq	80007cc <__aeabi_dmul+0x1dc>
 8000610:	442c      	add	r4, r5
 8000612:	ea81 0603 	eor.w	r6, r1, r3
 8000616:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800061a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800061e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000622:	bf18      	it	ne
 8000624:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000628:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800062c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000630:	d038      	beq.n	80006a4 <__aeabi_dmul+0xb4>
 8000632:	fba0 ce02 	umull	ip, lr, r0, r2
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800063e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000642:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000646:	f04f 0600 	mov.w	r6, #0
 800064a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800064e:	f09c 0f00 	teq	ip, #0
 8000652:	bf18      	it	ne
 8000654:	f04e 0e01 	orrne.w	lr, lr, #1
 8000658:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800065c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000660:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000664:	d204      	bcs.n	8000670 <__aeabi_dmul+0x80>
 8000666:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800066a:	416d      	adcs	r5, r5
 800066c:	eb46 0606 	adc.w	r6, r6, r6
 8000670:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000674:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000678:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800067c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000680:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000684:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000688:	bf88      	it	hi
 800068a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800068e:	d81e      	bhi.n	80006ce <__aeabi_dmul+0xde>
 8000690:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000694:	bf08      	it	eq
 8000696:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800069a:	f150 0000 	adcs.w	r0, r0, #0
 800069e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a8:	ea46 0101 	orr.w	r1, r6, r1
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	ea81 0103 	eor.w	r1, r1, r3
 80006b4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b8:	bfc2      	ittt	gt
 80006ba:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006be:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006c2:	bd70      	popgt	{r4, r5, r6, pc}
 80006c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c8:	f04f 0e00 	mov.w	lr, #0
 80006cc:	3c01      	subs	r4, #1
 80006ce:	f300 80ab 	bgt.w	8000828 <__aeabi_dmul+0x238>
 80006d2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006d6:	bfde      	ittt	le
 80006d8:	2000      	movle	r0, #0
 80006da:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006de:	bd70      	pople	{r4, r5, r6, pc}
 80006e0:	f1c4 0400 	rsb	r4, r4, #0
 80006e4:	3c20      	subs	r4, #32
 80006e6:	da35      	bge.n	8000754 <__aeabi_dmul+0x164>
 80006e8:	340c      	adds	r4, #12
 80006ea:	dc1b      	bgt.n	8000724 <__aeabi_dmul+0x134>
 80006ec:	f104 0414 	add.w	r4, r4, #20
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f305 	lsl.w	r3, r0, r5
 80006f8:	fa20 f004 	lsr.w	r0, r0, r4
 80006fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000708:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800070c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000710:	fa21 f604 	lsr.w	r6, r1, r4
 8000714:	eb42 0106 	adc.w	r1, r2, r6
 8000718:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800071c:	bf08      	it	eq
 800071e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000722:	bd70      	pop	{r4, r5, r6, pc}
 8000724:	f1c4 040c 	rsb	r4, r4, #12
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f304 	lsl.w	r3, r0, r4
 8000730:	fa20 f005 	lsr.w	r0, r0, r5
 8000734:	fa01 f204 	lsl.w	r2, r1, r4
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000744:	f141 0100 	adc.w	r1, r1, #0
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f1c4 0520 	rsb	r5, r4, #32
 8000758:	fa00 f205 	lsl.w	r2, r0, r5
 800075c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000760:	fa20 f304 	lsr.w	r3, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea43 0302 	orr.w	r3, r3, r2
 800076c:	fa21 f004 	lsr.w	r0, r1, r4
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	fa21 f204 	lsr.w	r2, r1, r4
 8000778:	ea20 0002 	bic.w	r0, r0, r2
 800077c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f094 0f00 	teq	r4, #0
 8000790:	d10f      	bne.n	80007b2 <__aeabi_dmul+0x1c2>
 8000792:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000796:	0040      	lsls	r0, r0, #1
 8000798:	eb41 0101 	adc.w	r1, r1, r1
 800079c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a0:	bf08      	it	eq
 80007a2:	3c01      	subeq	r4, #1
 80007a4:	d0f7      	beq.n	8000796 <__aeabi_dmul+0x1a6>
 80007a6:	ea41 0106 	orr.w	r1, r1, r6
 80007aa:	f095 0f00 	teq	r5, #0
 80007ae:	bf18      	it	ne
 80007b0:	4770      	bxne	lr
 80007b2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007b6:	0052      	lsls	r2, r2, #1
 80007b8:	eb43 0303 	adc.w	r3, r3, r3
 80007bc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c0:	bf08      	it	eq
 80007c2:	3d01      	subeq	r5, #1
 80007c4:	d0f7      	beq.n	80007b6 <__aeabi_dmul+0x1c6>
 80007c6:	ea43 0306 	orr.w	r3, r3, r6
 80007ca:	4770      	bx	lr
 80007cc:	ea94 0f0c 	teq	r4, ip
 80007d0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007d4:	bf18      	it	ne
 80007d6:	ea95 0f0c 	teqne	r5, ip
 80007da:	d00c      	beq.n	80007f6 <__aeabi_dmul+0x206>
 80007dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e0:	bf18      	it	ne
 80007e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007e6:	d1d1      	bne.n	800078c <__aeabi_dmul+0x19c>
 80007e8:	ea81 0103 	eor.w	r1, r1, r3
 80007ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	f04f 0000 	mov.w	r0, #0
 80007f4:	bd70      	pop	{r4, r5, r6, pc}
 80007f6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007fa:	bf06      	itte	eq
 80007fc:	4610      	moveq	r0, r2
 80007fe:	4619      	moveq	r1, r3
 8000800:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000804:	d019      	beq.n	800083a <__aeabi_dmul+0x24a>
 8000806:	ea94 0f0c 	teq	r4, ip
 800080a:	d102      	bne.n	8000812 <__aeabi_dmul+0x222>
 800080c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000810:	d113      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000812:	ea95 0f0c 	teq	r5, ip
 8000816:	d105      	bne.n	8000824 <__aeabi_dmul+0x234>
 8000818:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800081c:	bf1c      	itt	ne
 800081e:	4610      	movne	r0, r2
 8000820:	4619      	movne	r1, r3
 8000822:	d10a      	bne.n	800083a <__aeabi_dmul+0x24a>
 8000824:	ea81 0103 	eor.w	r1, r1, r3
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800082c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000830:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000834:	f04f 0000 	mov.w	r0, #0
 8000838:	bd70      	pop	{r4, r5, r6, pc}
 800083a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800083e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000842:	bd70      	pop	{r4, r5, r6, pc}

08000844 <__aeabi_ddiv>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800084a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800084e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000852:	bf1d      	ittte	ne
 8000854:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000858:	ea94 0f0c 	teqne	r4, ip
 800085c:	ea95 0f0c 	teqne	r5, ip
 8000860:	f000 f8a7 	bleq	80009b2 <__aeabi_ddiv+0x16e>
 8000864:	eba4 0405 	sub.w	r4, r4, r5
 8000868:	ea81 0e03 	eor.w	lr, r1, r3
 800086c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000870:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000874:	f000 8088 	beq.w	8000988 <__aeabi_ddiv+0x144>
 8000878:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800087c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000880:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000884:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000888:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800088c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000890:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000894:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000898:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800089c:	429d      	cmp	r5, r3
 800089e:	bf08      	it	eq
 80008a0:	4296      	cmpeq	r6, r2
 80008a2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008a6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008aa:	d202      	bcs.n	80008b2 <__aeabi_ddiv+0x6e>
 80008ac:	085b      	lsrs	r3, r3, #1
 80008ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b2:	1ab6      	subs	r6, r6, r2
 80008b4:	eb65 0503 	sbc.w	r5, r5, r3
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008c2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ce:	bf22      	ittt	cs
 80008d0:	1ab6      	subcs	r6, r6, r2
 80008d2:	4675      	movcs	r5, lr
 80008d4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d8:	085b      	lsrs	r3, r3, #1
 80008da:	ea4f 0232 	mov.w	r2, r2, rrx
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000920:	ea55 0e06 	orrs.w	lr, r5, r6
 8000924:	d018      	beq.n	8000958 <__aeabi_ddiv+0x114>
 8000926:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800092a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800092e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000932:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000936:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800093a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800093e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000942:	d1c0      	bne.n	80008c6 <__aeabi_ddiv+0x82>
 8000944:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000948:	d10b      	bne.n	8000962 <__aeabi_ddiv+0x11e>
 800094a:	ea41 0100 	orr.w	r1, r1, r0
 800094e:	f04f 0000 	mov.w	r0, #0
 8000952:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000956:	e7b6      	b.n	80008c6 <__aeabi_ddiv+0x82>
 8000958:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800095c:	bf04      	itt	eq
 800095e:	4301      	orreq	r1, r0
 8000960:	2000      	moveq	r0, #0
 8000962:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000966:	bf88      	it	hi
 8000968:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800096c:	f63f aeaf 	bhi.w	80006ce <__aeabi_dmul+0xde>
 8000970:	ebb5 0c03 	subs.w	ip, r5, r3
 8000974:	bf04      	itt	eq
 8000976:	ebb6 0c02 	subseq.w	ip, r6, r2
 800097a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800097e:	f150 0000 	adcs.w	r0, r0, #0
 8000982:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000986:	bd70      	pop	{r4, r5, r6, pc}
 8000988:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800098c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000990:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000994:	bfc2      	ittt	gt
 8000996:	ebd4 050c 	rsbsgt	r5, r4, ip
 800099a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800099e:	bd70      	popgt	{r4, r5, r6, pc}
 80009a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009a4:	f04f 0e00 	mov.w	lr, #0
 80009a8:	3c01      	subs	r4, #1
 80009aa:	e690      	b.n	80006ce <__aeabi_dmul+0xde>
 80009ac:	ea45 0e06 	orr.w	lr, r5, r6
 80009b0:	e68d      	b.n	80006ce <__aeabi_dmul+0xde>
 80009b2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009b6:	ea94 0f0c 	teq	r4, ip
 80009ba:	bf08      	it	eq
 80009bc:	ea95 0f0c 	teqeq	r5, ip
 80009c0:	f43f af3b 	beq.w	800083a <__aeabi_dmul+0x24a>
 80009c4:	ea94 0f0c 	teq	r4, ip
 80009c8:	d10a      	bne.n	80009e0 <__aeabi_ddiv+0x19c>
 80009ca:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009ce:	f47f af34 	bne.w	800083a <__aeabi_dmul+0x24a>
 80009d2:	ea95 0f0c 	teq	r5, ip
 80009d6:	f47f af25 	bne.w	8000824 <__aeabi_dmul+0x234>
 80009da:	4610      	mov	r0, r2
 80009dc:	4619      	mov	r1, r3
 80009de:	e72c      	b.n	800083a <__aeabi_dmul+0x24a>
 80009e0:	ea95 0f0c 	teq	r5, ip
 80009e4:	d106      	bne.n	80009f4 <__aeabi_ddiv+0x1b0>
 80009e6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009ea:	f43f aefd 	beq.w	80007e8 <__aeabi_dmul+0x1f8>
 80009ee:	4610      	mov	r0, r2
 80009f0:	4619      	mov	r1, r3
 80009f2:	e722      	b.n	800083a <__aeabi_dmul+0x24a>
 80009f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009fe:	f47f aec5 	bne.w	800078c <__aeabi_dmul+0x19c>
 8000a02:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a06:	f47f af0d 	bne.w	8000824 <__aeabi_dmul+0x234>
 8000a0a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a0e:	f47f aeeb 	bne.w	80007e8 <__aeabi_dmul+0x1f8>
 8000a12:	e712      	b.n	800083a <__aeabi_dmul+0x24a>

08000a14 <__gedf2>:
 8000a14:	f04f 3cff 	mov.w	ip, #4294967295
 8000a18:	e006      	b.n	8000a28 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__ledf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	e002      	b.n	8000a28 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__cmpdf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a38:	bf18      	it	ne
 8000a3a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a3e:	d01b      	beq.n	8000a78 <__cmpdf2+0x54>
 8000a40:	b001      	add	sp, #4
 8000a42:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a46:	bf0c      	ite	eq
 8000a48:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a4c:	ea91 0f03 	teqne	r1, r3
 8000a50:	bf02      	ittt	eq
 8000a52:	ea90 0f02 	teqeq	r0, r2
 8000a56:	2000      	moveq	r0, #0
 8000a58:	4770      	bxeq	lr
 8000a5a:	f110 0f00 	cmn.w	r0, #0
 8000a5e:	ea91 0f03 	teq	r1, r3
 8000a62:	bf58      	it	pl
 8000a64:	4299      	cmppl	r1, r3
 8000a66:	bf08      	it	eq
 8000a68:	4290      	cmpeq	r0, r2
 8000a6a:	bf2c      	ite	cs
 8000a6c:	17d8      	asrcs	r0, r3, #31
 8000a6e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a72:	f040 0001 	orr.w	r0, r0, #1
 8000a76:	4770      	bx	lr
 8000a78:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d102      	bne.n	8000a88 <__cmpdf2+0x64>
 8000a82:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a86:	d107      	bne.n	8000a98 <__cmpdf2+0x74>
 8000a88:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a90:	d1d6      	bne.n	8000a40 <__cmpdf2+0x1c>
 8000a92:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a96:	d0d3      	beq.n	8000a40 <__cmpdf2+0x1c>
 8000a98:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdrcmple>:
 8000aa0:	4684      	mov	ip, r0
 8000aa2:	4610      	mov	r0, r2
 8000aa4:	4662      	mov	r2, ip
 8000aa6:	468c      	mov	ip, r1
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4663      	mov	r3, ip
 8000aac:	e000      	b.n	8000ab0 <__aeabi_cdcmpeq>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_cdcmpeq>:
 8000ab0:	b501      	push	{r0, lr}
 8000ab2:	f7ff ffb7 	bl	8000a24 <__cmpdf2>
 8000ab6:	2800      	cmp	r0, #0
 8000ab8:	bf48      	it	mi
 8000aba:	f110 0f00 	cmnmi.w	r0, #0
 8000abe:	bd01      	pop	{r0, pc}

08000ac0 <__aeabi_dcmpeq>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff fff4 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000ac8:	bf0c      	ite	eq
 8000aca:	2001      	moveq	r0, #1
 8000acc:	2000      	movne	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_dcmplt>:
 8000ad4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad8:	f7ff ffea 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000adc:	bf34      	ite	cc
 8000ade:	2001      	movcc	r0, #1
 8000ae0:	2000      	movcs	r0, #0
 8000ae2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_dcmple>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff ffe0 	bl	8000ab0 <__aeabi_cdcmpeq>
 8000af0:	bf94      	ite	ls
 8000af2:	2001      	movls	r0, #1
 8000af4:	2000      	movhi	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmpge>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffce 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b04:	bf94      	ite	ls
 8000b06:	2001      	movls	r0, #1
 8000b08:	2000      	movhi	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmpgt>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffc4 	bl	8000aa0 <__aeabi_cdrcmple>
 8000b18:	bf34      	ite	cc
 8000b1a:	2001      	movcc	r0, #1
 8000b1c:	2000      	movcs	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpun>:
 8000b24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x10>
 8000b2e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b32:	d10a      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b34:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	d102      	bne.n	8000b44 <__aeabi_dcmpun+0x20>
 8000b3e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b42:	d102      	bne.n	8000b4a <__aeabi_dcmpun+0x26>
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	f04f 0001 	mov.w	r0, #1
 8000b4e:	4770      	bx	lr

08000b50 <__aeabi_d2iz>:
 8000b50:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b54:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b58:	d215      	bcs.n	8000b86 <__aeabi_d2iz+0x36>
 8000b5a:	d511      	bpl.n	8000b80 <__aeabi_d2iz+0x30>
 8000b5c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b60:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b64:	d912      	bls.n	8000b8c <__aeabi_d2iz+0x3c>
 8000b66:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b6e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b72:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b76:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7a:	bf18      	it	ne
 8000b7c:	4240      	negne	r0, r0
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d105      	bne.n	8000b98 <__aeabi_d2iz+0x48>
 8000b8c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b90:	bf08      	it	eq
 8000b92:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b97e 	b.w	8000eb4 <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	468c      	mov	ip, r1
 8000bd6:	460e      	mov	r6, r1
 8000bd8:	4604      	mov	r4, r0
 8000bda:	9d08      	ldr	r5, [sp, #32]
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d150      	bne.n	8000c82 <__udivmoddi4+0xb2>
 8000be0:	428a      	cmp	r2, r1
 8000be2:	4617      	mov	r7, r2
 8000be4:	d96c      	bls.n	8000cc0 <__udivmoddi4+0xf0>
 8000be6:	fab2 fe82 	clz	lr, r2
 8000bea:	f1be 0f00 	cmp.w	lr, #0
 8000bee:	d00b      	beq.n	8000c08 <__udivmoddi4+0x38>
 8000bf0:	f1ce 0420 	rsb	r4, lr, #32
 8000bf4:	fa20 f404 	lsr.w	r4, r0, r4
 8000bf8:	fa01 f60e 	lsl.w	r6, r1, lr
 8000bfc:	ea44 0c06 	orr.w	ip, r4, r6
 8000c00:	fa02 f70e 	lsl.w	r7, r2, lr
 8000c04:	fa00 f40e 	lsl.w	r4, r0, lr
 8000c08:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c0c:	0c22      	lsrs	r2, r4, #16
 8000c0e:	fbbc f0f9 	udiv	r0, ip, r9
 8000c12:	fa1f f887 	uxth.w	r8, r7
 8000c16:	fb09 c610 	mls	r6, r9, r0, ip
 8000c1a:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000c1e:	fb00 f308 	mul.w	r3, r0, r8
 8000c22:	42b3      	cmp	r3, r6
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x6a>
 8000c26:	19f6      	adds	r6, r6, r7
 8000c28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c2c:	f080 8122 	bcs.w	8000e74 <__udivmoddi4+0x2a4>
 8000c30:	42b3      	cmp	r3, r6
 8000c32:	f240 811f 	bls.w	8000e74 <__udivmoddi4+0x2a4>
 8000c36:	3802      	subs	r0, #2
 8000c38:	443e      	add	r6, r7
 8000c3a:	1af6      	subs	r6, r6, r3
 8000c3c:	b2a2      	uxth	r2, r4
 8000c3e:	fbb6 f3f9 	udiv	r3, r6, r9
 8000c42:	fb09 6613 	mls	r6, r9, r3, r6
 8000c46:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000c4a:	fb03 f808 	mul.w	r8, r3, r8
 8000c4e:	45a0      	cmp	r8, r4
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x96>
 8000c52:	19e4      	adds	r4, r4, r7
 8000c54:	f103 32ff 	add.w	r2, r3, #4294967295
 8000c58:	f080 810a 	bcs.w	8000e70 <__udivmoddi4+0x2a0>
 8000c5c:	45a0      	cmp	r8, r4
 8000c5e:	f240 8107 	bls.w	8000e70 <__udivmoddi4+0x2a0>
 8000c62:	3b02      	subs	r3, #2
 8000c64:	443c      	add	r4, r7
 8000c66:	ebc8 0404 	rsb	r4, r8, r4
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	2100      	movs	r1, #0
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d062      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000c74:	fa24 f40e 	lsr.w	r4, r4, lr
 8000c78:	2300      	movs	r3, #0
 8000c7a:	602c      	str	r4, [r5, #0]
 8000c7c:	606b      	str	r3, [r5, #4]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d907      	bls.n	8000c96 <__udivmoddi4+0xc6>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	d055      	beq.n	8000d36 <__udivmoddi4+0x166>
 8000c8a:	2100      	movs	r1, #0
 8000c8c:	e885 0041 	stmia.w	r5, {r0, r6}
 8000c90:	4608      	mov	r0, r1
 8000c92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c96:	fab3 f183 	clz	r1, r3
 8000c9a:	2900      	cmp	r1, #0
 8000c9c:	f040 8090 	bne.w	8000dc0 <__udivmoddi4+0x1f0>
 8000ca0:	42b3      	cmp	r3, r6
 8000ca2:	d302      	bcc.n	8000caa <__udivmoddi4+0xda>
 8000ca4:	4282      	cmp	r2, r0
 8000ca6:	f200 80f8 	bhi.w	8000e9a <__udivmoddi4+0x2ca>
 8000caa:	1a84      	subs	r4, r0, r2
 8000cac:	eb66 0603 	sbc.w	r6, r6, r3
 8000cb0:	2001      	movs	r0, #1
 8000cb2:	46b4      	mov	ip, r6
 8000cb4:	2d00      	cmp	r5, #0
 8000cb6:	d040      	beq.n	8000d3a <__udivmoddi4+0x16a>
 8000cb8:	e885 1010 	stmia.w	r5, {r4, ip}
 8000cbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc0:	b912      	cbnz	r2, 8000cc8 <__udivmoddi4+0xf8>
 8000cc2:	2701      	movs	r7, #1
 8000cc4:	fbb7 f7f2 	udiv	r7, r7, r2
 8000cc8:	fab7 fe87 	clz	lr, r7
 8000ccc:	f1be 0f00 	cmp.w	lr, #0
 8000cd0:	d135      	bne.n	8000d3e <__udivmoddi4+0x16e>
 8000cd2:	1bf3      	subs	r3, r6, r7
 8000cd4:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cd8:	fa1f fc87 	uxth.w	ip, r7
 8000cdc:	2101      	movs	r1, #1
 8000cde:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce2:	0c22      	lsrs	r2, r4, #16
 8000ce4:	fb08 3610 	mls	r6, r8, r0, r3
 8000ce8:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
 8000cec:	fb0c f300 	mul.w	r3, ip, r0
 8000cf0:	42b3      	cmp	r3, r6
 8000cf2:	d907      	bls.n	8000d04 <__udivmoddi4+0x134>
 8000cf4:	19f6      	adds	r6, r6, r7
 8000cf6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x132>
 8000cfc:	42b3      	cmp	r3, r6
 8000cfe:	f200 80ce 	bhi.w	8000e9e <__udivmoddi4+0x2ce>
 8000d02:	4610      	mov	r0, r2
 8000d04:	1af6      	subs	r6, r6, r3
 8000d06:	b2a2      	uxth	r2, r4
 8000d08:	fbb6 f3f8 	udiv	r3, r6, r8
 8000d0c:	fb08 6613 	mls	r6, r8, r3, r6
 8000d10:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
 8000d14:	fb0c fc03 	mul.w	ip, ip, r3
 8000d18:	45a4      	cmp	ip, r4
 8000d1a:	d907      	bls.n	8000d2c <__udivmoddi4+0x15c>
 8000d1c:	19e4      	adds	r4, r4, r7
 8000d1e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x15a>
 8000d24:	45a4      	cmp	ip, r4
 8000d26:	f200 80b5 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	ebcc 0404 	rsb	r4, ip, r4
 8000d30:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d34:	e79c      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000d36:	4629      	mov	r1, r5
 8000d38:	4628      	mov	r0, r5
 8000d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3e:	f1ce 0120 	rsb	r1, lr, #32
 8000d42:	fa06 f30e 	lsl.w	r3, r6, lr
 8000d46:	fa07 f70e 	lsl.w	r7, r7, lr
 8000d4a:	fa20 f901 	lsr.w	r9, r0, r1
 8000d4e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d52:	40ce      	lsrs	r6, r1
 8000d54:	ea49 0903 	orr.w	r9, r9, r3
 8000d58:	fbb6 faf8 	udiv	sl, r6, r8
 8000d5c:	ea4f 4419 	mov.w	r4, r9, lsr #16
 8000d60:	fb08 661a 	mls	r6, r8, sl, r6
 8000d64:	fa1f fc87 	uxth.w	ip, r7
 8000d68:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
 8000d6c:	fb0a f20c 	mul.w	r2, sl, ip
 8000d70:	429a      	cmp	r2, r3
 8000d72:	fa00 f40e 	lsl.w	r4, r0, lr
 8000d76:	d90a      	bls.n	8000d8e <__udivmoddi4+0x1be>
 8000d78:	19db      	adds	r3, r3, r7
 8000d7a:	f10a 31ff 	add.w	r1, sl, #4294967295
 8000d7e:	f080 8087 	bcs.w	8000e90 <__udivmoddi4+0x2c0>
 8000d82:	429a      	cmp	r2, r3
 8000d84:	f240 8084 	bls.w	8000e90 <__udivmoddi4+0x2c0>
 8000d88:	f1aa 0a02 	sub.w	sl, sl, #2
 8000d8c:	443b      	add	r3, r7
 8000d8e:	1a9b      	subs	r3, r3, r2
 8000d90:	fa1f f989 	uxth.w	r9, r9
 8000d94:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d98:	fb08 3311 	mls	r3, r8, r1, r3
 8000d9c:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
 8000da0:	fb01 f60c 	mul.w	r6, r1, ip
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0x1e8>
 8000da8:	19db      	adds	r3, r3, r7
 8000daa:	f101 32ff 	add.w	r2, r1, #4294967295
 8000dae:	d26b      	bcs.n	8000e88 <__udivmoddi4+0x2b8>
 8000db0:	429e      	cmp	r6, r3
 8000db2:	d969      	bls.n	8000e88 <__udivmoddi4+0x2b8>
 8000db4:	3902      	subs	r1, #2
 8000db6:	443b      	add	r3, r7
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8000dbe:	e78e      	b.n	8000cde <__udivmoddi4+0x10e>
 8000dc0:	f1c1 0e20 	rsb	lr, r1, #32
 8000dc4:	fa22 f40e 	lsr.w	r4, r2, lr
 8000dc8:	408b      	lsls	r3, r1
 8000dca:	4323      	orrs	r3, r4
 8000dcc:	fa20 f70e 	lsr.w	r7, r0, lr
 8000dd0:	fa06 f401 	lsl.w	r4, r6, r1
 8000dd4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000dd8:	fa26 f60e 	lsr.w	r6, r6, lr
 8000ddc:	433c      	orrs	r4, r7
 8000dde:	fbb6 f9fc 	udiv	r9, r6, ip
 8000de2:	0c27      	lsrs	r7, r4, #16
 8000de4:	fb0c 6619 	mls	r6, ip, r9, r6
 8000de8:	fa1f f883 	uxth.w	r8, r3
 8000dec:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
 8000df0:	fb09 f708 	mul.w	r7, r9, r8
 8000df4:	42b7      	cmp	r7, r6
 8000df6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dfa:	fa00 fa01 	lsl.w	sl, r0, r1
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x242>
 8000e00:	18f6      	adds	r6, r6, r3
 8000e02:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e06:	d241      	bcs.n	8000e8c <__udivmoddi4+0x2bc>
 8000e08:	42b7      	cmp	r7, r6
 8000e0a:	d93f      	bls.n	8000e8c <__udivmoddi4+0x2bc>
 8000e0c:	f1a9 0902 	sub.w	r9, r9, #2
 8000e10:	441e      	add	r6, r3
 8000e12:	1bf6      	subs	r6, r6, r7
 8000e14:	b2a0      	uxth	r0, r4
 8000e16:	fbb6 f4fc 	udiv	r4, r6, ip
 8000e1a:	fb0c 6614 	mls	r6, ip, r4, r6
 8000e1e:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
 8000e22:	fb04 f808 	mul.w	r8, r4, r8
 8000e26:	45b8      	cmp	r8, r7
 8000e28:	d907      	bls.n	8000e3a <__udivmoddi4+0x26a>
 8000e2a:	18ff      	adds	r7, r7, r3
 8000e2c:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e30:	d228      	bcs.n	8000e84 <__udivmoddi4+0x2b4>
 8000e32:	45b8      	cmp	r8, r7
 8000e34:	d926      	bls.n	8000e84 <__udivmoddi4+0x2b4>
 8000e36:	3c02      	subs	r4, #2
 8000e38:	441f      	add	r7, r3
 8000e3a:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
 8000e3e:	ebc8 0707 	rsb	r7, r8, r7
 8000e42:	fba0 8902 	umull	r8, r9, r0, r2
 8000e46:	454f      	cmp	r7, r9
 8000e48:	4644      	mov	r4, r8
 8000e4a:	464e      	mov	r6, r9
 8000e4c:	d314      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000e4e:	d029      	beq.n	8000ea4 <__udivmoddi4+0x2d4>
 8000e50:	b365      	cbz	r5, 8000eac <__udivmoddi4+0x2dc>
 8000e52:	ebba 0304 	subs.w	r3, sl, r4
 8000e56:	eb67 0706 	sbc.w	r7, r7, r6
 8000e5a:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000e5e:	40cb      	lsrs	r3, r1
 8000e60:	40cf      	lsrs	r7, r1
 8000e62:	ea4e 0303 	orr.w	r3, lr, r3
 8000e66:	e885 0088 	stmia.w	r5, {r3, r7}
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e70:	4613      	mov	r3, r2
 8000e72:	e6f8      	b.n	8000c66 <__udivmoddi4+0x96>
 8000e74:	4610      	mov	r0, r2
 8000e76:	e6e0      	b.n	8000c3a <__udivmoddi4+0x6a>
 8000e78:	ebb8 0402 	subs.w	r4, r8, r2
 8000e7c:	eb69 0603 	sbc.w	r6, r9, r3
 8000e80:	3801      	subs	r0, #1
 8000e82:	e7e5      	b.n	8000e50 <__udivmoddi4+0x280>
 8000e84:	4604      	mov	r4, r0
 8000e86:	e7d8      	b.n	8000e3a <__udivmoddi4+0x26a>
 8000e88:	4611      	mov	r1, r2
 8000e8a:	e795      	b.n	8000db8 <__udivmoddi4+0x1e8>
 8000e8c:	4681      	mov	r9, r0
 8000e8e:	e7c0      	b.n	8000e12 <__udivmoddi4+0x242>
 8000e90:	468a      	mov	sl, r1
 8000e92:	e77c      	b.n	8000d8e <__udivmoddi4+0x1be>
 8000e94:	3b02      	subs	r3, #2
 8000e96:	443c      	add	r4, r7
 8000e98:	e748      	b.n	8000d2c <__udivmoddi4+0x15c>
 8000e9a:	4608      	mov	r0, r1
 8000e9c:	e70a      	b.n	8000cb4 <__udivmoddi4+0xe4>
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	443e      	add	r6, r7
 8000ea2:	e72f      	b.n	8000d04 <__udivmoddi4+0x134>
 8000ea4:	45c2      	cmp	sl, r8
 8000ea6:	d3e7      	bcc.n	8000e78 <__udivmoddi4+0x2a8>
 8000ea8:	463e      	mov	r6, r7
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x280>
 8000eac:	4629      	mov	r1, r5
 8000eae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eb2:	bf00      	nop

08000eb4 <__aeabi_idiv0>:
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop

08000eb8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000eb8:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000eba:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_InitTick+0x24>)
  *         implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ebc:	4604      	mov	r4, r0
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock / 1000U);
 8000ebe:	6818      	ldr	r0, [r3, #0]
 8000ec0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ec4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000ec8:	f000 f88a 	bl	8000fe0 <HAL_SYSTICK_Config>
 
  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4621      	mov	r1, r4
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f844 	bl	8000f60 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 8000ed8:	2000      	movs	r0, #0
 8000eda:	bd10      	pop	{r4, pc}
 8000edc:	20000008 	.word	0x20000008

08000ee0 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee0:	4a07      	ldr	r2, [pc, #28]	; (8000f00 <HAL_Init+0x20>)
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b508      	push	{r3, lr}
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ee4:	6813      	ldr	r3, [r2, #0]
 8000ee6:	f043 0310 	orr.w	r3, r3, #16
 8000eea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eec:	2003      	movs	r0, #3
 8000eee:	f000 f825 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ef2:	2000      	movs	r0, #0
 8000ef4:	f7ff ffe0 	bl	8000eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef8:	f002 fab8 	bl	800346c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8000efc:	2000      	movs	r0, #0
 8000efe:	bd08      	pop	{r3, pc}
 8000f00:	40022000 	.word	0x40022000

08000f04 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8000f04:	4a02      	ldr	r2, [pc, #8]	; (8000f10 <HAL_IncTick+0xc>)
 8000f06:	6813      	ldr	r3, [r2, #0]
 8000f08:	3301      	adds	r3, #1
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	200005d0 	.word	0x200005d0

08000f14 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000f14:	4b01      	ldr	r3, [pc, #4]	; (8000f1c <HAL_GetTick+0x8>)
 8000f16:	6818      	ldr	r0, [r3, #0]
}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	200005d0 	.word	0x200005d0

08000f20 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8000f20:	b513      	push	{r0, r1, r4, lr}
 8000f22:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f24:	f7ff fff6 	bl	8000f14 <HAL_GetTick>
 8000f28:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8000f2a:	f7ff fff3 	bl	8000f14 <HAL_GetTick>
 8000f2e:	9b01      	ldr	r3, [sp, #4]
 8000f30:	1b00      	subs	r0, r0, r4
 8000f32:	4298      	cmp	r0, r3
 8000f34:	d3f9      	bcc.n	8000f2a <HAL_Delay+0xa>
  {
  }
}
 8000f36:	b002      	add	sp, #8
 8000f38:	bd10      	pop	{r4, pc}
	...

08000f3c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f3c:	4a07      	ldr	r2, [pc, #28]	; (8000f5c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000f3e:	68d3      	ldr	r3, [r2, #12]
 8000f40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000f44:	041b      	lsls	r3, r3, #16
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
 8000f4c:	0200      	lsls	r0, r0, #8
 8000f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f52:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8000f56:	4303      	orrs	r3, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
  SCB->AIRCR =  reg_value;
 8000f58:	60d3      	str	r3, [r2, #12]
 8000f5a:	4770      	bx	lr
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f60:	4b17      	ldr	r3, [pc, #92]	; (8000fc0 <HAL_NVIC_SetPriority+0x60>)
 8000f62:	68db      	ldr	r3, [r3, #12]
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f64:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f68:	b530      	push	{r4, r5, lr}
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f6a:	f1c3 0407 	rsb	r4, r3, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f6e:	1d1d      	adds	r5, r3, #4
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f70:	2c04      	cmp	r4, #4
 8000f72:	bf28      	it	cs
 8000f74:	2404      	movcs	r4, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f76:	2d06      	cmp	r5, #6

  return (
 8000f78:	f04f 0501 	mov.w	r5, #1
 8000f7c:	fa05 f404 	lsl.w	r4, r5, r4
 8000f80:	f104 34ff 	add.w	r4, r4, #4294967295
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f84:	bf8c      	ite	hi
 8000f86:	3b03      	subhi	r3, #3
 8000f88:	2300      	movls	r3, #0

  return (
 8000f8a:	400c      	ands	r4, r1
 8000f8c:	409c      	lsls	r4, r3
 8000f8e:	fa05 f303 	lsl.w	r3, r5, r3
 8000f92:	3b01      	subs	r3, #1
 8000f94:	401a      	ands	r2, r3
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8000f96:	2800      	cmp	r0, #0
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));

  return (
 8000f98:	ea42 0204 	orr.w	r2, r2, r4
 8000f9c:	ea4f 1202 	mov.w	r2, r2, lsl #4
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa0:	bfaf      	iteee	ge
 8000fa2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fa6:	f000 000f 	andlt.w	r0, r0, #15
 8000faa:	4b06      	ldrlt	r3, [pc, #24]	; (8000fc4 <HAL_NVIC_SetPriority+0x64>)
 8000fac:	b2d2      	uxtblt	r2, r2
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	bfa5      	ittet	ge
 8000fb0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000fb4:	b2d2      	uxtbge	r2, r2
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb6:	541a      	strblt	r2, [r3, r0]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fb8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000fbc:	bd30      	pop	{r4, r5, pc}
 8000fbe:	bf00      	nop
 8000fc0:	e000ed00 	.word	0xe000ed00
 8000fc4:	e000ed14 	.word	0xe000ed14

08000fc8 <HAL_NVIC_EnableIRQ>:
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000fc8:	0942      	lsrs	r2, r0, #5
 8000fca:	2301      	movs	r3, #1
 8000fcc:	f000 001f 	and.w	r0, r0, #31
 8000fd0:	fa03 f000 	lsl.w	r0, r3, r0
 8000fd4:	4b01      	ldr	r3, [pc, #4]	; (8000fdc <HAL_NVIC_EnableIRQ+0x14>)
 8000fd6:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000fda:	4770      	bx	lr
 8000fdc:	e000e100 	.word	0xe000e100

08000fe0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000fe6:	d20a      	bcs.n	8000ffe <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <HAL_SYSTICK_Config+0x24>)
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fea:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_SYSTICK_Config+0x28>)
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fec:	6058      	str	r0, [r3, #4]
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fee:	21f0      	movs	r1, #240	; 0xf0
 8000ff0:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff4:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	2207      	movs	r2, #7
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff8:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	4770      	bx	lr
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffe:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	e000e010 	.word	0xe000e010
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 800100c:	4b04      	ldr	r3, [pc, #16]	; (8001020 <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800100e:	681a      	ldr	r2, [r3, #0]
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 8001010:	2804      	cmp	r0, #4
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 8001012:	bf0c      	ite	eq
 8001014:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8001018:	f022 0204 	bicne.w	r2, r2, #4
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	4770      	bx	lr
 8001020:	e000e010 	.word	0xe000e010

08001024 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8001024:	4770      	bx	lr

08001026 <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  This function handles SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8001026:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8001028:	f7ff fffc 	bl	8001024 <HAL_SYSTICK_Callback>
 800102c:	bd08      	pop	{r3, pc}
	...

08001030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	f8df 9184 	ldr.w	r9, [pc, #388]	; 80011bc <HAL_GPIO_Init+0x18c>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001038:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 80011c0 <HAL_GPIO_Init+0x190>
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800103e:	b085      	sub	sp, #20
 8001040:	464c      	mov	r4, r9
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001042:	9301      	str	r3, [sp, #4]
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00U;
 8001044:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001046:	9a01      	ldr	r2, [sp, #4]
 8001048:	40da      	lsrs	r2, r3
 800104a:	f000 80b1 	beq.w	80011b0 <HAL_GPIO_Init+0x180>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800104e:	2201      	movs	r2, #1
 8001050:	fa02 fa03 	lsl.w	sl, r2, r3

    if(iocurrent)
 8001054:	9a01      	ldr	r2, [sp, #4]
 8001056:	ea12 060a 	ands.w	r6, r2, sl
 800105a:	f000 80a7 	beq.w	80011ac <HAL_GPIO_Init+0x17c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800105e:	684a      	ldr	r2, [r1, #4]
 8001060:	f022 0e10 	bic.w	lr, r2, #16
 8001064:	f1be 0f02 	cmp.w	lr, #2
 8001068:	d114      	bne.n	8001094 <HAL_GPIO_Init+0x64>
 800106a:	ea4f 0cd3 	mov.w	ip, r3, lsr #3
 800106e:	eb00 0c8c 	add.w	ip, r0, ip, lsl #2
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001072:	f003 0b07 	and.w	fp, r3, #7
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001076:	f8dc 7020 	ldr.w	r7, [ip, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800107a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800107e:	250f      	movs	r5, #15
 8001080:	fa05 f50b 	lsl.w	r5, r5, fp
 8001084:	ea27 0505 	bic.w	r5, r7, r5
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001088:	690f      	ldr	r7, [r1, #16]
 800108a:	fa07 f70b 	lsl.w	r7, r7, fp
 800108e:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3] = temp;
 8001090:	f8cc 7020 	str.w	r7, [ip, #32]
 8001094:	ea4f 0b43 	mov.w	fp, r3, lsl #1
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001098:	2703      	movs	r7, #3
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	6805      	ldr	r5, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800109c:	fa07 fc0b 	lsl.w	ip, r7, fp
 80010a0:	ea6f 0c0c 	mvn.w	ip, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a4:	4017      	ands	r7, r2
        GPIOx->AFR[position >> 3] = temp;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010a6:	ea05 050c 	and.w	r5, r5, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010aa:	fa07 f70b 	lsl.w	r7, r7, fp
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ae:	f10e 3eff 	add.w	lr, lr, #4294967295
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b2:	433d      	orrs	r5, r7
      GPIOx->MODER = temp;

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b4:	f1be 0f01 	cmp.w	lr, #1

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
      GPIOx->MODER = temp;
 80010b8:	6005      	str	r5, [r0, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010ba:	d810      	bhi.n	80010de <HAL_GPIO_Init+0xae>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010be:	68cf      	ldr	r7, [r1, #12]
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c0:	ea0c 0505 	and.w	r5, ip, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010c4:	fa07 f70b 	lsl.w	r7, r7, fp
 80010c8:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 80010ca:	6087      	str	r7, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010cc:	6845      	ldr	r5, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010ce:	ea25 0a0a 	bic.w	sl, r5, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d2:	f3c2 1500 	ubfx	r5, r2, #4, #1
 80010d6:	409d      	lsls	r5, r3
 80010d8:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->OTYPER = temp;
 80010dc:	6045      	str	r5, [r0, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010de:	68c5      	ldr	r5, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e0:	ea0c 0c05 	and.w	ip, ip, r5
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010e4:	688d      	ldr	r5, [r1, #8]
 80010e6:	fa05 f50b 	lsl.w	r5, r5, fp
 80010ea:	ea45 050c 	orr.w	r5, r5, ip
      GPIOx->PUPDR = temp;
 80010ee:	60c5      	str	r5, [r0, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010f0:	00d5      	lsls	r5, r2, #3
 80010f2:	d55b      	bpl.n	80011ac <HAL_GPIO_Init+0x17c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010f4:	f8d8 5018 	ldr.w	r5, [r8, #24]
 80010f8:	f045 0501 	orr.w	r5, r5, #1
 80010fc:	f8c8 5018 	str.w	r5, [r8, #24]
 8001100:	f8d8 5018 	ldr.w	r5, [r8, #24]
 8001104:	f023 0e03 	bic.w	lr, r3, #3
 8001108:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
 800110c:	f005 0501 	and.w	r5, r5, #1
 8001110:	f50e 3e80 	add.w	lr, lr, #65536	; 0x10000
 8001114:	9503      	str	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001116:	f003 0c03 	and.w	ip, r3, #3
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800111a:	9d03      	ldr	r5, [sp, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800111c:	f8de 5008 	ldr.w	r5, [lr, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001120:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001124:	270f      	movs	r7, #15
 8001126:	fa07 f70c 	lsl.w	r7, r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800112a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2];
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800112e:	ea25 0507 	bic.w	r5, r5, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001132:	d011      	beq.n	8001158 <HAL_GPIO_Init+0x128>
 8001134:	4f20      	ldr	r7, [pc, #128]	; (80011b8 <HAL_GPIO_Init+0x188>)
 8001136:	42b8      	cmp	r0, r7
 8001138:	d010      	beq.n	800115c <HAL_GPIO_Init+0x12c>
 800113a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800113e:	42b8      	cmp	r0, r7
 8001140:	d00e      	beq.n	8001160 <HAL_GPIO_Init+0x130>
 8001142:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 8001146:	42b8      	cmp	r0, r7
 8001148:	d00c      	beq.n	8001164 <HAL_GPIO_Init+0x134>
 800114a:	f507 6780 	add.w	r7, r7, #1024	; 0x400
 800114e:	42b8      	cmp	r0, r7
 8001150:	bf14      	ite	ne
 8001152:	2705      	movne	r7, #5
 8001154:	2704      	moveq	r7, #4
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x136>
 8001158:	2700      	movs	r7, #0
 800115a:	e004      	b.n	8001166 <HAL_GPIO_Init+0x136>
 800115c:	2701      	movs	r7, #1
 800115e:	e002      	b.n	8001166 <HAL_GPIO_Init+0x136>
 8001160:	2702      	movs	r7, #2
 8001162:	e000      	b.n	8001166 <HAL_GPIO_Init+0x136>
 8001164:	2703      	movs	r7, #3
 8001166:	fa07 fc0c 	lsl.w	ip, r7, ip
 800116a:	ea4c 0505 	orr.w	r5, ip, r5
        SYSCFG->EXTICR[position >> 2] = temp;
 800116e:	f8ce 5008 	str.w	r5, [lr, #8]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001172:	f8d9 5000 	ldr.w	r5, [r9]
        temp &= ~((uint32_t)iocurrent);
 8001176:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001178:	f412 3f80 	tst.w	r2, #65536	; 0x10000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
 800117c:	bf0c      	ite	eq
 800117e:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          temp |= iocurrent;
 8001180:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 8001182:	6025      	str	r5, [r4, #0]

        temp = EXTI->EMR;
 8001184:	6865      	ldr	r5, [r4, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001186:	f412 3f00 	tst.w	r2, #131072	; 0x20000
          temp |= iocurrent;
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
 800118a:	bf0c      	ite	eq
 800118c:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          temp |= iocurrent;
 800118e:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 8001190:	6065      	str	r5, [r4, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001192:	68a5      	ldr	r5, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001194:	f412 1f80 	tst.w	r2, #1048576	; 0x100000
        }
        EXTI->EMR = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
 8001198:	bf0c      	ite	eq
 800119a:	403d      	andeq	r5, r7
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          temp |= iocurrent;
 800119c:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 800119e:	60a5      	str	r5, [r4, #8]

        temp = EXTI->FTSR;
 80011a0:	68e5      	ldr	r5, [r4, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a2:	0292      	lsls	r2, r2, #10
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
 80011a4:	bf54      	ite	pl
 80011a6:	403d      	andpl	r5, r7
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          temp |= iocurrent;
 80011a8:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80011aa:	60e5      	str	r5, [r4, #12]
      }
    }
    
    position++;
 80011ac:	3301      	adds	r3, #1
 80011ae:	e74a      	b.n	8001046 <HAL_GPIO_Init+0x16>
  }
}
 80011b0:	b005      	add	sp, #20
 80011b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011b6:	bf00      	nop
 80011b8:	48000400 	.word	0x48000400
 80011bc:	40010400 	.word	0x40010400
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011c4:	b10a      	cbz	r2, 80011ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011c6:	6181      	str	r1, [r0, #24]
 80011c8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ca:	6281      	str	r1, [r0, #40]	; 0x28
 80011cc:	4770      	bx	lr
	...

080011d0 <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011d0:	6803      	ldr	r3, [r0, #0]
 80011d2:	07da      	lsls	r2, r3, #31
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80011d8:	4605      	mov	r5, r0
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011da:	d403      	bmi.n	80011e4 <HAL_RCC_OscConfig+0x14>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	079b      	lsls	r3, r3, #30
 80011e0:	d476      	bmi.n	80012d0 <HAL_RCC_OscConfig+0x100>
 80011e2:	e0f8      	b.n	80013d6 <HAL_RCC_OscConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80011e4:	4cba      	ldr	r4, [pc, #744]	; (80014d0 <HAL_RCC_OscConfig+0x300>)
 80011e6:	6863      	ldr	r3, [r4, #4]
 80011e8:	f003 030c 	and.w	r3, r3, #12
 80011ec:	2b04      	cmp	r3, #4
 80011ee:	d007      	beq.n	8001200 <HAL_RCC_OscConfig+0x30>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80011f0:	6863      	ldr	r3, [r4, #4]
 80011f2:	f003 030c 	and.w	r3, r3, #12
 80011f6:	2b08      	cmp	r3, #8
 80011f8:	d117      	bne.n	800122a <HAL_RCC_OscConfig+0x5a>
 80011fa:	6863      	ldr	r3, [r4, #4]
 80011fc:	03df      	lsls	r7, r3, #15
 80011fe:	d514      	bpl.n	800122a <HAL_RCC_OscConfig+0x5a>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001204:	fa93 f2a3 	rbit	r2, r3
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001208:	6821      	ldr	r1, [r4, #0]
 800120a:	fa93 f3a3 	rbit	r3, r3
 800120e:	fab3 f383 	clz	r3, r3
 8001212:	f003 031f 	and.w	r3, r3, #31
 8001216:	2201      	movs	r2, #1
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	420b      	tst	r3, r1
 800121e:	d0dd      	beq.n	80011dc <HAL_RCC_OscConfig+0xc>
 8001220:	686b      	ldr	r3, [r5, #4]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d1da      	bne.n	80011dc <HAL_RCC_OscConfig+0xc>
      {
        return HAL_ERROR;
 8001226:	2001      	movs	r0, #1
 8001228:	e24a      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122a:	686b      	ldr	r3, [r5, #4]
 800122c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001230:	d007      	beq.n	8001242 <HAL_RCC_OscConfig+0x72>
 8001232:	6822      	ldr	r2, [r4, #0]
 8001234:	b14b      	cbz	r3, 800124a <HAL_RCC_OscConfig+0x7a>
 8001236:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x7a>
 800123c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001240:	6022      	str	r2, [r4, #0]
 8001242:	6822      	ldr	r2, [r4, #0]
 8001244:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001248:	e005      	b.n	8001256 <HAL_RCC_OscConfig+0x86>
 800124a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800124e:	6022      	str	r2, [r4, #0]
 8001250:	6822      	ldr	r2, [r4, #0]
 8001252:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001256:	6022      	str	r2, [r4, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001258:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800125a:	f022 010f 	bic.w	r1, r2, #15
 800125e:	68aa      	ldr	r2, [r5, #8]
 8001260:	430a      	orrs	r2, r1
 8001262:	62e2      	str	r2, [r4, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001264:	b1d3      	cbz	r3, 800129c <HAL_RCC_OscConfig+0xcc>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001266:	f7ff fe55 	bl	8000f14 <HAL_GetTick>
 800126a:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800126e:	4680      	mov	r8, r0
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001270:	2701      	movs	r7, #1
 8001272:	fa96 f3a6 	rbit	r3, r6
 8001276:	6822      	ldr	r2, [r4, #0]
 8001278:	fa96 f3a6 	rbit	r3, r6
 800127c:	fab3 f383 	clz	r3, r3
 8001280:	f003 031f 	and.w	r3, r3, #31
 8001284:	fa07 f303 	lsl.w	r3, r7, r3
 8001288:	4213      	tst	r3, r2
 800128a:	d1a7      	bne.n	80011dc <HAL_RCC_OscConfig+0xc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800128c:	f7ff fe42 	bl	8000f14 <HAL_GetTick>
 8001290:	ebc8 0000 	rsb	r0, r8, r0
 8001294:	2864      	cmp	r0, #100	; 0x64
 8001296:	d9ec      	bls.n	8001272 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_TIMEOUT;
 8001298:	2003      	movs	r0, #3
 800129a:	e211      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129c:	f7ff fe3a 	bl	8000f14 <HAL_GetTick>
 80012a0:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80012a4:	4680      	mov	r8, r0
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012a6:	2701      	movs	r7, #1
 80012a8:	fa96 f3a6 	rbit	r3, r6
 80012ac:	6822      	ldr	r2, [r4, #0]
 80012ae:	fa96 f3a6 	rbit	r3, r6
 80012b2:	fab3 f383 	clz	r3, r3
 80012b6:	f003 031f 	and.w	r3, r3, #31
 80012ba:	fa07 f303 	lsl.w	r3, r7, r3
 80012be:	4213      	tst	r3, r2
 80012c0:	d08c      	beq.n	80011dc <HAL_RCC_OscConfig+0xc>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012c2:	f7ff fe27 	bl	8000f14 <HAL_GetTick>
 80012c6:	ebc8 0000 	rsb	r0, r8, r0
 80012ca:	2864      	cmp	r0, #100	; 0x64
 80012cc:	d9ec      	bls.n	80012a8 <HAL_RCC_OscConfig+0xd8>
 80012ce:	e7e3      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80012d0:	4c7f      	ldr	r4, [pc, #508]	; (80014d0 <HAL_RCC_OscConfig+0x300>)
 80012d2:	6863      	ldr	r3, [r4, #4]
 80012d4:	f013 0f0c 	tst.w	r3, #12
 80012d8:	d007      	beq.n	80012ea <HAL_RCC_OscConfig+0x11a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80012da:	6863      	ldr	r3, [r4, #4]
 80012dc:	f003 030c 	and.w	r3, r3, #12
 80012e0:	2b08      	cmp	r3, #8
 80012e2:	d122      	bne.n	800132a <HAL_RCC_OscConfig+0x15a>
 80012e4:	6863      	ldr	r3, [r4, #4]
 80012e6:	03de      	lsls	r6, r3, #15
 80012e8:	d41f      	bmi.n	800132a <HAL_RCC_OscConfig+0x15a>
 80012ea:	2302      	movs	r3, #2
 80012ec:	fa93 f2a3 	rbit	r2, r3
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f0:	6821      	ldr	r1, [r4, #0]
 80012f2:	fa93 f3a3 	rbit	r3, r3
 80012f6:	fab3 f383 	clz	r3, r3
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	2201      	movs	r2, #1
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	420b      	tst	r3, r1
 8001306:	d002      	beq.n	800130e <HAL_RCC_OscConfig+0x13e>
 8001308:	692b      	ldr	r3, [r5, #16]
 800130a:	4293      	cmp	r3, r2
 800130c:	d18b      	bne.n	8001226 <HAL_RCC_OscConfig+0x56>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	22f8      	movs	r2, #248	; 0xf8
 8001312:	fa92 f2a2 	rbit	r2, r2
 8001316:	6969      	ldr	r1, [r5, #20]
 8001318:	fab2 f282 	clz	r2, r2
 800131c:	fa01 f202 	lsl.w	r2, r1, r2
 8001320:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001324:	4313      	orrs	r3, r2
 8001326:	6023      	str	r3, [r4, #0]
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001328:	e055      	b.n	80013d6 <HAL_RCC_OscConfig+0x206>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800132a:	692a      	ldr	r2, [r5, #16]
 800132c:	2601      	movs	r6, #1
 800132e:	b382      	cbz	r2, 8001392 <HAL_RCC_OscConfig+0x1c2>
 8001330:	fa96 f3a6 	rbit	r3, r6
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001334:	fab3 f383 	clz	r3, r3
 8001338:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800133c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	2702      	movs	r7, #2
 8001344:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001346:	f7ff fde5 	bl	8000f14 <HAL_GetTick>
 800134a:	4680      	mov	r8, r0
 800134c:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001350:	485f      	ldr	r0, [pc, #380]	; (80014d0 <HAL_RCC_OscConfig+0x300>)
 8001352:	6822      	ldr	r2, [r4, #0]
 8001354:	fa97 f3a7 	rbit	r3, r7
 8001358:	fab3 f383 	clz	r3, r3
 800135c:	f003 031f 	and.w	r3, r3, #31
 8001360:	fa06 f303 	lsl.w	r3, r6, r3
 8001364:	4213      	tst	r3, r2
 8001366:	d106      	bne.n	8001376 <HAL_RCC_OscConfig+0x1a6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001368:	f7ff fdd4 	bl	8000f14 <HAL_GetTick>
 800136c:	ebc8 0000 	rsb	r0, r8, r0
 8001370:	2802      	cmp	r0, #2
 8001372:	d9eb      	bls.n	800134c <HAL_RCC_OscConfig+0x17c>
 8001374:	e790      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001376:	6803      	ldr	r3, [r0, #0]
 8001378:	22f8      	movs	r2, #248	; 0xf8
 800137a:	fa92 f2a2 	rbit	r2, r2
 800137e:	6969      	ldr	r1, [r5, #20]
 8001380:	fab2 f282 	clz	r2, r2
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800138c:	4313      	orrs	r3, r2
 800138e:	6003      	str	r3, [r0, #0]
 8001390:	e021      	b.n	80013d6 <HAL_RCC_OscConfig+0x206>
 8001392:	fa96 f3a6 	rbit	r3, r6
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001396:	fab3 f383 	clz	r3, r3
 800139a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800139e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013a2:	009b      	lsls	r3, r3, #2
 80013a4:	2702      	movs	r7, #2
 80013a6:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a8:	f7ff fdb4 	bl	8000f14 <HAL_GetTick>
 80013ac:	4680      	mov	r8, r0
 80013ae:	fa97 f3a7 	rbit	r3, r7
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013b2:	6822      	ldr	r2, [r4, #0]
 80013b4:	fa97 f3a7 	rbit	r3, r7
 80013b8:	fab3 f383 	clz	r3, r3
 80013bc:	f003 031f 	and.w	r3, r3, #31
 80013c0:	fa06 f303 	lsl.w	r3, r6, r3
 80013c4:	4213      	tst	r3, r2
 80013c6:	d006      	beq.n	80013d6 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c8:	f7ff fda4 	bl	8000f14 <HAL_GetTick>
 80013cc:	ebc8 0000 	rsb	r0, r8, r0
 80013d0:	2802      	cmp	r0, #2
 80013d2:	d9ec      	bls.n	80013ae <HAL_RCC_OscConfig+0x1de>
 80013d4:	e760      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013d6:	682b      	ldr	r3, [r5, #0]
 80013d8:	071c      	lsls	r4, r3, #28
 80013da:	d403      	bmi.n	80013e4 <HAL_RCC_OscConfig+0x214>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013dc:	682b      	ldr	r3, [r5, #0]
 80013de:	0758      	lsls	r0, r3, #29
 80013e0:	d44c      	bmi.n	800147c <HAL_RCC_OscConfig+0x2ac>
 80013e2:	e0e4      	b.n	80015ae <HAL_RCC_OscConfig+0x3de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013e4:	69a9      	ldr	r1, [r5, #24]
 80013e6:	4e3a      	ldr	r6, [pc, #232]	; (80014d0 <HAL_RCC_OscConfig+0x300>)
 80013e8:	2401      	movs	r4, #1
 80013ea:	b319      	cbz	r1, 8001434 <HAL_RCC_OscConfig+0x264>
 80013ec:	fa94 f2a4 	rbit	r2, r4
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f0:	4b38      	ldr	r3, [pc, #224]	; (80014d4 <HAL_RCC_OscConfig+0x304>)
 80013f2:	fab2 f282 	clz	r2, r2
 80013f6:	4413      	add	r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	2702      	movs	r7, #2
 80013fc:	601c      	str	r4, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013fe:	f7ff fd89 	bl	8000f14 <HAL_GetTick>
 8001402:	4680      	mov	r8, r0
 8001404:	fa97 f3a7 	rbit	r3, r7
 8001408:	fa97 f3a7 	rbit	r3, r7
 800140c:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001410:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001412:	fa97 f3a7 	rbit	r3, r7
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	f003 031f 	and.w	r3, r3, #31
 800141e:	fa04 f303 	lsl.w	r3, r4, r3
 8001422:	4213      	tst	r3, r2
 8001424:	d1da      	bne.n	80013dc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001426:	f7ff fd75 	bl	8000f14 <HAL_GetTick>
 800142a:	ebc8 0000 	rsb	r0, r8, r0
 800142e:	2802      	cmp	r0, #2
 8001430:	d9e8      	bls.n	8001404 <HAL_RCC_OscConfig+0x234>
 8001432:	e731      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
 8001434:	fa94 f2a4 	rbit	r2, r4
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001438:	4b26      	ldr	r3, [pc, #152]	; (80014d4 <HAL_RCC_OscConfig+0x304>)
 800143a:	fab2 f282 	clz	r2, r2
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	2702      	movs	r7, #2
 8001444:	6019      	str	r1, [r3, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001446:	f7ff fd65 	bl	8000f14 <HAL_GetTick>
 800144a:	4680      	mov	r8, r0
 800144c:	fa97 f3a7 	rbit	r3, r7
 8001450:	fa97 f3a7 	rbit	r3, r7
 8001454:	fa97 f3a7 	rbit	r3, r7
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001458:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800145a:	fa97 f3a7 	rbit	r3, r7
 800145e:	fab3 f383 	clz	r3, r3
 8001462:	f003 031f 	and.w	r3, r3, #31
 8001466:	fa04 f303 	lsl.w	r3, r4, r3
 800146a:	4213      	tst	r3, r2
 800146c:	d0b6      	beq.n	80013dc <HAL_RCC_OscConfig+0x20c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff fd51 	bl	8000f14 <HAL_GetTick>
 8001472:	ebc8 0000 	rsb	r0, r8, r0
 8001476:	2802      	cmp	r0, #2
 8001478:	d9e8      	bls.n	800144c <HAL_RCC_OscConfig+0x27c>
 800147a:	e70d      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800147c:	4c14      	ldr	r4, [pc, #80]	; (80014d0 <HAL_RCC_OscConfig+0x300>)
 800147e:	69e3      	ldr	r3, [r4, #28]
 8001480:	00d9      	lsls	r1, r3, #3
 8001482:	d40a      	bmi.n	800149a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001484:	69e3      	ldr	r3, [r4, #28]
 8001486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148a:	61e3      	str	r3, [r4, #28]
 800148c:	69e3      	ldr	r3, [r4, #28]
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001496:	2601      	movs	r6, #1
 8001498:	e000      	b.n	800149c <HAL_RCC_OscConfig+0x2cc>
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
  {
    FlagStatus       pwrclkchanged = RESET;
 800149a:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149c:	4f0e      	ldr	r7, [pc, #56]	; (80014d8 <HAL_RCC_OscConfig+0x308>)
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	05da      	lsls	r2, r3, #23
 80014a2:	d503      	bpl.n	80014ac <HAL_RCC_OscConfig+0x2dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014a4:	68eb      	ldr	r3, [r5, #12]
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d118      	bne.n	80014dc <HAL_RCC_OscConfig+0x30c>
 80014aa:	e02e      	b.n	800150a <HAL_RCC_OscConfig+0x33a>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b2:	603b      	str	r3, [r7, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b4:	f7ff fd2e 	bl	8000f14 <HAL_GetTick>
 80014b8:	4680      	mov	r8, r0

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	05db      	lsls	r3, r3, #23
 80014be:	d4f1      	bmi.n	80014a4 <HAL_RCC_OscConfig+0x2d4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014c0:	f7ff fd28 	bl	8000f14 <HAL_GetTick>
 80014c4:	ebc8 0000 	rsb	r0, r8, r0
 80014c8:	2864      	cmp	r0, #100	; 0x64
 80014ca:	d9f6      	bls.n	80014ba <HAL_RCC_OscConfig+0x2ea>
 80014cc:	e6e4      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
 80014ce:	bf00      	nop
 80014d0:	40021000 	.word	0x40021000
 80014d4:	10908120 	.word	0x10908120
 80014d8:	40007000 	.word	0x40007000
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014dc:	b97b      	cbnz	r3, 80014fe <HAL_RCC_OscConfig+0x32e>
 80014de:	6a23      	ldr	r3, [r4, #32]
 80014e0:	f023 0301 	bic.w	r3, r3, #1
 80014e4:	6223      	str	r3, [r4, #32]
 80014e6:	6a23      	ldr	r3, [r4, #32]
 80014e8:	f023 0304 	bic.w	r3, r3, #4
 80014ec:	6223      	str	r3, [r4, #32]
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fd11 	bl	8000f14 <HAL_GetTick>
 80014f2:	2702      	movs	r7, #2
 80014f4:	4682      	mov	sl, r0
 80014f6:	46b9      	mov	r9, r7
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f8:	f04f 0801 	mov.w	r8, #1
 80014fc:	e03d      	b.n	800157a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fe:	2b05      	cmp	r3, #5
 8001500:	6a23      	ldr	r3, [r4, #32]
 8001502:	d106      	bne.n	8001512 <HAL_RCC_OscConfig+0x342>
 8001504:	f043 0304 	orr.w	r3, r3, #4
 8001508:	6223      	str	r3, [r4, #32]
 800150a:	6a23      	ldr	r3, [r4, #32]
 800150c:	f043 0301 	orr.w	r3, r3, #1
 8001510:	e005      	b.n	800151e <HAL_RCC_OscConfig+0x34e>
 8001512:	f023 0301 	bic.w	r3, r3, #1
 8001516:	6223      	str	r3, [r4, #32]
 8001518:	6a23      	ldr	r3, [r4, #32]
 800151a:	f023 0304 	bic.w	r3, r3, #4
 800151e:	6223      	str	r3, [r4, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001520:	f7ff fcf8 	bl	8000f14 <HAL_GetTick>
 8001524:	2702      	movs	r7, #2
 8001526:	4682      	mov	sl, r0
 8001528:	46b9      	mov	r9, r7
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800152a:	f04f 0801 	mov.w	r8, #1
 800152e:	fa97 f3a7 	rbit	r3, r7
 8001532:	fa97 f3a7 	rbit	r3, r7
 8001536:	b10b      	cbz	r3, 800153c <HAL_RCC_OscConfig+0x36c>
 8001538:	6a22      	ldr	r2, [r4, #32]
 800153a:	e002      	b.n	8001542 <HAL_RCC_OscConfig+0x372>
 800153c:	fa97 f3a7 	rbit	r3, r7
 8001540:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001542:	fa99 f3a9 	rbit	r3, r9
 8001546:	fab3 f383 	clz	r3, r3
 800154a:	f003 031f 	and.w	r3, r3, #31
 800154e:	fa08 f303 	lsl.w	r3, r8, r3
 8001552:	4213      	tst	r3, r2
 8001554:	d121      	bne.n	800159a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001556:	f7ff fcdd 	bl	8000f14 <HAL_GetTick>
 800155a:	f241 3388 	movw	r3, #5000	; 0x1388
 800155e:	ebca 0000 	rsb	r0, sl, r0
 8001562:	4298      	cmp	r0, r3
 8001564:	d9e3      	bls.n	800152e <HAL_RCC_OscConfig+0x35e>
 8001566:	e697      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001568:	f7ff fcd4 	bl	8000f14 <HAL_GetTick>
 800156c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001570:	ebca 0000 	rsb	r0, sl, r0
 8001574:	4298      	cmp	r0, r3
 8001576:	f63f ae8f 	bhi.w	8001298 <HAL_RCC_OscConfig+0xc8>
 800157a:	fa97 f3a7 	rbit	r3, r7
 800157e:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001582:	b183      	cbz	r3, 80015a6 <HAL_RCC_OscConfig+0x3d6>
 8001584:	6a22      	ldr	r2, [r4, #32]
 8001586:	fa99 f3a9 	rbit	r3, r9
 800158a:	fab3 f383 	clz	r3, r3
 800158e:	f003 031f 	and.w	r3, r3, #31
 8001592:	fa08 f303 	lsl.w	r3, r8, r3
 8001596:	4213      	tst	r3, r2
 8001598:	d1e6      	bne.n	8001568 <HAL_RCC_OscConfig+0x398>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800159a:	b146      	cbz	r6, 80015ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800159c:	69e3      	ldr	r3, [r4, #28]
 800159e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015a2:	61e3      	str	r3, [r4, #28]
 80015a4:	e003      	b.n	80015ae <HAL_RCC_OscConfig+0x3de>
 80015a6:	fa97 f3a7 	rbit	r3, r7
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80015ac:	e7eb      	b.n	8001586 <HAL_RCC_OscConfig+0x3b6>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	69ea      	ldr	r2, [r5, #28]
 80015b0:	b90a      	cbnz	r2, 80015b6 <HAL_RCC_OscConfig+0x3e6>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80015b2:	2000      	movs	r0, #0
 80015b4:	e084      	b.n	80016c0 <HAL_RCC_OscConfig+0x4f0>
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015b6:	4c44      	ldr	r4, [pc, #272]	; (80016c8 <HAL_RCC_OscConfig+0x4f8>)
 80015b8:	6863      	ldr	r3, [r4, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	f43f ae31 	beq.w	8001226 <HAL_RCC_OscConfig+0x56>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c4:	2a02      	cmp	r2, #2
 80015c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80015ca:	d154      	bne.n	8001676 <HAL_RCC_OscConfig+0x4a6>
 80015cc:	fa93 f3a3 	rbit	r3, r3
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	fab3 f383 	clz	r3, r3
 80015d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80015d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e2:	f7ff fc97 	bl	8000f14 <HAL_GetTick>
 80015e6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80015ea:	4681      	mov	r9, r0
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015ec:	f04f 0801 	mov.w	r8, #1
 80015f0:	fa97 f3a7 	rbit	r3, r7
 80015f4:	4934      	ldr	r1, [pc, #208]	; (80016c8 <HAL_RCC_OscConfig+0x4f8>)
 80015f6:	6822      	ldr	r2, [r4, #0]
 80015f8:	fa97 f3a7 	rbit	r3, r7
 80015fc:	fab3 f383 	clz	r3, r3
 8001600:	f003 031f 	and.w	r3, r3, #31
 8001604:	fa08 f303 	lsl.w	r3, r8, r3
 8001608:	4213      	tst	r3, r2
 800160a:	f04f 0601 	mov.w	r6, #1
 800160e:	d006      	beq.n	800161e <HAL_RCC_OscConfig+0x44e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001610:	f7ff fc80 	bl	8000f14 <HAL_GetTick>
 8001614:	ebc9 0000 	rsb	r0, r9, r0
 8001618:	2802      	cmp	r0, #2
 800161a:	d9e9      	bls.n	80015f0 <HAL_RCC_OscConfig+0x420>
 800161c:	e63c      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161e:	684b      	ldr	r3, [r1, #4]
 8001620:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8001622:	6a2a      	ldr	r2, [r5, #32]
 8001624:	f423 1374 	bic.w	r3, r3, #3997696	; 0x3d0000
 8001628:	4302      	orrs	r2, r0
 800162a:	4313      	orrs	r3, r2
 800162c:	604b      	str	r3, [r1, #4]
 800162e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001632:	fa93 f3a3 	rbit	r3, r3
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001636:	fab3 f383 	clz	r3, r3
 800163a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800163e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001648:	601e      	str	r6, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164a:	f7ff fc63 	bl	8000f14 <HAL_GetTick>
 800164e:	4607      	mov	r7, r0
 8001650:	fa95 f3a5 	rbit	r3, r5
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001654:	6822      	ldr	r2, [r4, #0]
 8001656:	fa95 f3a5 	rbit	r3, r5
 800165a:	fab3 f383 	clz	r3, r3
 800165e:	f003 031f 	and.w	r3, r3, #31
 8001662:	fa06 f303 	lsl.w	r3, r6, r3
 8001666:	4213      	tst	r3, r2
 8001668:	d1a3      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3e2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800166a:	f7ff fc53 	bl	8000f14 <HAL_GetTick>
 800166e:	1bc0      	subs	r0, r0, r7
 8001670:	2802      	cmp	r0, #2
 8001672:	d9ed      	bls.n	8001650 <HAL_RCC_OscConfig+0x480>
 8001674:	e610      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
 8001676:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	fab3 f383 	clz	r3, r3
 800167e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001682:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001686:	009b      	lsls	r3, r3, #2
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800168c:	f7ff fc42 	bl	8000f14 <HAL_GetTick>
 8001690:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001694:	4607      	mov	r7, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001696:	2601      	movs	r6, #1
 8001698:	fa95 f3a5 	rbit	r3, r5
 800169c:	6822      	ldr	r2, [r4, #0]
 800169e:	fa95 f3a5 	rbit	r3, r5
 80016a2:	fab3 f383 	clz	r3, r3
 80016a6:	f003 031f 	and.w	r3, r3, #31
 80016aa:	fa06 f303 	lsl.w	r3, r6, r3
 80016ae:	4213      	tst	r3, r2
 80016b0:	f43f af7f 	beq.w	80015b2 <HAL_RCC_OscConfig+0x3e2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016b4:	f7ff fc2e 	bl	8000f14 <HAL_GetTick>
 80016b8:	1bc0      	subs	r0, r0, r7
 80016ba:	2802      	cmp	r0, #2
 80016bc:	d9ec      	bls.n	8001698 <HAL_RCC_OscConfig+0x4c8>
 80016be:	e5eb      	b.n	8001298 <HAL_RCC_OscConfig+0xc8>
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80016c0:	b002      	add	sp, #8
 80016c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016c6:	bf00      	nop
 80016c8:	40021000 	.word	0x40021000

080016cc <HAL_RCC_GetSysClockFreq>:
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80016cc:	4913      	ldr	r1, [pc, #76]	; (800171c <HAL_RCC_GetSysClockFreq+0x50>)
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016ce:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80016d0:	684c      	ldr	r4, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016d2:	f004 030c 	and.w	r3, r4, #12
 80016d6:	2b08      	cmp	r3, #8
 80016d8:	d11e      	bne.n	8001718 <HAL_RCC_GetSysClockFreq+0x4c>
 80016da:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80016de:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80016e2:	f404 1270 	and.w	r2, r4, #3932160	; 0x3c0000
 80016e6:	fab3 f383 	clz	r3, r3
 80016ea:	fa22 f303 	lsr.w	r3, r2, r3
 80016ee:	4a0c      	ldr	r2, [pc, #48]	; (8001720 <HAL_RCC_GetSysClockFreq+0x54>)
 80016f0:	5cd3      	ldrb	r3, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80016f2:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 80016f4:	210f      	movs	r1, #15
 80016f6:	fa91 f1a1 	rbit	r1, r1
 80016fa:	fab1 f181 	clz	r1, r1
 80016fe:	f002 020f 	and.w	r2, r2, #15
 8001702:	40ca      	lsrs	r2, r1
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <HAL_RCC_GetSysClockFreq+0x58>)
 8001706:	5c88      	ldrb	r0, [r1, r2]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001708:	03e2      	lsls	r2, r4, #15
        pllclk = (HSE_VALUE / prediv) * pllmul;
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800170a:	bf52      	itee	pl
 800170c:	4806      	ldrpl	r0, [pc, #24]	; (8001728 <HAL_RCC_GetSysClockFreq+0x5c>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800170e:	4a07      	ldrmi	r2, [pc, #28]	; (800172c <HAL_RCC_GetSysClockFreq+0x60>)
 8001710:	fbb2 f0f0 	udivmi	r0, r2, r0
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001714:	4358      	muls	r0, r3
 8001716:	bd10      	pop	{r4, pc}
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800171a:	bd10      	pop	{r4, pc}
 800171c:	40021000 	.word	0x40021000
 8001720:	0800718a 	.word	0x0800718a
 8001724:	0800717a 	.word	0x0800717a
 8001728:	003d0900 	.word	0x003d0900
 800172c:	007a1200 	.word	0x007a1200

08001730 <HAL_RCC_ClockConfig>:
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001730:	4a5a      	ldr	r2, [pc, #360]	; (800189c <HAL_RCC_ClockConfig+0x16c>)
 8001732:	6813      	ldr	r3, [r2, #0]
 8001734:	f003 0307 	and.w	r3, r3, #7
 8001738:	428b      	cmp	r3, r1
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800173a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800173e:	4606      	mov	r6, r0
 8001740:	460d      	mov	r5, r1
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8001742:	d30a      	bcc.n	800175a <HAL_RCC_ClockConfig+0x2a>
      return HAL_ERROR;
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001744:	6831      	ldr	r1, [r6, #0]
 8001746:	0788      	lsls	r0, r1, #30
 8001748:	d514      	bpl.n	8001774 <HAL_RCC_ClockConfig+0x44>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800174a:	4855      	ldr	r0, [pc, #340]	; (80018a0 <HAL_RCC_ClockConfig+0x170>)
 800174c:	6843      	ldr	r3, [r0, #4]
 800174e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001752:	68b3      	ldr	r3, [r6, #8]
 8001754:	4313      	orrs	r3, r2
 8001756:	6043      	str	r3, [r0, #4]
 8001758:	e00c      	b.n	8001774 <HAL_RCC_ClockConfig+0x44>

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800175a:	6813      	ldr	r3, [r2, #0]
 800175c:	f023 0307 	bic.w	r3, r3, #7
 8001760:	430b      	orrs	r3, r1
 8001762:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001764:	6813      	ldr	r3, [r2, #0]
 8001766:	f003 0307 	and.w	r3, r3, #7
 800176a:	4299      	cmp	r1, r3
 800176c:	d0ea      	beq.n	8001744 <HAL_RCC_ClockConfig+0x14>
    {
      return HAL_ERROR;
 800176e:	2001      	movs	r0, #1
 8001770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001774:	07ca      	lsls	r2, r1, #31
 8001776:	d406      	bmi.n	8001786 <HAL_RCC_ClockConfig+0x56>
        }
      }
    }      
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8001778:	4a48      	ldr	r2, [pc, #288]	; (800189c <HAL_RCC_ClockConfig+0x16c>)
 800177a:	6813      	ldr	r3, [r2, #0]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	429d      	cmp	r5, r3
 8001782:	d357      	bcc.n	8001834 <HAL_RCC_ClockConfig+0x104>
 8001784:	e060      	b.n	8001848 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001786:	6872      	ldr	r2, [r6, #4]
 8001788:	4c45      	ldr	r4, [pc, #276]	; (80018a0 <HAL_RCC_ClockConfig+0x170>)
 800178a:	2a01      	cmp	r2, #1
 800178c:	d10e      	bne.n	80017ac <HAL_RCC_ClockConfig+0x7c>
 800178e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001792:	fa93 f1a3 	rbit	r1, r3
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001796:	6821      	ldr	r1, [r4, #0]
 8001798:	fa93 f3a3 	rbit	r3, r3
 800179c:	fab3 f383 	clz	r3, r3
 80017a0:	f003 031f 	and.w	r3, r3, #31
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	420b      	tst	r3, r1
 80017aa:	e011      	b.n	80017d0 <HAL_RCC_ClockConfig+0xa0>
      {
        return HAL_ERROR;
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017ac:	2a02      	cmp	r2, #2
 80017ae:	bf0c      	ite	eq
 80017b0:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80017b4:	2302      	movne	r3, #2
 80017b6:	fa93 f1a3 	rbit	r1, r3
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017ba:	6820      	ldr	r0, [r4, #0]
 80017bc:	fa93 f3a3 	rbit	r3, r3
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	f003 031f 	and.w	r3, r3, #31
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	4203      	tst	r3, r0
 80017d0:	d0cd      	beq.n	800176e <HAL_RCC_ClockConfig+0x3e>
      {
        return HAL_ERROR;
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017d2:	6863      	ldr	r3, [r4, #4]
 80017d4:	f023 0303 	bic.w	r3, r3, #3
 80017d8:	431a      	orrs	r2, r3
 80017da:	6062      	str	r2, [r4, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017dc:	f7ff fb9a 	bl	8000f14 <HAL_GetTick>
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017e0:	6873      	ldr	r3, [r6, #4]
 80017e2:	2b01      	cmp	r3, #1
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017e4:	4607      	mov	r7, r0
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017e6:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);

    /* Get Start Tick */
    tickstart = HAL_GetTick();
    
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ea:	d10c      	bne.n	8001806 <HAL_RCC_ClockConfig+0xd6>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80017ec:	6863      	ldr	r3, [r4, #4]
 80017ee:	f003 030c 	and.w	r3, r3, #12
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	d0c0      	beq.n	8001778 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017f6:	f7ff fb8d 	bl	8000f14 <HAL_GetTick>
 80017fa:	1bc0      	subs	r0, r0, r7
 80017fc:	4540      	cmp	r0, r8
 80017fe:	d9f5      	bls.n	80017ec <HAL_RCC_ClockConfig+0xbc>
        {
          return HAL_TIMEOUT;
 8001800:	2003      	movs	r0, #3
 8001802:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001806:	2b02      	cmp	r3, #2
 8001808:	d10f      	bne.n	800182a <HAL_RCC_ClockConfig+0xfa>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800180a:	6863      	ldr	r3, [r4, #4]
 800180c:	f003 030c 	and.w	r3, r3, #12
 8001810:	2b08      	cmp	r3, #8
 8001812:	d0b1      	beq.n	8001778 <HAL_RCC_ClockConfig+0x48>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001814:	f7ff fb7e 	bl	8000f14 <HAL_GetTick>
 8001818:	1bc0      	subs	r0, r0, r7
 800181a:	4540      	cmp	r0, r8
 800181c:	d9f5      	bls.n	800180a <HAL_RCC_ClockConfig+0xda>
 800181e:	e7ef      	b.n	8001800 <HAL_RCC_ClockConfig+0xd0>
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001820:	f7ff fb78 	bl	8000f14 <HAL_GetTick>
 8001824:	1bc0      	subs	r0, r0, r7
 8001826:	4540      	cmp	r0, r8
 8001828:	d8ea      	bhi.n	8001800 <HAL_RCC_ClockConfig+0xd0>
        }
      }
    }
    else
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800182a:	6863      	ldr	r3, [r4, #4]
 800182c:	f013 0f0c 	tst.w	r3, #12
 8001830:	d1f6      	bne.n	8001820 <HAL_RCC_ClockConfig+0xf0>
 8001832:	e7a1      	b.n	8001778 <HAL_RCC_ClockConfig+0x48>
  }    
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001834:	6813      	ldr	r3, [r2, #0]
 8001836:	f023 0307 	bic.w	r3, r3, #7
 800183a:	432b      	orrs	r3, r5
 800183c:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800183e:	6813      	ldr	r3, [r2, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	429d      	cmp	r5, r3
 8001846:	d192      	bne.n	800176e <HAL_RCC_ClockConfig+0x3e>
      return HAL_ERROR;
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	6831      	ldr	r1, [r6, #0]
 800184a:	4c15      	ldr	r4, [pc, #84]	; (80018a0 <HAL_RCC_ClockConfig+0x170>)
 800184c:	f011 0f04 	tst.w	r1, #4
 8001850:	d005      	beq.n	800185e <HAL_RCC_ClockConfig+0x12e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001852:	6863      	ldr	r3, [r4, #4]
 8001854:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001858:	68f3      	ldr	r3, [r6, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	6063      	str	r3, [r4, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185e:	070b      	lsls	r3, r1, #28
 8001860:	d506      	bpl.n	8001870 <HAL_RCC_ClockConfig+0x140>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001862:	6863      	ldr	r3, [r4, #4]
 8001864:	6932      	ldr	r2, [r6, #16]
 8001866:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800186a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800186e:	6063      	str	r3, [r4, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001870:	f7ff ff2c 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 8001874:	6863      	ldr	r3, [r4, #4]
 8001876:	22f0      	movs	r2, #240	; 0xf0
 8001878:	fa92 f2a2 	rbit	r2, r2
 800187c:	fab2 f282 	clz	r2, r2
 8001880:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001884:	40d3      	lsrs	r3, r2
 8001886:	4a07      	ldr	r2, [pc, #28]	; (80018a4 <HAL_RCC_ClockConfig+0x174>)
 8001888:	5cd3      	ldrb	r3, [r2, r3]
 800188a:	40d8      	lsrs	r0, r3
 800188c:	4b06      	ldr	r3, [pc, #24]	; (80018a8 <HAL_RCC_ClockConfig+0x178>)
 800188e:	6018      	str	r0, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001890:	2000      	movs	r0, #0
 8001892:	f7ff fb11 	bl	8000eb8 <HAL_InitTick>
  
  return HAL_OK;
 8001896:	2000      	movs	r0, #0
}
 8001898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800189c:	40022000 	.word	0x40022000
 80018a0:	40021000 	.word	0x40021000
 80018a4:	08007261 	.word	0x08007261
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 80018ac:	4b01      	ldr	r3, [pc, #4]	; (80018b4 <HAL_RCC_GetHCLKFreq+0x8>)
 80018ae:	6818      	ldr	r0, [r3, #0]
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80018b8:	4b08      	ldr	r3, [pc, #32]	; (80018dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	fa92 f2a2 	rbit	r2, r2
 80018c4:	fab2 f282 	clz	r2, r2
 80018c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80018cc:	40d3      	lsrs	r3, r2
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80018d0:	5cd3      	ldrb	r3, [r2, r3]
 80018d2:	4a04      	ldr	r2, [pc, #16]	; (80018e4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 80018d4:	6810      	ldr	r0, [r2, #0]
}    
 80018d6:	40d8      	lsrs	r0, r3
 80018d8:	4770      	bx	lr
 80018da:	bf00      	nop
 80018dc:	40021000 	.word	0x40021000
 80018e0:	08007271 	.word	0x08007271
 80018e4:	20000008 	.word	0x20000008

080018e8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80018e8:	4b08      	ldr	r3, [pc, #32]	; (800190c <HAL_RCC_GetPCLK2Freq+0x24>)
 80018ea:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	fa92 f2a2 	rbit	r2, r2
 80018f4:	fab2 f282 	clz	r2, r2
 80018f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80018fc:	40d3      	lsrs	r3, r2
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001900:	5cd3      	ldrb	r3, [r2, r3]
 8001902:	4a04      	ldr	r2, [pc, #16]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001904:	6810      	ldr	r0, [r2, #0]
} 
 8001906:	40d8      	lsrs	r0, r3
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	08007271 	.word	0x08007271
 8001914:	20000008 	.word	0x20000008

08001918 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001918:	6803      	ldr	r3, [r0, #0]
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800191a:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800191e:	03dd      	lsls	r5, r3, #15
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001920:	4604      	mov	r4, r0
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001922:	d57c      	bpl.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001924:	4d7b      	ldr	r5, [pc, #492]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001926:	69eb      	ldr	r3, [r5, #28]
 8001928:	00d8      	lsls	r0, r3, #3
 800192a:	d40a      	bmi.n	8001942 <HAL_RCCEx_PeriphCLKConfig+0x2a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800192c:	69eb      	ldr	r3, [r5, #28]
 800192e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001932:	61eb      	str	r3, [r5, #28]
 8001934:	69eb      	ldr	r3, [r5, #28]
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800193e:	2601      	movs	r6, #1
 8001940:	e000      	b.n	8001944 <HAL_RCCEx_PeriphCLKConfig+0x2c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8001942:	2600      	movs	r6, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001944:	4f74      	ldr	r7, [pc, #464]	; (8001b18 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	05d9      	lsls	r1, r3, #23
 800194a:	d505      	bpl.n	8001958 <HAL_RCCEx_PeriphCLKConfig+0x40>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800194c:	6a2b      	ldr	r3, [r5, #32]
 800194e:	4971      	ldr	r1, [pc, #452]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001950:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001954:	d112      	bne.n	800197c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001956:	e016      	b.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800195e:	603b      	str	r3, [r7, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001960:	f7ff fad8 	bl	8000f14 <HAL_GetTick>
 8001964:	4680      	mov	r8, r0
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	05da      	lsls	r2, r3, #23
 800196a:	d4ef      	bmi.n	800194c <HAL_RCCEx_PeriphCLKConfig+0x34>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800196c:	f7ff fad2 	bl	8000f14 <HAL_GetTick>
 8001970:	ebc8 0000 	rsb	r0, r8, r0
 8001974:	2864      	cmp	r0, #100	; 0x64
 8001976:	d9f6      	bls.n	8001966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
        {
          return HAL_TIMEOUT;
 8001978:	2003      	movs	r0, #3
 800197a:	e0c8      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800197c:	6862      	ldr	r2, [r4, #4]
 800197e:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001982:	4293      	cmp	r3, r2
 8001984:	d10d      	bne.n	80019a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001986:	6a2b      	ldr	r3, [r5, #32]
 8001988:	4962      	ldr	r1, [pc, #392]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800198a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800198e:	6863      	ldr	r3, [r4, #4]
 8001990:	4313      	orrs	r3, r2
 8001992:	622b      	str	r3, [r5, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001994:	2e00      	cmp	r6, #0
 8001996:	d042      	beq.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001998:	69cb      	ldr	r3, [r1, #28]
 800199a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800199e:	61cb      	str	r3, [r1, #28]
 80019a0:	e03d      	b.n	8001a1e <HAL_RCCEx_PeriphCLKConfig+0x106>
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80019a2:	6a08      	ldr	r0, [r1, #32]
 80019a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80019a8:	f420 7e40 	bic.w	lr, r0, #768	; 0x300
 80019ac:	fa93 f7a3 	rbit	r7, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80019b0:	4a5a      	ldr	r2, [pc, #360]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80019b2:	fab7 f787 	clz	r7, r7
 80019b6:	443a      	add	r2, r7
 80019b8:	0092      	lsls	r2, r2, #2
 80019ba:	2701      	movs	r7, #1
 80019bc:	6017      	str	r7, [r2, #0]
 80019be:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80019c2:	4a56      	ldr	r2, [pc, #344]	; (8001b1c <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80019c4:	fab3 f383 	clz	r3, r3
 80019c8:	441a      	add	r2, r3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	2300      	movs	r3, #0
 80019ce:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019d0:	07c3      	lsls	r3, r0, #31
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
      __HAL_RCC_BACKUPRESET_RELEASE();
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80019d2:	f8c1 e020 	str.w	lr, [r1, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80019d6:	d5d6      	bpl.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fa9c 	bl	8000f14 <HAL_GetTick>
 80019dc:	f04f 0802 	mov.w	r8, #2
 80019e0:	4682      	mov	sl, r0
 80019e2:	46c1      	mov	r9, r8
 80019e4:	fa98 f3a8 	rbit	r3, r8
 80019e8:	fa98 f3a8 	rbit	r3, r8
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ec:	b10b      	cbz	r3, 80019f2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80019ee:	6a2a      	ldr	r2, [r5, #32]
 80019f0:	e002      	b.n	80019f8 <HAL_RCCEx_PeriphCLKConfig+0xe0>
 80019f2:	fa98 f3a8 	rbit	r3, r8
 80019f6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80019f8:	fa99 f3a9 	rbit	r3, r9
 80019fc:	fab3 f383 	clz	r3, r3
 8001a00:	f003 031f 	and.w	r3, r3, #31
 8001a04:	fa07 f303 	lsl.w	r3, r7, r3
 8001a08:	4213      	tst	r3, r2
 8001a0a:	d1bc      	bne.n	8001986 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a0c:	f7ff fa82 	bl	8000f14 <HAL_GetTick>
 8001a10:	f241 3388 	movw	r3, #5000	; 0x1388
 8001a14:	ebca 0000 	rsb	r0, sl, r0
 8001a18:	4298      	cmp	r0, r3
 8001a1a:	d9e3      	bls.n	80019e4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001a1c:	e7ac      	b.n	8001978 <HAL_RCCEx_PeriphCLKConfig+0x60>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	07c7      	lsls	r7, r0, #31
 8001a22:	d506      	bpl.n	8001a32 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001a24:	493b      	ldr	r1, [pc, #236]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a26:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a28:	f023 0203 	bic.w	r2, r3, #3
 8001a2c:	68a3      	ldr	r3, [r4, #8]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001a32:	0786      	lsls	r6, r0, #30
 8001a34:	d506      	bpl.n	8001a44 <HAL_RCCEx_PeriphCLKConfig+0x12c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001a36:	4937      	ldr	r1, [pc, #220]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a38:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a3a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a3e:	68e3      	ldr	r3, [r4, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001a44:	0745      	lsls	r5, r0, #29
 8001a46:	d506      	bpl.n	8001a56 <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001a48:	4932      	ldr	r1, [pc, #200]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a4a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a4c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001a50:	6923      	ldr	r3, [r4, #16]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001a56:	0681      	lsls	r1, r0, #26
 8001a58:	d506      	bpl.n	8001a68 <HAL_RCCEx_PeriphCLKConfig+0x150>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001a5a:	492e      	ldr	r1, [pc, #184]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a5c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a5e:	f023 0210 	bic.w	r2, r3, #16
 8001a62:	69e3      	ldr	r3, [r4, #28]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001a68:	0382      	lsls	r2, r0, #14
 8001a6a:	d506      	bpl.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8001a6c:	4929      	ldr	r1, [pc, #164]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a6e:	684b      	ldr	r3, [r1, #4]
 8001a70:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a74:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a76:	4313      	orrs	r3, r2
 8001a78:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001a7a:	0643      	lsls	r3, r0, #25
 8001a7c:	d506      	bpl.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001a7e:	4925      	ldr	r1, [pc, #148]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a80:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a82:	f023 0220 	bic.w	r2, r3, #32
 8001a86:	6a23      	ldr	r3, [r4, #32]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001a8c:	0707      	lsls	r7, r0, #28
 8001a8e:	d506      	bpl.n	8001a9e <HAL_RCCEx_PeriphCLKConfig+0x186>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001a90:	4920      	ldr	r1, [pc, #128]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001a92:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001a98:	6963      	ldr	r3, [r4, #20]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001a9e:	06c6      	lsls	r6, r0, #27
 8001aa0:	d506      	bpl.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001aa2:	491c      	ldr	r1, [pc, #112]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001aa4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001aa6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001aaa:	69a3      	ldr	r3, [r4, #24]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8001ab0:	0585      	lsls	r5, r0, #22
 8001ab2:	d506      	bpl.n	8001ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ab4:	4917      	ldr	r1, [pc, #92]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ab6:	684b      	ldr	r3, [r1, #4]
 8001ab8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001abc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001ac2:	0601      	lsls	r1, r0, #24
 8001ac4:	d506      	bpl.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8001ac6:	4913      	ldr	r1, [pc, #76]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ac8:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001aca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8001ace:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001ad0:	4313      	orrs	r3, r2
 8001ad2:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8001ad4:	05c2      	lsls	r2, r0, #23
 8001ad6:	d506      	bpl.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8001ad8:	490e      	ldr	r1, [pc, #56]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001ada:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 8001adc:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8001ae0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8001ae6:	04c3      	lsls	r3, r0, #19
 8001ae8:	d506      	bpl.n	8001af8 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001aea:	490a      	ldr	r1, [pc, #40]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001aec:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001aee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001af2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001af4:	4313      	orrs	r3, r2
 8001af6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8001af8:	f410 5000 	ands.w	r0, r0, #8192	; 0x2000
 8001afc:	d007      	beq.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8001afe:	4905      	ldr	r1, [pc, #20]	; (8001b14 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001b00:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8001b02:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001b06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8001b0c:	2000      	movs	r0, #0
}
 8001b0e:	b002      	add	sp, #8
 8001b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b14:	40021000 	.word	0x40021000
 8001b18:	40007000 	.word	0x40007000
 8001b1c:	10908100 	.word	0x10908100

08001b20 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b20:	6803      	ldr	r3, [r0, #0]
 8001b22:	68da      	ldr	r2, [r3, #12]
 8001b24:	f042 0201 	orr.w	r2, r2, #1
 8001b28:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	f042 0201 	orr.w	r2, r2, #1
 8001b30:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001b32:	2000      	movs	r0, #0
 8001b34:	4770      	bx	lr

08001b36 <HAL_TIM_PWM_MspInit>:
 8001b36:	4770      	bx	lr

08001b38 <HAL_TIM_Encoder_MspInit>:
 8001b38:	4770      	bx	lr

08001b3a <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b3a:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
  
  /* Enable the encoder interface channels */
  switch (Channel)
 8001b3c:	b151      	cbz	r1, 8001b54 <HAL_TIM_Encoder_Start+0x1a>
 8001b3e:	2904      	cmp	r1, #4
 8001b40:	d010      	beq.n	8001b64 <HAL_TIM_Encoder_Start+0x2a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b42:	6a1a      	ldr	r2, [r3, #32]
 8001b44:	f022 0201 	bic.w	r2, r2, #1
 8001b48:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001b4a:	6a1a      	ldr	r2, [r3, #32]
 8001b4c:	f042 0201 	orr.w	r2, r2, #1
 8001b50:	621a      	str	r2, [r3, #32]
 8001b52:	e007      	b.n	8001b64 <HAL_TIM_Encoder_Start+0x2a>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	f022 0201 	bic.w	r2, r2, #1
 8001b5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001b5c:	6a1a      	ldr	r2, [r3, #32]
 8001b5e:	f042 0201 	orr.w	r2, r2, #1
 8001b62:	e006      	b.n	8001b72 <HAL_TIM_Encoder_Start+0x38>
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001b64:	6a1a      	ldr	r2, [r3, #32]
 8001b66:	f022 0210 	bic.w	r2, r2, #16
 8001b6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8001b6c:	6a1a      	ldr	r2, [r3, #32]
 8001b6e:	f042 0210 	orr.w	r2, r2, #16
 8001b72:	621a      	str	r2, [r3, #32]
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE); 
      break; 
    }
  }  
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
}
 8001b7c:	2000      	movs	r0, #0
 8001b7e:	4770      	bx	lr

08001b80 <HAL_TIM_PeriodElapsedCallback>:
 8001b80:	4770      	bx	lr

08001b82 <HAL_TIM_OC_DelayElapsedCallback>:
 8001b82:	4770      	bx	lr

08001b84 <HAL_TIM_IC_CaptureCallback>:
 8001b84:	4770      	bx	lr

08001b86 <HAL_TIM_PWM_PulseFinishedCallback>:
 8001b86:	4770      	bx	lr

08001b88 <HAL_TIM_TriggerCallback>:
 8001b88:	4770      	bx	lr

08001b8a <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b8a:	6803      	ldr	r3, [r0, #0]
 8001b8c:	691a      	ldr	r2, [r3, #16]
 8001b8e:	0791      	lsls	r1, r2, #30
  * @brief  This function handles TIM interrupts requests.
  * @param  htim: TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b90:	b510      	push	{r4, lr}
 8001b92:	4604      	mov	r4, r0
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b94:	d514      	bpl.n	8001bc0 <HAL_TIM_IRQHandler+0x36>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	0792      	lsls	r2, r2, #30
 8001b9a:	d511      	bpl.n	8001bc0 <HAL_TIM_IRQHandler+0x36>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001b9c:	f06f 0202 	mvn.w	r2, #2
 8001ba0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba2:	699b      	ldr	r3, [r3, #24]
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba4:	2201      	movs	r2, #1
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ba6:	079b      	lsls	r3, r3, #30
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ba8:	7702      	strb	r2, [r0, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001baa:	d002      	beq.n	8001bb2 <HAL_TIM_IRQHandler+0x28>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001bac:	f7ff ffea 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 8001bb0:	e004      	b.n	8001bbc <HAL_TIM_IRQHandler+0x32>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb2:	f7ff ffe6 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb6:	4620      	mov	r0, r4
 8001bb8:	f7ff ffe5 	bl	8001b86 <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001bc0:	6823      	ldr	r3, [r4, #0]
 8001bc2:	691a      	ldr	r2, [r3, #16]
 8001bc4:	0750      	lsls	r0, r2, #29
 8001bc6:	d516      	bpl.n	8001bf6 <HAL_TIM_IRQHandler+0x6c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	0751      	lsls	r1, r2, #29
 8001bcc:	d513      	bpl.n	8001bf6 <HAL_TIM_IRQHandler+0x6c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001bce:	f06f 0204 	mvn.w	r2, #4
 8001bd2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd4:	699b      	ldr	r3, [r3, #24]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bd6:	2202      	movs	r2, #2
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001bd8:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001bdc:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001bde:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001be0:	d002      	beq.n	8001be8 <HAL_TIM_IRQHandler+0x5e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001be2:	f7ff ffcf 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 8001be6:	e004      	b.n	8001bf2 <HAL_TIM_IRQHandler+0x68>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001be8:	f7ff ffcb 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bec:	4620      	mov	r0, r4
 8001bee:	f7ff ffca 	bl	8001b86 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001bf6:	6823      	ldr	r3, [r4, #0]
 8001bf8:	691a      	ldr	r2, [r3, #16]
 8001bfa:	0712      	lsls	r2, r2, #28
 8001bfc:	d515      	bpl.n	8001c2a <HAL_TIM_IRQHandler+0xa0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	0710      	lsls	r0, r2, #28
 8001c02:	d512      	bpl.n	8001c2a <HAL_TIM_IRQHandler+0xa0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c04:	f06f 0208 	mvn.w	r2, #8
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c0a:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c0c:	2204      	movs	r2, #4
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c0e:	0799      	lsls	r1, r3, #30
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c10:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c12:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c14:	d002      	beq.n	8001c1c <HAL_TIM_IRQHandler+0x92>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c16:	f7ff ffb5 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 8001c1a:	e004      	b.n	8001c26 <HAL_TIM_IRQHandler+0x9c>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c1c:	f7ff ffb1 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001c20:	4620      	mov	r0, r4
 8001c22:	f7ff ffb0 	bl	8001b86 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c26:	2300      	movs	r3, #0
 8001c28:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c2a:	6823      	ldr	r3, [r4, #0]
 8001c2c:	691a      	ldr	r2, [r3, #16]
 8001c2e:	06d2      	lsls	r2, r2, #27
 8001c30:	d516      	bpl.n	8001c60 <HAL_TIM_IRQHandler+0xd6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	06d0      	lsls	r0, r2, #27
 8001c36:	d513      	bpl.n	8001c60 <HAL_TIM_IRQHandler+0xd6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001c38:	f06f 0210 	mvn.w	r2, #16
 8001c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c3e:	69db      	ldr	r3, [r3, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c40:	2208      	movs	r2, #8
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c42:	f413 7f40 	tst.w	r3, #768	; 0x300
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001c46:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c48:	4620      	mov	r0, r4
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001c4a:	d002      	beq.n	8001c52 <HAL_TIM_IRQHandler+0xc8>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001c4c:	f7ff ff9a 	bl	8001b84 <HAL_TIM_IC_CaptureCallback>
 8001c50:	e004      	b.n	8001c5c <HAL_TIM_IRQHandler+0xd2>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c52:	f7ff ff96 	bl	8001b82 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c56:	4620      	mov	r0, r4
 8001c58:	f7ff ff95 	bl	8001b86 <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	691a      	ldr	r2, [r3, #16]
 8001c64:	07d1      	lsls	r1, r2, #31
 8001c66:	d508      	bpl.n	8001c7a <HAL_TIM_IRQHandler+0xf0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	07d2      	lsls	r2, r2, #31
 8001c6c:	d505      	bpl.n	8001c7a <HAL_TIM_IRQHandler+0xf0>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001c6e:	f06f 0201 	mvn.w	r2, #1
 8001c72:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001c74:	4620      	mov	r0, r4
 8001c76:	f7ff ff83 	bl	8001b80 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c7a:	6823      	ldr	r3, [r4, #0]
 8001c7c:	691a      	ldr	r2, [r3, #16]
 8001c7e:	0610      	lsls	r0, r2, #24
 8001c80:	d508      	bpl.n	8001c94 <HAL_TIM_IRQHandler+0x10a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	0611      	lsls	r1, r2, #24
 8001c86:	d505      	bpl.n	8001c94 <HAL_TIM_IRQHandler+0x10a>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c8c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001c8e:	4620      	mov	r0, r4
 8001c90:	f000 fcbf 	bl	8002612 <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c94:	6823      	ldr	r3, [r4, #0]
 8001c96:	691a      	ldr	r2, [r3, #16]
 8001c98:	0652      	lsls	r2, r2, #25
 8001c9a:	d508      	bpl.n	8001cae <HAL_TIM_IRQHandler+0x124>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001c9c:	68da      	ldr	r2, [r3, #12]
 8001c9e:	0650      	lsls	r0, r2, #25
 8001ca0:	d505      	bpl.n	8001cae <HAL_TIM_IRQHandler+0x124>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ca2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ca6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001ca8:	4620      	mov	r0, r4
 8001caa:	f7ff ff6d 	bl	8001b88 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001cae:	6823      	ldr	r3, [r4, #0]
 8001cb0:	691a      	ldr	r2, [r3, #16]
 8001cb2:	0691      	lsls	r1, r2, #26
 8001cb4:	d50a      	bpl.n	8001ccc <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	0692      	lsls	r2, r2, #26
 8001cba:	d507      	bpl.n	8001ccc <HAL_TIM_IRQHandler+0x142>
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cbc:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001cc0:	4620      	mov	r0, r4
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001cc2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
    }
  }
}
 8001cc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
    { 
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
      HAL_TIMEx_CommutationCallback(htim);
 8001cc8:	f000 bca2 	b.w	8002610 <HAL_TIMEx_CommutationCallback>
 8001ccc:	bd10      	pop	{r4, pc}
	...

08001cd0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <TIM_Base_SetConfig+0xb4>)
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
 8001cd2:	6803      	ldr	r3, [r0, #0]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd4:	4290      	cmp	r0, r2
 8001cd6:	d00e      	beq.n	8001cf6 <TIM_Base_SetConfig+0x26>
 8001cd8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001cdc:	d00b      	beq.n	8001cf6 <TIM_Base_SetConfig+0x26>
 8001cde:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001ce2:	4290      	cmp	r0, r2
 8001ce4:	d007      	beq.n	8001cf6 <TIM_Base_SetConfig+0x26>
 8001ce6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001cea:	4290      	cmp	r0, r2
 8001cec:	d003      	beq.n	8001cf6 <TIM_Base_SetConfig+0x26>
 8001cee:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001cf2:	4290      	cmp	r0, r2
 8001cf4:	d115      	bne.n	8001d22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8001cf6:	684a      	ldr	r2, [r1, #4]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cf8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001cfc:	4313      	orrs	r3, r2
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001cfe:	4a21      	ldr	r2, [pc, #132]	; (8001d84 <TIM_Base_SetConfig+0xb4>)
 8001d00:	4290      	cmp	r0, r2
 8001d02:	d019      	beq.n	8001d38 <TIM_Base_SetConfig+0x68>
 8001d04:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001d08:	d016      	beq.n	8001d38 <TIM_Base_SetConfig+0x68>
 8001d0a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001d0e:	4290      	cmp	r0, r2
 8001d10:	d012      	beq.n	8001d38 <TIM_Base_SetConfig+0x68>
 8001d12:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d16:	4290      	cmp	r0, r2
 8001d18:	d00e      	beq.n	8001d38 <TIM_Base_SetConfig+0x68>
 8001d1a:	f502 3296 	add.w	r2, r2, #76800	; 0x12c00
 8001d1e:	4290      	cmp	r0, r2
 8001d20:	d00a      	beq.n	8001d38 <TIM_Base_SetConfig+0x68>
 8001d22:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <TIM_Base_SetConfig+0xb8>)
 8001d24:	4290      	cmp	r0, r2
 8001d26:	d007      	beq.n	8001d38 <TIM_Base_SetConfig+0x68>
 8001d28:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d2c:	4290      	cmp	r0, r2
 8001d2e:	d003      	beq.n	8001d38 <TIM_Base_SetConfig+0x68>
 8001d30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001d34:	4290      	cmp	r0, r2
 8001d36:	d103      	bne.n	8001d40 <TIM_Base_SetConfig+0x70>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d38:	68ca      	ldr	r2, [r1, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d3e:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d40:	694a      	ldr	r2, [r1, #20]
 8001d42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001d46:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001d48:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d4a:	688b      	ldr	r3, [r1, #8]
 8001d4c:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001d4e:	680b      	ldr	r3, [r1, #0]
 8001d50:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001d52:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <TIM_Base_SetConfig+0xb4>)
 8001d54:	4298      	cmp	r0, r3
 8001d56:	d00f      	beq.n	8001d78 <TIM_Base_SetConfig+0xa8>
 8001d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d5c:	4298      	cmp	r0, r3
 8001d5e:	d00b      	beq.n	8001d78 <TIM_Base_SetConfig+0xa8>
 8001d60:	f503 6340 	add.w	r3, r3, #3072	; 0xc00
 8001d64:	4298      	cmp	r0, r3
 8001d66:	d007      	beq.n	8001d78 <TIM_Base_SetConfig+0xa8>
 8001d68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d6c:	4298      	cmp	r0, r3
 8001d6e:	d003      	beq.n	8001d78 <TIM_Base_SetConfig+0xa8>
 8001d70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d74:	4298      	cmp	r0, r3
 8001d76:	d101      	bne.n	8001d7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d78:	690b      	ldr	r3, [r1, #16]
 8001d7a:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	6143      	str	r3, [r0, #20]
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40012c00 	.word	0x40012c00
 8001d88:	40014000 	.word	0x40014000

08001d8c <HAL_TIM_Base_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8001d8c:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001d8e:	4604      	mov	r4, r0
 8001d90:	b1a0      	cbz	r0, 8001dbc <HAL_TIM_Base_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 8001d92:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001d96:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001d9a:	b91b      	cbnz	r3, 8001da4 <HAL_TIM_Base_Init+0x18>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d9c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001da0:	f001 fba2 	bl	80034e8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001da4:	2302      	movs	r3, #2
 8001da6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001daa:	6820      	ldr	r0, [r4, #0]
 8001dac:	1d21      	adds	r1, r4, #4
 8001dae:	f7ff ff8f 	bl	8001cd0 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001db2:	2301      	movs	r3, #1
 8001db4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  return HAL_OK;
 8001db8:	2000      	movs	r0, #0
 8001dba:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001dbe:	bd10      	pop	{r4, pc}

08001dc0 <HAL_TIM_PWM_Init>:
  *         parameters in the TIM_HandleTypeDef and create the associated handle.
  * @param  htim: TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001dc0:	b510      	push	{r4, lr}
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001dc2:	4604      	mov	r4, r0
 8001dc4:	b1a0      	cbz	r0, 8001df0 <HAL_TIM_PWM_Init+0x30>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001dc6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001dca:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001dce:	b91b      	cbnz	r3, 8001dd8 <HAL_TIM_PWM_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001dd0:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dd4:	f7ff feaf 	bl	8001b36 <HAL_TIM_PWM_MspInit>
  }

  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 
  /* Init the base time for the PWM */  
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001dde:	6820      	ldr	r0, [r4, #0]
 8001de0:	1d21      	adds	r1, r4, #4
 8001de2:	f7ff ff75 	bl	8001cd0 <TIM_Base_SetConfig>
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001de6:	2301      	movs	r3, #1
 8001de8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  return HAL_OK;
 8001dec:	2000      	movs	r0, #0
 8001dee:	bd10      	pop	{r4, pc}
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001df0:	2001      	movs	r0, #1
   
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001df2:	bd10      	pop	{r4, pc}

08001df4 <HAL_TIM_Encoder_Init>:
  * @param  htim: TIM Encoder Interface handle
  * @param  sConfig: TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef* sConfig)
{
 8001df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001df6:	460c      	mov	r4, r1
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8001df8:	4605      	mov	r5, r0
 8001dfa:	2800      	cmp	r0, #0
 8001dfc:	d043      	beq.n	8001e86 <HAL_TIM_Encoder_Init+0x92>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if(htim->State == HAL_TIM_STATE_RESET)
 8001dfe:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001e02:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e06:	b91b      	cbnz	r3, 8001e10 <HAL_TIM_Encoder_Init+0x1c>
  { 
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e08:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8001e0c:	f7ff fe94 	bl	8001b38 <HAL_TIM_Encoder_MspInit>
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e10:	4629      	mov	r1, r5
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001e12:	2302      	movs	r3, #2
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e14:	f851 0b04 	ldr.w	r0, [r1], #4
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8001e18:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  
  /* Reset the SMS bits */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001e1c:	6883      	ldr	r3, [r0, #8]
 8001e1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e22:	f023 0307 	bic.w	r3, r3, #7
 8001e26:	6083      	str	r3, [r0, #8]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
 8001e28:	f7ff ff52 	bl	8001cd0 <TIM_Base_SetConfig>
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e2c:	6828      	ldr	r0, [r5, #0]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e2e:	6823      	ldr	r3, [r4, #0]
  
  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);  
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001e30:	6887      	ldr	r7, [r0, #8]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8001e32:	6981      	ldr	r1, [r0, #24]
 8001e34:	69a2      	ldr	r2, [r4, #24]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8001e36:	6a06      	ldr	r6, [r0, #32]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8001e38:	431f      	orrs	r7, r3
 8001e3a:	f421 7340 	bic.w	r3, r1, #768	; 0x300
 8001e3e:	f023 0303 	bic.w	r3, r3, #3
 8001e42:	ea43 2202 	orr.w	r2, r3, r2, lsl #8

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e46:	68a3      	ldr	r3, [r4, #8]
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e48:	6921      	ldr	r1, [r4, #16]
  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8001e4a:	4313      	orrs	r3, r2
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e4c:	69e2      	ldr	r2, [r4, #28]
 8001e4e:	0109      	lsls	r1, r1, #4
 8001e50:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8001e54:	68e2      	ldr	r2, [r4, #12]
 8001e56:	430a      	orrs	r2, r1
 8001e58:	6a21      	ldr	r1, [r4, #32]
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e5a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e5e:	ea42 3201 	orr.w	r2, r2, r1, lsl #12
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
  
  /* Set the the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8001e62:	f023 03fc 	bic.w	r3, r3, #252	; 0xfc
 8001e66:	6961      	ldr	r1, [r4, #20]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f026 02aa 	bic.w	r2, r6, #170	; 0xaa
 8001e6e:	ea42 1201 	orr.w	r2, r2, r1, lsl #4

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e72:	6861      	ldr	r1, [r4, #4]
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8001e74:	6087      	str	r7, [r0, #8]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8001e76:	430a      	orrs	r2, r1
  
  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8001e78:	6183      	str	r3, [r0, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001e7a:	2301      	movs	r3, #1

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8001e7c:	6202      	str	r2, [r0, #32]
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8001e7e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
  
  return HAL_OK;
 8001e82:	2000      	movs	r0, #0
 8001e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  uint32_t tmpccer = 0U;
    
  /* Check the TIM handle allocation */
  if(htim == NULL)
  {
    return HAL_ERROR;
 8001e86:	2001      	movs	r0, #1
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
  
  return HAL_OK;
}
 8001e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001e8c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001e8c:	6a03      	ldr	r3, [r0, #32]
 8001e8e:	f023 0301 	bic.w	r3, r3, #1
 8001e92:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001e94:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001e96:	6842      	ldr	r2, [r0, #4]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001e98:	b570      	push	{r4, r5, r6, lr}
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001e9a:	6984      	ldr	r4, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001e9c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001e9e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8001ea2:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001ea6:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001ea8:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8001eaa:	f023 0302 	bic.w	r3, r3, #2
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001eae:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001eb0:	4d1b      	ldr	r5, [pc, #108]	; (8001f20 <TIM_OC1_SetConfig+0x94>)
 8001eb2:	42a8      	cmp	r0, r5
 8001eb4:	d00f      	beq.n	8001ed6 <TIM_OC1_SetConfig+0x4a>
 8001eb6:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001eba:	42a8      	cmp	r0, r5
 8001ebc:	d00b      	beq.n	8001ed6 <TIM_OC1_SetConfig+0x4a>
 8001ebe:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ec2:	42a8      	cmp	r0, r5
 8001ec4:	d007      	beq.n	8001ed6 <TIM_OC1_SetConfig+0x4a>
 8001ec6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001eca:	42a8      	cmp	r0, r5
 8001ecc:	d003      	beq.n	8001ed6 <TIM_OC1_SetConfig+0x4a>
 8001ece:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ed2:	42a8      	cmp	r0, r5
 8001ed4:	d11e      	bne.n	8001f14 <TIM_OC1_SetConfig+0x88>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001ed6:	68cd      	ldr	r5, [r1, #12]
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001ed8:	f023 0308 	bic.w	r3, r3, #8
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001edc:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ede:	4d10      	ldr	r5, [pc, #64]	; (8001f20 <TIM_OC1_SetConfig+0x94>)
 8001ee0:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001ee2:	f023 0304 	bic.w	r3, r3, #4
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ee6:	d00f      	beq.n	8001f08 <TIM_OC1_SetConfig+0x7c>
 8001ee8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001eec:	42a8      	cmp	r0, r5
 8001eee:	d00b      	beq.n	8001f08 <TIM_OC1_SetConfig+0x7c>
 8001ef0:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8001ef4:	42a8      	cmp	r0, r5
 8001ef6:	d007      	beq.n	8001f08 <TIM_OC1_SetConfig+0x7c>
 8001ef8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001efc:	42a8      	cmp	r0, r5
 8001efe:	d003      	beq.n	8001f08 <TIM_OC1_SetConfig+0x7c>
 8001f00:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f04:	42a8      	cmp	r0, r5
 8001f06:	d105      	bne.n	8001f14 <TIM_OC1_SetConfig+0x88>
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f08:	694e      	ldr	r6, [r1, #20]
 8001f0a:	698d      	ldr	r5, [r1, #24]
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8001f0c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001f10:	4335      	orrs	r5, r6
 8001f12:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f14:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f16:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f18:	6184      	str	r4, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001f1a:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001f1c:	6203      	str	r3, [r0, #32]
 8001f1e:	bd70      	pop	{r4, r5, r6, pc}
 8001f20:	40012c00 	.word	0x40012c00

08001f24 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001f24:	6a03      	ldr	r3, [r0, #32]
 8001f26:	f023 0310 	bic.w	r3, r3, #16
 8001f2a:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001f2c:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001f2e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001f30:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001f32:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f34:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001f36:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8001f3a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001f3e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f42:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001f44:	f023 0320 	bic.w	r3, r3, #32
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001f48:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001f4c:	4d16      	ldr	r5, [pc, #88]	; (8001fa8 <TIM_OC2_SetConfig+0x84>)
 8001f4e:	42a8      	cmp	r0, r5
 8001f50:	d003      	beq.n	8001f5a <TIM_OC2_SetConfig+0x36>
 8001f52:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f56:	42a8      	cmp	r0, r5
 8001f58:	d10d      	bne.n	8001f76 <TIM_OC2_SetConfig+0x52>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f5a:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001f60:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f64:	4d10      	ldr	r5, [pc, #64]	; (8001fa8 <TIM_OC2_SetConfig+0x84>)
 8001f66:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8001f68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    
  }

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001f6c:	d00e      	beq.n	8001f8c <TIM_OC2_SetConfig+0x68>
 8001f6e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001f72:	42a8      	cmp	r0, r5
 8001f74:	d00a      	beq.n	8001f8c <TIM_OC2_SetConfig+0x68>
 8001f76:	4d0d      	ldr	r5, [pc, #52]	; (8001fac <TIM_OC2_SetConfig+0x88>)
 8001f78:	42a8      	cmp	r0, r5
 8001f7a:	d007      	beq.n	8001f8c <TIM_OC2_SetConfig+0x68>
 8001f7c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f80:	42a8      	cmp	r0, r5
 8001f82:	d003      	beq.n	8001f8c <TIM_OC2_SetConfig+0x68>
 8001f84:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001f88:	42a8      	cmp	r0, r5
 8001f8a:	d107      	bne.n	8001f9c <TIM_OC2_SetConfig+0x78>
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f8c:	694d      	ldr	r5, [r1, #20]
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001f8e:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8001f92:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8001f96:	698d      	ldr	r5, [r1, #24]
 8001f98:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001f9c:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001f9e:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001fa0:	684a      	ldr	r2, [r1, #4]
 8001fa2:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001fa4:	6203      	str	r3, [r0, #32]
 8001fa6:	bd30      	pop	{r4, r5, pc}
 8001fa8:	40012c00 	.word	0x40012c00
 8001fac:	40014000 	.word	0x40014000

08001fb0 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8001fb0:	6a03      	ldr	r3, [r0, #32]
 8001fb2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fb6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001fb8:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001fba:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8001fbc:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001fbe:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fc0:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8001fc2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001fc6:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001fca:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fcc:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001fce:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001fd2:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8001fd6:	4d17      	ldr	r5, [pc, #92]	; (8002034 <TIM_OC3_SetConfig+0x84>)
 8001fd8:	42a8      	cmp	r0, r5
 8001fda:	d003      	beq.n	8001fe4 <TIM_OC3_SetConfig+0x34>
 8001fdc:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001fe0:	42a8      	cmp	r0, r5
 8001fe2:	d10d      	bne.n	8002000 <TIM_OC3_SetConfig+0x50>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fe4:	68cd      	ldr	r5, [r1, #12]
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
  {   
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001fe6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8001fea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001fee:	4d11      	ldr	r5, [pc, #68]	; (8002034 <TIM_OC3_SetConfig+0x84>)
 8001ff0:	42a8      	cmp	r0, r5
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8001ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001ff6:	d00e      	beq.n	8002016 <TIM_OC3_SetConfig+0x66>
 8001ff8:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8001ffc:	42a8      	cmp	r0, r5
 8001ffe:	d00a      	beq.n	8002016 <TIM_OC3_SetConfig+0x66>
 8002000:	4d0d      	ldr	r5, [pc, #52]	; (8002038 <TIM_OC3_SetConfig+0x88>)
 8002002:	42a8      	cmp	r0, r5
 8002004:	d007      	beq.n	8002016 <TIM_OC3_SetConfig+0x66>
 8002006:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800200a:	42a8      	cmp	r0, r5
 800200c:	d003      	beq.n	8002016 <TIM_OC3_SetConfig+0x66>
 800200e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002012:	42a8      	cmp	r0, r5
 8002014:	d107      	bne.n	8002026 <TIM_OC3_SetConfig+0x76>
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002016:	694d      	ldr	r5, [r1, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002018:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800201c:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002020:	698d      	ldr	r5, [r1, #24]
 8002022:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002026:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002028:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800202a:	684a      	ldr	r2, [r1, #4]
 800202c:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800202e:	6203      	str	r3, [r0, #32]
 8002030:	bd30      	pop	{r4, r5, pc}
 8002032:	bf00      	nop
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40014000 	.word	0x40014000

0800203c <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800203c:	6a03      	ldr	r3, [r0, #32]
 800203e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002042:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002044:	6a03      	ldr	r3, [r0, #32]
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002046:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8002048:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800204a:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800204c:	680d      	ldr	r5, [r1, #0]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800204e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002052:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002056:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800205a:	688d      	ldr	r5, [r1, #8]
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800205c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002060:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002064:	4d0e      	ldr	r5, [pc, #56]	; (80020a0 <TIM_OC4_SetConfig+0x64>)
 8002066:	42a8      	cmp	r0, r5
 8002068:	d00f      	beq.n	800208a <TIM_OC4_SetConfig+0x4e>
 800206a:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 800206e:	42a8      	cmp	r0, r5
 8002070:	d00b      	beq.n	800208a <TIM_OC4_SetConfig+0x4e>
 8002072:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002076:	42a8      	cmp	r0, r5
 8002078:	d007      	beq.n	800208a <TIM_OC4_SetConfig+0x4e>
 800207a:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800207e:	42a8      	cmp	r0, r5
 8002080:	d003      	beq.n	800208a <TIM_OC4_SetConfig+0x4e>
 8002082:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002086:	42a8      	cmp	r0, r5
 8002088:	d104      	bne.n	8002094 <TIM_OC4_SetConfig+0x58>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800208a:	694d      	ldr	r5, [r1, #20]
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800208c:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002090:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002094:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002096:	61c2      	str	r2, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002098:	684a      	ldr	r2, [r1, #4]
 800209a:	6402      	str	r2, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800209c:	6203      	str	r3, [r0, #32]
 800209e:	bd30      	pop	{r4, r5, pc}
 80020a0:	40012c00 	.word	0x40012c00

080020a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020a4:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 80020a6:	6884      	ldr	r4, [r0, #8]
 80020a8:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80020ac:	4321      	orrs	r1, r4
 80020ae:	430a      	orrs	r2, r1

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80020b0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020b4:	6083      	str	r3, [r0, #8]
 80020b6:	bd10      	pop	{r4, pc}

080020b8 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80020b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80020bc:	2b01      	cmp	r3, #1
  * @param  sClockSourceConfig: pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 80020be:	b570      	push	{r4, r5, r6, lr}
 80020c0:	4604      	mov	r4, r0
 80020c2:	f04f 0002 	mov.w	r0, #2
  uint32_t tmpsmcr = 0U;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80020c6:	f000 80ab 	beq.w	8002220 <HAL_TIM_ConfigClockSource+0x168>
  
  htim->State = HAL_TIM_STATE_BUSY;
 80020ca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020ce:	6820      	ldr	r0, [r4, #0]
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
  uint32_t tmpsmcr = 0U;
  
  /* Process Locked */
  __HAL_LOCK(htim);
 80020d0:	2301      	movs	r3, #1
 80020d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80020d6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020d8:	4b52      	ldr	r3, [pc, #328]	; (8002224 <HAL_TIM_ConfigClockSource+0x16c>)
 80020da:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80020dc:	6083      	str	r3, [r0, #8]
  
  switch (sClockSourceConfig->ClockSource)
 80020de:	680b      	ldr	r3, [r1, #0]
 80020e0:	2b40      	cmp	r3, #64	; 0x40
 80020e2:	d074      	beq.n	80021ce <HAL_TIM_ConfigClockSource+0x116>
 80020e4:	d818      	bhi.n	8002118 <HAL_TIM_ConfigClockSource+0x60>
 80020e6:	2b10      	cmp	r3, #16
 80020e8:	f000 8088 	beq.w	80021fc <HAL_TIM_ConfigClockSource+0x144>
 80020ec:	d808      	bhi.n	8002100 <HAL_TIM_ConfigClockSource+0x48>
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	f040 8090 	bne.w	8002214 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80020f4:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80020f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80020fa:	f043 0307 	orr.w	r3, r3, #7
 80020fe:	e088      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002100:	2b20      	cmp	r3, #32
 8002102:	f000 8081 	beq.w	8002208 <HAL_TIM_ConfigClockSource+0x150>
 8002106:	2b30      	cmp	r3, #48	; 0x30
 8002108:	f040 8084 	bne.w	8002214 <HAL_TIM_ConfigClockSource+0x15c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800210c:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800210e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002112:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8002116:	e07c      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002118:	2b70      	cmp	r3, #112	; 0x70
 800211a:	d032      	beq.n	8002182 <HAL_TIM_ConfigClockSource+0xca>
 800211c:	d81b      	bhi.n	8002156 <HAL_TIM_ConfigClockSource+0x9e>
 800211e:	2b50      	cmp	r3, #80	; 0x50
 8002120:	d03e      	beq.n	80021a0 <HAL_TIM_ConfigClockSource+0xe8>
 8002122:	2b60      	cmp	r3, #96	; 0x60
 8002124:	d176      	bne.n	8002214 <HAL_TIM_ConfigClockSource+0x15c>
      
       /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002126:	684d      	ldr	r5, [r1, #4]
 8002128:	68ce      	ldr	r6, [r1, #12]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800212a:	6a01      	ldr	r1, [r0, #32]
 800212c:	f021 0110 	bic.w	r1, r1, #16
 8002130:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002132:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8002134:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002136:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800213a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800213e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002142:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002146:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002148:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 800214a:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800214c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002150:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8002154:	e05d      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
  tmpsmcr = htim->Instance->SMCR;
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
  htim->Instance->SMCR = tmpsmcr;
  
  switch (sClockSourceConfig->ClockSource)
 8002156:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215a:	d00c      	beq.n	8002176 <HAL_TIM_ConfigClockSource+0xbe>
 800215c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002160:	d158      	bne.n	8002214 <HAL_TIM_ConfigClockSource+0x15c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002162:	68cb      	ldr	r3, [r1, #12]
 8002164:	684a      	ldr	r2, [r1, #4]
 8002166:	6889      	ldr	r1, [r1, #8]
 8002168:	f7ff ff9c 	bl	80020a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800216c:	6822      	ldr	r2, [r4, #0]
 800216e:	6893      	ldr	r3, [r2, #8]
 8002170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002174:	e012      	b.n	800219c <HAL_TIM_ConfigClockSource+0xe4>
  {
  case TIM_CLOCKSOURCE_INTERNAL:
    {
      assert_param(IS_TIM_INSTANCE(htim->Instance));      
      /* Disable slave mode to clock the prescaler directly with the internal clock */
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8002176:	6883      	ldr	r3, [r0, #8]
 8002178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800217c:	f023 0307 	bic.w	r3, r3, #7
 8002180:	e047      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002182:	68cb      	ldr	r3, [r1, #12]
 8002184:	684a      	ldr	r2, [r1, #4]
 8002186:	6889      	ldr	r1, [r1, #8]
 8002188:	f7ff ff8c 	bl	80020a4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity, 
                        sClockSourceConfig->ClockFilter);
      /* Get the TIMx SMCR register value */
      tmpsmcr = htim->Instance->SMCR;
 800218c:	6822      	ldr	r2, [r4, #0]
 800218e:	6893      	ldr	r3, [r2, #8]
      /* Reset the SMS and TS Bits */
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002190:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002194:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002198:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      TIM_ETR_SetConfig(htim->Instance, 
                        sClockSourceConfig->ClockPrescaler, 
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800219c:	6093      	str	r3, [r2, #8]
    }
    break;
 800219e:	e039      	b.n	8002214 <HAL_TIM_ConfigClockSource+0x15c>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021a0:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
      
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80021a2:	684d      	ldr	r5, [r1, #4]
 80021a4:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021a6:	6a01      	ldr	r1, [r0, #32]
 80021a8:	f021 0101 	bic.w	r1, r1, #1
 80021ac:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80021ae:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021b0:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021b4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 80021b8:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021ba:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021c0:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80021c2:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80021c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021c8:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80021cc:	e021      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80021ce:	6a03      	ldr	r3, [r0, #32]
      
      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance, 
 80021d0:	684d      	ldr	r5, [r1, #4]
 80021d2:	68ce      	ldr	r6, [r1, #12]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021d4:	6a01      	ldr	r1, [r0, #32]
 80021d6:	f021 0101 	bic.w	r1, r1, #1
 80021da:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80021dc:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80021de:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80021e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 80021e6:	432b      	orrs	r3, r5
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80021e8:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80021ec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80021ee:	6203      	str	r3, [r0, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80021f0:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80021f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80021f6:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80021fa:	e00a      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80021fc:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80021fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002202:	f043 0317 	orr.w	r3, r3, #23
 8002206:	e004      	b.n	8002212 <HAL_TIM_ConfigClockSource+0x15a>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002208:	6883      	ldr	r3, [r0, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 800220a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800220e:	f043 0327 	orr.w	r3, r3, #39	; 0x27
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002212:	6083      	str	r3, [r0, #8]
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8002214:	2301      	movs	r3, #1
  
  __HAL_UNLOCK(htim);
 8002216:	2000      	movs	r0, #0
    break;
    
  default:
    break;    
  }
  htim->State = HAL_TIM_STATE_READY;
 8002218:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 800221c:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  
  return HAL_OK;
}
 8002220:	bd70      	pop	{r4, r5, r6, pc}
 8002222:	bf00      	nop
 8002224:	fffe0088 	.word	0xfffe0088

08002228 <TIM_SlaveTimer_SetConfig>:
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002228:	6800      	ldr	r0, [r0, #0]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800222a:	684a      	ldr	r2, [r1, #4]
  uint32_t tmpsmcr = 0U;
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800222c:	6883      	ldr	r3, [r0, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800222e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002232:	4313      	orrs	r3, r2
  TIMx->CCER = tmpccer;  
}

static void TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                              TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 8002234:	b430      	push	{r4, r5}
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800223a:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800223c:	f023 0307 	bic.w	r3, r3, #7
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002240:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002242:	2a50      	cmp	r2, #80	; 0x50
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002244:	6083      	str	r3, [r0, #8]
 
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002246:	d01a      	beq.n	800227e <TIM_SlaveTimer_SetConfig+0x56>
 8002248:	d80f      	bhi.n	800226a <TIM_SlaveTimer_SetConfig+0x42>
 800224a:	2a40      	cmp	r2, #64	; 0x40
 800224c:	d139      	bne.n	80022c2 <TIM_SlaveTimer_SetConfig+0x9a>
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
  
      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800224e:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002250:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
      
      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002252:	6909      	ldr	r1, [r1, #16]
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
  
      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002254:	f023 0301 	bic.w	r3, r3, #1
 8002258:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;    
 800225a:	6983      	ldr	r3, [r0, #24]
      
      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800225c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002260:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
      
      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002264:	6183      	str	r3, [r0, #24]
      htim->Instance->CCER = tmpccer;                               
 8002266:	6202      	str	r2, [r0, #32]
                               
    }
    break;
 8002268:	e02b      	b.n	80022c2 <TIM_SlaveTimer_SetConfig+0x9a>

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 
  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800226a:	2a60      	cmp	r2, #96	; 0x60
 800226c:	d017      	beq.n	800229e <TIM_SlaveTimer_SetConfig+0x76>
 800226e:	2a70      	cmp	r2, #112	; 0x70
 8002270:	d127      	bne.n	80022c2 <TIM_SlaveTimer_SetConfig+0x9a>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance, 
 8002272:	690b      	ldr	r3, [r1, #16]
 8002274:	688a      	ldr	r2, [r1, #8]
 8002276:	68c9      	ldr	r1, [r1, #12]
    break;
       
  default:
    break;
  }
}
 8002278:	bc30      	pop	{r4, r5}
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance, 
 800227a:	f7ff bf13 	b.w	80020a4 <TIM_ETR_SetConfig>
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800227e:	6a03      	ldr	r3, [r0, #32]
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
  
      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002280:	688c      	ldr	r4, [r1, #8]
 8002282:	690d      	ldr	r5, [r1, #16]
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002284:	6a01      	ldr	r1, [r0, #32]
 8002286:	f021 0101 	bic.w	r1, r1, #1
 800228a:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800228c:	6982      	ldr	r2, [r0, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800228e:	f023 030a 	bic.w	r3, r3, #10
  tmpccer = TIMx->CCER;
  TIMx->CCER &= ~TIM_CCER_CC1E;
  tmpccmr1 = TIMx->CCMR1;    
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002292:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002296:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
  tmpccer |= TIM_ICPolarity;
 800229a:	4323      	orrs	r3, r4
 800229c:	e00f      	b.n	80022be <TIM_SlaveTimer_SetConfig+0x96>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
  
      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800229e:	688c      	ldr	r4, [r1, #8]
 80022a0:	690d      	ldr	r5, [r1, #16]
{
  uint32_t tmpccmr1 = 0U;
  uint32_t tmpccer = 0U;
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022a2:	6a01      	ldr	r1, [r0, #32]
 80022a4:	f021 0110 	bic.w	r1, r1, #16
 80022a8:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022aa:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80022ac:	6a03      	ldr	r3, [r0, #32]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ae:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80022b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022b6:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
  tmpccer |= (TIM_ICPolarity << 4U);
 80022ba:	ea43 1304 	orr.w	r3, r3, r4, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80022be:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80022c0:	6203      	str	r3, [r0, #32]
    break;
       
  default:
    break;
  }
}
 80022c2:	bc30      	pop	{r4, r5}
 80022c4:	4770      	bx	lr

080022c6 <HAL_TIM_SlaveConfigSynchronization>:
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 80022c6:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 80022c8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80022cc:	2b01      	cmp	r3, #1
  *         timer input or external trigger input) and the ) and the Slave 
  *         mode (Disable, Reset, Gated, Trigger, External clock mode 1). 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchronization(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef * sSlaveConfig)
{
 80022ce:	4604      	mov	r4, r0
 80022d0:	f04f 0302 	mov.w	r3, #2
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 80022d4:	d015      	beq.n	8002302 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 80022d6:	2501      	movs	r5, #1
 80022d8:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 80022e0:	f7ff ffa2 	bl	8002228 <TIM_SlaveTimer_SetConfig>
  
  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80022e4:	6823      	ldr	r3, [r4, #0]
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80022ec:	60da      	str	r2, [r3, #12]
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022ee:	68da      	ldr	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
     
  __HAL_UNLOCK(htim);  
 80022f0:	2000      	movs	r0, #0
  
  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
  
  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80022f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80022f6:	60da      	str	r2, [r3, #12]
  
  htim->State = HAL_TIM_STATE_READY;
 80022f8:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
     
  __HAL_UNLOCK(htim);  
 80022fc:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  
  return HAL_OK;
 8002300:	bd38      	pop	{r3, r4, r5, pc}
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));
  
  __HAL_LOCK(htim);
 8002302:	4618      	mov	r0, r3
  htim->State = HAL_TIM_STATE_READY;
     
  __HAL_UNLOCK(htim);  
  
  return HAL_OK;
} 
 8002304:	bd38      	pop	{r3, r4, r5, pc}

08002306 <TIM_CCxChannelCmd>:
  * @param  ChannelState: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002306:	b510      	push	{r4, lr}
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002308:	2301      	movs	r3, #1
 800230a:	6a04      	ldr	r4, [r0, #32]
 800230c:	408b      	lsls	r3, r1
 800230e:	ea24 0303 	bic.w	r3, r4, r3
 8002312:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 8002314:	6a03      	ldr	r3, [r0, #32]
 8002316:	408a      	lsls	r2, r1
 8002318:	ea42 0103 	orr.w	r1, r2, r3
 800231c:	6201      	str	r1, [r0, #32]
 800231e:	bd10      	pop	{r4, pc}

08002320 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002320:	b510      	push	{r4, lr}
 8002322:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  
  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002324:	2201      	movs	r2, #1
 8002326:	6800      	ldr	r0, [r0, #0]
 8002328:	f7ff ffed 	bl	8002306 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 800232c:	6823      	ldr	r3, [r4, #0]
 800232e:	4a0e      	ldr	r2, [pc, #56]	; (8002368 <HAL_TIM_PWM_Start+0x48>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d00f      	beq.n	8002354 <HAL_TIM_PWM_Start+0x34>
 8002334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002338:	4293      	cmp	r3, r2
 800233a:	d00b      	beq.n	8002354 <HAL_TIM_PWM_Start+0x34>
 800233c:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 8002340:	4293      	cmp	r3, r2
 8002342:	d007      	beq.n	8002354 <HAL_TIM_PWM_Start+0x34>
 8002344:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002348:	4293      	cmp	r3, r2
 800234a:	d003      	beq.n	8002354 <HAL_TIM_PWM_Start+0x34>
 800234c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <HAL_TIM_PWM_Start+0x3c>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002354:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002356:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800235a:	645a      	str	r2, [r3, #68]	; 0x44
  }
    
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	f042 0201 	orr.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]
  
  /* Return function status */
  return HAL_OK;
} 
 8002364:	2000      	movs	r0, #0
 8002366:	bd10      	pop	{r4, pc}
 8002368:	40012c00 	.word	0x40012c00

0800236c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{   
 800236c:	b510      	push	{r4, lr}
 800236e:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
    
  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002370:	2200      	movs	r2, #0
 8002372:	6800      	ldr	r0, [r0, #0]
 8002374:	f7ff ffc7 	bl	8002306 <TIM_CCxChannelCmd>
  
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 8002378:	6823      	ldr	r3, [r4, #0]
 800237a:	4a1a      	ldr	r2, [pc, #104]	; (80023e4 <HAL_TIM_PWM_Stop+0x78>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d00f      	beq.n	80023a0 <HAL_TIM_PWM_Stop+0x34>
 8002380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002384:	4293      	cmp	r3, r2
 8002386:	d00b      	beq.n	80023a0 <HAL_TIM_PWM_Stop+0x34>
 8002388:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
 800238c:	4293      	cmp	r3, r2
 800238e:	d007      	beq.n	80023a0 <HAL_TIM_PWM_Stop+0x34>
 8002390:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002394:	4293      	cmp	r3, r2
 8002396:	d003      	beq.n	80023a0 <HAL_TIM_PWM_Stop+0x34>
 8002398:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800239c:	4293      	cmp	r3, r2
 800239e:	d10d      	bne.n	80023bc <HAL_TIM_PWM_Stop+0x50>
  {
    /* Disable the Main Ouput */
    __HAL_TIM_MOE_DISABLE(htim);
 80023a0:	6a19      	ldr	r1, [r3, #32]
 80023a2:	f241 1211 	movw	r2, #4369	; 0x1111
 80023a6:	400a      	ands	r2, r1
 80023a8:	b942      	cbnz	r2, 80023bc <HAL_TIM_PWM_Stop+0x50>
 80023aa:	6a19      	ldr	r1, [r3, #32]
 80023ac:	f240 4244 	movw	r2, #1092	; 0x444
 80023b0:	400a      	ands	r2, r1
 80023b2:	b91a      	cbnz	r2, 80023bc <HAL_TIM_PWM_Stop+0x50>
 80023b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80023b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023ba:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80023bc:	6a19      	ldr	r1, [r3, #32]
 80023be:	f241 1211 	movw	r2, #4369	; 0x1111
 80023c2:	400a      	ands	r2, r1
 80023c4:	b942      	cbnz	r2, 80023d8 <HAL_TIM_PWM_Stop+0x6c>
 80023c6:	6a19      	ldr	r1, [r3, #32]
 80023c8:	f240 4244 	movw	r2, #1092	; 0x444
 80023cc:	400a      	ands	r2, r1
 80023ce:	b91a      	cbnz	r2, 80023d8 <HAL_TIM_PWM_Stop+0x6c>
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]
  
  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80023d8:	2301      	movs	r3, #1
 80023da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  
  /* Return function status */
  return HAL_OK;
} 
 80023de:	2000      	movs	r0, #0
 80023e0:	bd10      	pop	{r4, pc}
 80023e2:	bf00      	nop
 80023e4:	40012c00 	.word	0x40012c00

080023e8 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80023e8:	6a03      	ldr	r3, [r0, #32]
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023f0:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80023f2:	6842      	ldr	r2, [r0, #4]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 80023f4:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80023f6:	6d44      	ldr	r4, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023f8:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80023fa:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 80023fe:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002402:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8002404:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8002406:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800240a:	ea43 4305 	orr.w	r3, r3, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 800240e:	4d0f      	ldr	r5, [pc, #60]	; (800244c <TIM_OC5_SetConfig+0x64>)
 8002410:	42a8      	cmp	r0, r5
 8002412:	d00f      	beq.n	8002434 <TIM_OC5_SetConfig+0x4c>
 8002414:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002418:	42a8      	cmp	r0, r5
 800241a:	d00b      	beq.n	8002434 <TIM_OC5_SetConfig+0x4c>
 800241c:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 8002420:	42a8      	cmp	r0, r5
 8002422:	d007      	beq.n	8002434 <TIM_OC5_SetConfig+0x4c>
 8002424:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002428:	42a8      	cmp	r0, r5
 800242a:	d003      	beq.n	8002434 <TIM_OC5_SetConfig+0x4c>
 800242c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002430:	42a8      	cmp	r0, r5
 8002432:	d104      	bne.n	800243e <TIM_OC5_SetConfig+0x56>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8002434:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 16U);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8002436:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800243a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800243e:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002440:	684a      	ldr	r2, [r1, #4]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8002442:	6544      	str	r4, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8002444:	6582      	str	r2, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8002446:	6203      	str	r3, [r0, #32]
 8002448:	bd30      	pop	{r4, r5, pc}
 800244a:	bf00      	nop
 800244c:	40012c00 	.word	0x40012c00

08002450 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8002450:	6a03      	ldr	r3, [r0, #32]
 8002452:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8002456:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002458:	6a03      	ldr	r3, [r0, #32]
  * @param  OC_Config: The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx, 
                              TIM_OC_InitTypeDef *OC_Config)
{
 800245a:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC6E;
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800245c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800245e:	6d42      	ldr	r2, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002460:	680d      	ldr	r5, [r1, #0]
  tmpcr2 =  TIMx->CR2; 
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8002462:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8002466:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800246a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800246e:	688d      	ldr	r5, [r1, #8]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8002470:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8002474:	ea43 5305 	orr.w	r3, r3, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8002478:	4d0e      	ldr	r5, [pc, #56]	; (80024b4 <TIM_OC6_SetConfig+0x64>)
 800247a:	42a8      	cmp	r0, r5
 800247c:	d00f      	beq.n	800249e <TIM_OC6_SetConfig+0x4e>
 800247e:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8002482:	42a8      	cmp	r0, r5
 8002484:	d00b      	beq.n	800249e <TIM_OC6_SetConfig+0x4e>
 8002486:	f505 6540 	add.w	r5, r5, #3072	; 0xc00
 800248a:	42a8      	cmp	r0, r5
 800248c:	d007      	beq.n	800249e <TIM_OC6_SetConfig+0x4e>
 800248e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002492:	42a8      	cmp	r0, r5
 8002494:	d003      	beq.n	800249e <TIM_OC6_SetConfig+0x4e>
 8002496:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800249a:	42a8      	cmp	r0, r5
 800249c:	d104      	bne.n	80024a8 <TIM_OC6_SetConfig+0x58>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800249e:	694d      	ldr	r5, [r1, #20]
  tmpccer |= (OC_Config->OCPolarity << 20U);

  if(IS_TIM_BREAK_INSTANCE(TIMx))
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80024a0:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80024a4:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80024a8:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80024aa:	6542      	str	r2, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80024ac:	684a      	ldr	r2, [r1, #4]
 80024ae:	65c2      	str	r2, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80024b0:	6203      	str	r3, [r0, #32]
 80024b2:	bd30      	pop	{r4, r5, pc}
 80024b4:	40012c00 	.word	0x40012c00

080024b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80024b8:	b538      	push	{r3, r4, r5, lr}
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024ba:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80024be:	2b01      	cmp	r3, #1
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim, 
                                            TIM_OC_InitTypeDef* sConfig, 
                                            uint32_t Channel)
{
 80024c0:	4604      	mov	r4, r0
 80024c2:	460d      	mov	r5, r1
 80024c4:	f04f 0002 	mov.w	r0, #2
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024c8:	d07b      	beq.n	80025c2 <HAL_TIM_PWM_ConfigChannel+0x10a>
 80024ca:	2301      	movs	r3, #1
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 80024cc:	2a08      	cmp	r2, #8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80024ce:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 80024d2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    
  switch (Channel)
 80024d6:	d03c      	beq.n	8002552 <HAL_TIM_PWM_ConfigChannel+0x9a>
 80024d8:	d813      	bhi.n	8002502 <HAL_TIM_PWM_ConfigChannel+0x4a>
 80024da:	b34a      	cbz	r2, 8002530 <HAL_TIM_PWM_ConfigChannel+0x78>
 80024dc:	2a04      	cmp	r2, #4
 80024de:	d16a      	bne.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024e0:	6820      	ldr	r0, [r4, #0]
 80024e2:	f7ff fd1f 	bl	8001f24 <TIM_OC2_SetConfig>
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024e6:	6823      	ldr	r3, [r4, #0]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024e8:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024ea:	699a      	ldr	r2, [r3, #24]
 80024ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024f0:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024f2:	699a      	ldr	r2, [r3, #24]
 80024f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024f8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024fa:	699a      	ldr	r2, [r3, #24]
 80024fc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002500:	e025      	b.n	800254e <HAL_TIM_PWM_ConfigChannel+0x96>
  /* Check input state */
  __HAL_LOCK(htim);
  
  htim->State = HAL_TIM_STATE_BUSY;
    
  switch (Channel)
 8002502:	2a10      	cmp	r2, #16
 8002504:	d036      	beq.n	8002574 <HAL_TIM_PWM_ConfigChannel+0xbc>
 8002506:	2a14      	cmp	r2, #20
 8002508:	d044      	beq.n	8002594 <HAL_TIM_PWM_ConfigChannel+0xdc>
 800250a:	2a0c      	cmp	r2, #12
 800250c:	d153      	bne.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800250e:	6820      	ldr	r0, [r4, #0]
 8002510:	f7ff fd94 	bl	800203c <TIM_OC4_SetConfig>
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002514:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002516:	6929      	ldr	r1, [r5, #16]
      
      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002518:	69da      	ldr	r2, [r3, #28]
 800251a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800251e:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002520:	69da      	ldr	r2, [r3, #28]
 8002522:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002526:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002528:	69da      	ldr	r2, [r3, #28]
 800252a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800252e:	e01f      	b.n	8002570 <HAL_TIM_PWM_ConfigChannel+0xb8>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002530:	6820      	ldr	r0, [r4, #0]
 8002532:	f7ff fcab 	bl	8001e8c <TIM_OC1_SetConfig>
      
      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002536:	6823      	ldr	r3, [r4, #0]
 8002538:	699a      	ldr	r2, [r3, #24]
 800253a:	f042 0208 	orr.w	r2, r2, #8
 800253e:	619a      	str	r2, [r3, #24]
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002540:	699a      	ldr	r2, [r3, #24]
 8002542:	f022 0204 	bic.w	r2, r2, #4
 8002546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002548:	6999      	ldr	r1, [r3, #24]
 800254a:	692a      	ldr	r2, [r5, #16]
 800254c:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
      
      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800254e:	619a      	str	r2, [r3, #24]
    }
    break;
 8002550:	e031      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance)); 
      
      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002552:	6820      	ldr	r0, [r4, #0]
 8002554:	f7ff fd2c 	bl	8001fb0 <TIM_OC3_SetConfig>
      
      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002558:	6823      	ldr	r3, [r4, #0]
 800255a:	69da      	ldr	r2, [r3, #28]
 800255c:	f042 0208 	orr.w	r2, r2, #8
 8002560:	61da      	str	r2, [r3, #28]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002562:	69da      	ldr	r2, [r3, #28]
 8002564:	f022 0204 	bic.w	r2, r2, #4
 8002568:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 800256a:	69d9      	ldr	r1, [r3, #28]
 800256c:	692a      	ldr	r2, [r5, #16]
 800256e:	430a      	orrs	r2, r1
      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8002570:	61da      	str	r2, [r3, #28]
    }
    break;
 8002572:	e020      	b.n	80025b6 <HAL_TIM_PWM_ConfigChannel+0xfe>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002574:	6820      	ldr	r0, [r4, #0]
 8002576:	f7ff ff37 	bl	80023e8 <TIM_OC5_SetConfig>
      
      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800257a:	6823      	ldr	r3, [r4, #0]
 800257c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800257e:	f042 0208 	orr.w	r2, r2, #8
 8002582:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002584:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002586:	f022 0204 	bic.w	r2, r2, #4
 800258a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 800258c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800258e:	692a      	ldr	r2, [r5, #16]
 8002590:	430a      	orrs	r2, r1
 8002592:	e00f      	b.n	80025b4 <HAL_TIM_PWM_ConfigChannel+0xfc>
    {
       /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance)); 
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002594:	6820      	ldr	r0, [r4, #0]
 8002596:	f7ff ff5b 	bl	8002450 <TIM_OC6_SetConfig>
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800259a:	6823      	ldr	r3, [r4, #0]
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 800259c:	6909      	ldr	r1, [r1, #16]
      
     /* Configure the Channel 5 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
      
      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800259e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80025a4:	655a      	str	r2, [r3, #84]	; 0x54
      
     /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80025a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025ac:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80025ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80025b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80025b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80025b6:	2301      	movs	r3, #1
    
  __HAL_UNLOCK(htim);
 80025b8:	2000      	movs	r0, #0
    
    default:
    break;    
  }
  
  htim->State = HAL_TIM_STATE_READY;
 80025ba:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    
  __HAL_UNLOCK(htim);
 80025be:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  
  return HAL_OK;
}
 80025c2:	bd38      	pop	{r3, r4, r5, pc}

080025c4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80025c4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80025c8:	2b01      	cmp	r3, #1
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 80025ca:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 80025cc:	d01c      	beq.n	8002608 <HAL_TIMEx_MasterConfigSynchronization+0x44>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025ce:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025d0:	4c0e      	ldr	r4, [pc, #56]	; (800260c <HAL_TIMEx_MasterConfigSynchronization+0x48>)
  
  /* Check input state */
  __HAL_LOCK(htim);

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80025d2:	6853      	ldr	r3, [r2, #4]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80025d4:	6895      	ldr	r5, [r2, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80025d6:	42a2      	cmp	r2, r4
 80025d8:	d003      	beq.n	80025e2 <HAL_TIMEx_MasterConfigSynchronization+0x1e>
 80025da:	f504 6400 	add.w	r4, r4, #2048	; 0x800
 80025de:	42a2      	cmp	r2, r4
 80025e0:	d103      	bne.n	80025ea <HAL_TIMEx_MasterConfigSynchronization+0x26>
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025e2:	684c      	ldr	r4, [r1, #4]
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80025e4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80025e8:	4323      	orrs	r3, r4
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025ea:	680c      	ldr	r4, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025ec:	6889      	ldr	r1, [r1, #8]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80025ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80025f2:	4323      	orrs	r3, r4

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80025f4:	f025 0480 	bic.w	r4, r5, #128	; 0x80
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80025f8:	6053      	str	r3, [r2, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80025fa:	4321      	orrs	r1, r4
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80025fc:	2300      	movs	r3, #0
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80025fe:	6091      	str	r1, [r2, #8]

  __HAL_UNLOCK(htim);
 8002600:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8002604:	4618      	mov	r0, r3
 8002606:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002608:	2002      	movs	r0, #2
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
  
  return HAL_OK;
} 
 800260a:	bd30      	pop	{r4, r5, pc}
 800260c:	40012c00 	.word	0x40012c00

08002610 <HAL_TIMEx_CommutationCallback>:
 8002610:	4770      	bx	lr

08002612 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002612:	4770      	bx	lr

08002614 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002614:	b538      	push	{r3, r4, r5, lr}
 8002616:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002618:	6805      	ldr	r5, [r0, #0]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800261a:	69c3      	ldr	r3, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800261c:	6922      	ldr	r2, [r4, #16]
 800261e:	6880      	ldr	r0, [r0, #8]
 8002620:	6829      	ldr	r1, [r5, #0]
 8002622:	4310      	orrs	r0, r2
 8002624:	6962      	ldr	r2, [r4, #20]
 8002626:	4302      	orrs	r2, r0
 8002628:	ea42 0003 	orr.w	r0, r2, r3
 800262c:	f421 4216 	bic.w	r2, r1, #38400	; 0x9600
 8002630:	f022 020c 	bic.w	r2, r2, #12
 8002634:	4302      	orrs	r2, r0
 8002636:	602a      	str	r2, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002638:	686a      	ldr	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800263a:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800263c:	f422 5140 	bic.w	r1, r2, #12288	; 0x3000
 8002640:	68e2      	ldr	r2, [r4, #12]
 8002642:	430a      	orrs	r2, r1
 8002644:	606a      	str	r2, [r5, #4]
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002646:	68aa      	ldr	r2, [r5, #8]
 8002648:	6a21      	ldr	r1, [r4, #32]
 800264a:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800264e:	4301      	orrs	r1, r0
 8002650:	430a      	orrs	r2, r1
 8002652:	60aa      	str	r2, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002654:	4a67      	ldr	r2, [pc, #412]	; (80027f4 <UART_SetConfig+0x1e0>)
 8002656:	4295      	cmp	r5, r2
 8002658:	d10a      	bne.n	8002670 <UART_SetConfig+0x5c>
 800265a:	f502 4258 	add.w	r2, r2, #55296	; 0xd800
 800265e:	4966      	ldr	r1, [pc, #408]	; (80027f8 <UART_SetConfig+0x1e4>)
 8002660:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002662:	f002 0203 	and.w	r2, r2, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800266a:	5c8a      	ldrb	r2, [r1, r2]
 800266c:	d04b      	beq.n	8002706 <UART_SetConfig+0xf2>
 800266e:	e08b      	b.n	8002788 <UART_SetConfig+0x174>
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002670:	4a62      	ldr	r2, [pc, #392]	; (80027fc <UART_SetConfig+0x1e8>)
 8002672:	4295      	cmp	r5, r2
 8002674:	d10e      	bne.n	8002694 <UART_SetConfig+0x80>
 8002676:	f502 32e6 	add.w	r2, r2, #117760	; 0x1cc00
 800267a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800267c:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
 8002680:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8002684:	d05b      	beq.n	800273e <UART_SetConfig+0x12a>
 8002686:	d935      	bls.n	80026f4 <UART_SetConfig+0xe0>
 8002688:	f5b2 3f00 	cmp.w	r2, #131072	; 0x20000
 800268c:	d063      	beq.n	8002756 <UART_SetConfig+0x142>
 800268e:	f5b2 3f40 	cmp.w	r2, #196608	; 0x30000
 8002692:	e036      	b.n	8002702 <UART_SetConfig+0xee>
 8002694:	4a5a      	ldr	r2, [pc, #360]	; (8002800 <UART_SetConfig+0x1ec>)
 8002696:	4295      	cmp	r5, r2
 8002698:	d10e      	bne.n	80026b8 <UART_SetConfig+0xa4>
 800269a:	f502 32e4 	add.w	r2, r2, #116736	; 0x1c800
 800269e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026a0:	f402 2240 	and.w	r2, r2, #786432	; 0xc0000
 80026a4:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
 80026a8:	d049      	beq.n	800273e <UART_SetConfig+0x12a>
 80026aa:	d923      	bls.n	80026f4 <UART_SetConfig+0xe0>
 80026ac:	f5b2 2f00 	cmp.w	r2, #524288	; 0x80000
 80026b0:	d051      	beq.n	8002756 <UART_SetConfig+0x142>
 80026b2:	f5b2 2f40 	cmp.w	r2, #786432	; 0xc0000
 80026b6:	e024      	b.n	8002702 <UART_SetConfig+0xee>
 80026b8:	4a52      	ldr	r2, [pc, #328]	; (8002804 <UART_SetConfig+0x1f0>)
 80026ba:	4295      	cmp	r5, r2
 80026bc:	d10e      	bne.n	80026dc <UART_SetConfig+0xc8>
 80026be:	f502 32e2 	add.w	r2, r2, #115712	; 0x1c400
 80026c2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026c4:	f402 1240 	and.w	r2, r2, #3145728	; 0x300000
 80026c8:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
 80026cc:	d037      	beq.n	800273e <UART_SetConfig+0x12a>
 80026ce:	d911      	bls.n	80026f4 <UART_SetConfig+0xe0>
 80026d0:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 80026d4:	d03f      	beq.n	8002756 <UART_SetConfig+0x142>
 80026d6:	f5b2 1f40 	cmp.w	r2, #3145728	; 0x300000
 80026da:	e012      	b.n	8002702 <UART_SetConfig+0xee>
 80026dc:	4a4a      	ldr	r2, [pc, #296]	; (8002808 <UART_SetConfig+0x1f4>)
 80026de:	4295      	cmp	r5, r2
 80026e0:	d145      	bne.n	800276e <UART_SetConfig+0x15a>
 80026e2:	f502 32e0 	add.w	r2, r2, #114688	; 0x1c000
 80026e6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80026e8:	f402 0240 	and.w	r2, r2, #12582912	; 0xc00000
 80026ec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
 80026f0:	d025      	beq.n	800273e <UART_SetConfig+0x12a>
 80026f2:	d801      	bhi.n	80026f8 <UART_SetConfig+0xe4>
 80026f4:	b182      	cbz	r2, 8002718 <UART_SetConfig+0x104>
 80026f6:	e03a      	b.n	800276e <UART_SetConfig+0x15a>
 80026f8:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 80026fc:	d02b      	beq.n	8002756 <UART_SetConfig+0x142>
 80026fe:	f5b2 0f40 	cmp.w	r2, #12582912	; 0xc00000
 8002702:	d012      	beq.n	800272a <UART_SetConfig+0x116>
 8002704:	e033      	b.n	800276e <UART_SetConfig+0x15a>

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    switch (clocksource)
 8002706:	2a08      	cmp	r2, #8
 8002708:	d834      	bhi.n	8002774 <UART_SetConfig+0x160>
 800270a:	e8df f002 	tbb	[pc, r2]
 800270e:	0b08      	.short	0x0b08
 8002710:	331b3311 	.word	0x331b3311
 8002714:	3333      	.short	0x3333
 8002716:	27          	.byte	0x27
 8002717:	00          	.byte	0x00

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800271c:	d13d      	bne.n	800279a <UART_SetConfig+0x186>
  {
    switch (clocksource)
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800271e:	f7ff f8cb 	bl	80018b8 <HAL_RCC_GetPCLK1Freq>
 8002722:	e011      	b.n	8002748 <UART_SetConfig+0x134>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002724:	f7ff f8e0 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 8002728:	e00e      	b.n	8002748 <UART_SetConfig+0x134>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800272e:	d142      	bne.n	80027b6 <UART_SetConfig+0x1a2>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002730:	6860      	ldr	r0, [r4, #4]
 8002732:	0842      	lsrs	r2, r0, #1
 8002734:	f502 0374 	add.w	r3, r2, #15990784	; 0xf40000
 8002738:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800273c:	e012      	b.n	8002764 <UART_SetConfig+0x150>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800273e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002742:	d141      	bne.n	80027c8 <UART_SetConfig+0x1b4>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002744:	f7fe ffc2 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 8002748:	6863      	ldr	r3, [r4, #4]
 800274a:	085a      	lsrs	r2, r3, #1
 800274c:	eb02 0040 	add.w	r0, r2, r0, lsl #1
 8002750:	fbb0 f3f3 	udiv	r3, r0, r3
 8002754:	e008      	b.n	8002768 <UART_SetConfig+0x154>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002756:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800275a:	d13f      	bne.n	80027dc <UART_SetConfig+0x1c8>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800275c:	6860      	ldr	r0, [r4, #4]
 800275e:	0843      	lsrs	r3, r0, #1
 8002760:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8002764:	fbb3 f3f0 	udiv	r3, r3, r0
 8002768:	b29b      	uxth	r3, r3
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 800276a:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
 800276c:	e004      	b.n	8002778 <UART_SetConfig+0x164>

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800276e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002772:	d13d      	bne.n	80027f0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002774:	2001      	movs	r0, #1
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
 8002776:	2300      	movs	r3, #0
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002778:	f3c3 0142 	ubfx	r1, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 800277c:	6822      	ldr	r2, [r4, #0]
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800277e:	f023 030f 	bic.w	r3, r3, #15
    huart->Instance->BRR = brrtemp;
 8002782:	430b      	orrs	r3, r1
 8002784:	60d3      	str	r3, [r2, #12]
 8002786:	bd38      	pop	{r3, r4, r5, pc}
  }
  else
  {
    switch (clocksource)
 8002788:	2a08      	cmp	r2, #8
 800278a:	d831      	bhi.n	80027f0 <UART_SetConfig+0x1dc>
 800278c:	e8df f002 	tbb	[pc, r2]
 8002790:	30130805 	.word	0x30130805
 8002794:	3030301c 	.word	0x3030301c
 8002798:	26          	.byte	0x26
 8002799:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800279a:	f7ff f88d 	bl	80018b8 <HAL_RCC_GetPCLK1Freq>
 800279e:	e015      	b.n	80027cc <UART_SetConfig+0x1b8>
        break;
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027a0:	f7ff f8a2 	bl	80018e8 <HAL_RCC_GetPCLK2Freq>
 80027a4:	6863      	ldr	r3, [r4, #4]
 80027a6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80027aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80027ae:	4b11      	ldr	r3, [pc, #68]	; (80027f4 <UART_SetConfig+0x1e0>)
 80027b0:	b280      	uxth	r0, r0
 80027b2:	60d8      	str	r0, [r3, #12]
 80027b4:	e01a      	b.n	80027ec <UART_SetConfig+0x1d8>
        break;
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027b6:	6861      	ldr	r1, [r4, #4]
 80027b8:	084a      	lsrs	r2, r1, #1
 80027ba:	f502 03f4 	add.w	r3, r2, #7995392	; 0x7a0000
 80027be:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80027c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80027c6:	e00f      	b.n	80027e8 <UART_SetConfig+0x1d4>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027c8:	f7fe ff80 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 80027cc:	6863      	ldr	r3, [r4, #4]
 80027ce:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80027d2:	fbb0 f0f3 	udiv	r0, r0, r3
 80027d6:	b280      	uxth	r0, r0
 80027d8:	60e8      	str	r0, [r5, #12]
 80027da:	e007      	b.n	80027ec <UART_SetConfig+0x1d8>
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027dc:	6862      	ldr	r2, [r4, #4]
 80027de:	0853      	lsrs	r3, r2, #1
 80027e0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80027e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80027e8:	b29b      	uxth	r3, r3
 80027ea:	60eb      	str	r3, [r5, #12]
{
  uint32_t tmpreg                     = 0x00000000U;
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
  uint16_t brrtemp                    = 0x0000U;
  uint16_t usartdiv                   = 0x0000U;
  HAL_StatusTypeDef ret               = HAL_OK;
 80027ec:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 80027ee:	bd38      	pop	{r3, r4, r5, pc}
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80027f2:	bd38      	pop	{r3, r4, r5, pc}
 80027f4:	40013800 	.word	0x40013800
 80027f8:	0800719a 	.word	0x0800719a
 80027fc:	40004400 	.word	0x40004400
 8002800:	40004800 	.word	0x40004800
 8002804:	40004c00 	.word	0x40004c00
 8002808:	40005000 	.word	0x40005000

0800280c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800280c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800280e:	07da      	lsls	r2, r3, #31
  * @brief Configure the UART peripheral advanced features.
  * @param huart: UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002810:	b510      	push	{r4, lr}
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002812:	d506      	bpl.n	8002822 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002814:	6804      	ldr	r4, [r0, #0]
 8002816:	6862      	ldr	r2, [r4, #4]
 8002818:	f422 3100 	bic.w	r1, r2, #131072	; 0x20000
 800281c:	6a82      	ldr	r2, [r0, #40]	; 0x28
 800281e:	430a      	orrs	r2, r1
 8002820:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002822:	079c      	lsls	r4, r3, #30
 8002824:	d506      	bpl.n	8002834 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002826:	6804      	ldr	r4, [r0, #0]
 8002828:	6862      	ldr	r2, [r4, #4]
 800282a:	f422 3180 	bic.w	r1, r2, #65536	; 0x10000
 800282e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
 8002830:	430a      	orrs	r2, r1
 8002832:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002834:	0759      	lsls	r1, r3, #29
 8002836:	d506      	bpl.n	8002846 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002838:	6804      	ldr	r4, [r0, #0]
 800283a:	6862      	ldr	r2, [r4, #4]
 800283c:	f422 2180 	bic.w	r1, r2, #262144	; 0x40000
 8002840:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8002842:	430a      	orrs	r2, r1
 8002844:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002846:	071a      	lsls	r2, r3, #28
 8002848:	d506      	bpl.n	8002858 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800284a:	6804      	ldr	r4, [r0, #0]
 800284c:	6862      	ldr	r2, [r4, #4]
 800284e:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
 8002852:	6b42      	ldr	r2, [r0, #52]	; 0x34
 8002854:	430a      	orrs	r2, r1
 8002856:	6062      	str	r2, [r4, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002858:	06dc      	lsls	r4, r3, #27
 800285a:	d506      	bpl.n	800286a <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800285c:	6804      	ldr	r4, [r0, #0]
 800285e:	68a2      	ldr	r2, [r4, #8]
 8002860:	f422 5180 	bic.w	r1, r2, #4096	; 0x1000
 8002864:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002866:	430a      	orrs	r2, r1
 8002868:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800286a:	0699      	lsls	r1, r3, #26
 800286c:	d506      	bpl.n	800287c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800286e:	6804      	ldr	r4, [r0, #0]
 8002870:	68a2      	ldr	r2, [r4, #8]
 8002872:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
 8002876:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8002878:	430a      	orrs	r2, r1
 800287a:	60a2      	str	r2, [r4, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800287c:	065a      	lsls	r2, r3, #25
 800287e:	d50f      	bpl.n	80028a0 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002880:	6801      	ldr	r1, [r0, #0]
 8002882:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002884:	684a      	ldr	r2, [r1, #4]
 8002886:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800288a:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800288c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002890:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002892:	d105      	bne.n	80028a0 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002894:	684a      	ldr	r2, [r1, #4]
 8002896:	f422 04c0 	bic.w	r4, r2, #6291456	; 0x600000
 800289a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800289c:	4322      	orrs	r2, r4
 800289e:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	d506      	bpl.n	80028b2 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028a4:	6801      	ldr	r1, [r0, #0]
 80028a6:	684b      	ldr	r3, [r1, #4]
 80028a8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80028ac:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80028ae:	4313      	orrs	r3, r2
 80028b0:	604b      	str	r3, [r1, #4]
 80028b2:	bd10      	pop	{r4, pc}

080028b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80028b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b8:	9d06      	ldr	r5, [sp, #24]
 80028ba:	4604      	mov	r4, r0
 80028bc:	460f      	mov	r7, r1
 80028be:	4616      	mov	r6, r2
 80028c0:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028c2:	6821      	ldr	r1, [r4, #0]
 80028c4:	69ca      	ldr	r2, [r1, #28]
 80028c6:	ea37 0302 	bics.w	r3, r7, r2
 80028ca:	bf0c      	ite	eq
 80028cc:	2201      	moveq	r2, #1
 80028ce:	2200      	movne	r2, #0
 80028d0:	42b2      	cmp	r2, r6
 80028d2:	d11d      	bne.n	8002910 <UART_WaitOnFlagUntilTimeout+0x5c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80028d4:	1c6b      	adds	r3, r5, #1
 80028d6:	d0f5      	beq.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x10>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80028d8:	b99d      	cbnz	r5, 8002902 <UART_WaitOnFlagUntilTimeout+0x4e>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028da:	6823      	ldr	r3, [r4, #0]
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028e2:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e4:	689a      	ldr	r2, [r3, #8]
 80028e6:	f022 0201 	bic.w	r2, r2, #1
 80028ea:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80028ec:	2320      	movs	r3, #32
 80028ee:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80028f2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80028f6:	2300      	movs	r3, #0
 80028f8:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80028fc:	2003      	movs	r0, #3
 80028fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002902:	f7fe fb07 	bl	8000f14 <HAL_GetTick>
 8002906:	ebc8 0000 	rsb	r0, r8, r0
 800290a:	4285      	cmp	r5, r0
 800290c:	d2d9      	bcs.n	80028c2 <UART_WaitOnFlagUntilTimeout+0xe>
 800290e:	e7e4      	b.n	80028da <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8002910:	2000      	movs	r0, #0
}
 8002912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002916 <HAL_UART_Transmit>:
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002916:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800291a:	461f      	mov	r7, r3
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800291c:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002920:	2b20      	cmp	r3, #32
  * @param Size: Amount of data to be sent.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002922:	4604      	mov	r4, r0
 8002924:	460d      	mov	r5, r1
 8002926:	4690      	mov	r8, r2
  uint16_t* tmp;
  uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8002928:	d14b      	bne.n	80029c2 <HAL_UART_Transmit+0xac>
  {
    if((pData == NULL ) || (Size == 0U))
 800292a:	2900      	cmp	r1, #0
 800292c:	d047      	beq.n	80029be <HAL_UART_Transmit+0xa8>
 800292e:	2a00      	cmp	r2, #0
 8002930:	d045      	beq.n	80029be <HAL_UART_Transmit+0xa8>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002932:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8002936:	2b01      	cmp	r3, #1
 8002938:	d043      	beq.n	80029c2 <HAL_UART_Transmit+0xac>
 800293a:	2301      	movs	r3, #1
 800293c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002940:	2300      	movs	r3, #0
 8002942:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002944:	2321      	movs	r3, #33	; 0x21
 8002946:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800294a:	f7fe fae3 	bl	8000f14 <HAL_GetTick>

    huart->TxXferSize = Size;
 800294e:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002952:	4606      	mov	r6, r0

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
 8002954:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8002958:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800295c:	b292      	uxth	r2, r2
 800295e:	b302      	cbz	r2, 80029a2 <HAL_UART_Transmit+0x8c>
    {
      huart->TxXferCount--;
 8002960:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002964:	9700      	str	r7, [sp, #0]

    huart->TxXferSize = Size;
    huart->TxXferCount = Size;
    while(huart->TxXferCount > 0U)
    {
      huart->TxXferCount--;
 8002966:	3b01      	subs	r3, #1
 8002968:	b29b      	uxth	r3, r3
 800296a:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800296e:	2200      	movs	r2, #0
 8002970:	4633      	mov	r3, r6
 8002972:	2180      	movs	r1, #128	; 0x80
 8002974:	4620      	mov	r0, r4
 8002976:	f7ff ff9d 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 800297a:	b108      	cbz	r0, 8002980 <HAL_UART_Transmit+0x6a>
      {
        return HAL_TIMEOUT;
 800297c:	2003      	movs	r0, #3
 800297e:	e021      	b.n	80029c4 <HAL_UART_Transmit+0xae>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002980:	68a3      	ldr	r3, [r4, #8]
 8002982:	6822      	ldr	r2, [r4, #0]
 8002984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002988:	d107      	bne.n	800299a <HAL_UART_Transmit+0x84>
 800298a:	6923      	ldr	r3, [r4, #16]
 800298c:	b92b      	cbnz	r3, 800299a <HAL_UART_Transmit+0x84>
      {
        tmp = (uint16_t*) pData;
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 800298e:	f835 3b02 	ldrh.w	r3, [r5], #2
 8002992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002996:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8002998:	e7de      	b.n	8002958 <HAL_UART_Transmit+0x42>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800299a:	782b      	ldrb	r3, [r5, #0]
 800299c:	8513      	strh	r3, [r2, #40]	; 0x28
 800299e:	3501      	adds	r5, #1
 80029a0:	e7da      	b.n	8002958 <HAL_UART_Transmit+0x42>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80029a2:	9700      	str	r7, [sp, #0]
 80029a4:	4633      	mov	r3, r6
 80029a6:	2140      	movs	r1, #64	; 0x40
 80029a8:	4620      	mov	r0, r4
 80029aa:	f7ff ff83 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 80029ae:	2800      	cmp	r0, #0
 80029b0:	d1e4      	bne.n	800297c <HAL_UART_Transmit+0x66>
    {
      return HAL_TIMEOUT;
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80029b2:	2320      	movs	r3, #32
 80029b4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80029b8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 80029bc:	e002      	b.n	80029c4 <HAL_UART_Transmit+0xae>
  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 80029be:	2001      	movs	r0, #1
 80029c0:	e000      	b.n	80029c4 <HAL_UART_Transmit+0xae>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80029c2:	2002      	movs	r0, #2
  }
}
 80029c4:	b002      	add	sp, #8
 80029c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029ca <HAL_UART_Receive>:
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029ca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80029ce:	4698      	mov	r8, r3
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80029d0:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 80029d4:	2b20      	cmp	r3, #32
  * @param Size: amount of data to be received.
  * @param Timeout: Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029d6:	4604      	mov	r4, r0
 80029d8:	460d      	mov	r5, r1
 80029da:	4616      	mov	r6, r2
  uint16_t* tmp;
  uint16_t uhMask;
  uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 80029dc:	d156      	bne.n	8002a8c <HAL_UART_Receive+0xc2>
  {
    if((pData == NULL ) || (Size == 0U))
 80029de:	2900      	cmp	r1, #0
 80029e0:	d052      	beq.n	8002a88 <HAL_UART_Receive+0xbe>
 80029e2:	2a00      	cmp	r2, #0
 80029e4:	d050      	beq.n	8002a88 <HAL_UART_Receive+0xbe>
    {
      return  HAL_ERROR;
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80029e6:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d04e      	beq.n	8002a8c <HAL_UART_Receive+0xc2>
 80029ee:	2301      	movs	r3, #1
 80029f0:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029f4:	2300      	movs	r3, #0
 80029f6:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029f8:	2322      	movs	r3, #34	; 0x22
 80029fa:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80029fe:	f7fe fa89 	bl	8000f14 <HAL_GetTick>

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a02:	68a3      	ldr	r3, [r4, #8]
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 8002a04:	f8a4 6058 	strh.w	r6, [r4, #88]	; 0x58
    huart->RxXferCount = Size;

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->RxState = HAL_UART_STATE_BUSY_RX;

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002a0c:	4607      	mov	r7, r0

    huart->RxXferSize = Size;
    huart->RxXferCount = Size;
 8002a0e:	f8a4 605a 	strh.w	r6, [r4, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002a12:	d106      	bne.n	8002a22 <HAL_UART_Receive+0x58>
 8002a14:	6923      	ldr	r3, [r4, #16]
 8002a16:	b913      	cbnz	r3, 8002a1e <HAL_UART_Receive+0x54>
 8002a18:	f240 13ff 	movw	r3, #511	; 0x1ff
 8002a1c:	e006      	b.n	8002a2c <HAL_UART_Receive+0x62>
 8002a1e:	23ff      	movs	r3, #255	; 0xff
 8002a20:	e004      	b.n	8002a2c <HAL_UART_Receive+0x62>
 8002a22:	b92b      	cbnz	r3, 8002a30 <HAL_UART_Receive+0x66>
 8002a24:	6923      	ldr	r3, [r4, #16]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d0f9      	beq.n	8002a1e <HAL_UART_Receive+0x54>
 8002a2a:	237f      	movs	r3, #127	; 0x7f
 8002a2c:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    uhMask = huart->Mask;
 8002a30:	f8b4 605c 	ldrh.w	r6, [r4, #92]	; 0x5c

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
 8002a34:	f8b4 005a 	ldrh.w	r0, [r4, #90]	; 0x5a
 8002a38:	b280      	uxth	r0, r0
 8002a3a:	b1f8      	cbz	r0, 8002a7c <HAL_UART_Receive+0xb2>
    {
      huart->RxXferCount--;
 8002a3c:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a40:	f8cd 8000 	str.w	r8, [sp]
    uhMask = huart->Mask;

    /* as long as data have to be received */
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	463b      	mov	r3, r7
 8002a50:	2120      	movs	r1, #32
 8002a52:	4620      	mov	r0, r4
 8002a54:	f7ff ff2e 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 8002a58:	b9d0      	cbnz	r0, 8002a90 <HAL_UART_Receive+0xc6>
      {
        return HAL_TIMEOUT;
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a5a:	68a3      	ldr	r3, [r4, #8]
 8002a5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a60:	6823      	ldr	r3, [r4, #0]
 8002a62:	d106      	bne.n	8002a72 <HAL_UART_Receive+0xa8>
 8002a64:	6922      	ldr	r2, [r4, #16]
 8002a66:	b922      	cbnz	r2, 8002a72 <HAL_UART_Receive+0xa8>
      {
        tmp = (uint16_t*) pData ;
        *tmp = (uint16_t)(huart->Instance->RDR & uhMask);
 8002a68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a6a:	4033      	ands	r3, r6
 8002a6c:	f825 3b02 	strh.w	r3, [r5], #2
        pData +=2U;
 8002a70:	e7e0      	b.n	8002a34 <HAL_UART_Receive+0x6a>
      }
      else
      {
        *pData++ = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002a72:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002a74:	4033      	ands	r3, r6
 8002a76:	702b      	strb	r3, [r5, #0]
 8002a78:	3501      	adds	r5, #1
 8002a7a:	e7db      	b.n	8002a34 <HAL_UART_Receive+0x6a>
      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002a82:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68

    return HAL_OK;
 8002a86:	e004      	b.n	8002a92 <HAL_UART_Receive+0xc8>
  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
  {
    if((pData == NULL ) || (Size == 0U))
    {
      return  HAL_ERROR;
 8002a88:	2001      	movs	r0, #1
 8002a8a:	e002      	b.n	8002a92 <HAL_UART_Receive+0xc8>

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002a8c:	2002      	movs	r0, #2
 8002a8e:	e000      	b.n	8002a92 <HAL_UART_Receive+0xc8>
    while(huart->RxXferCount > 0U)
    {
      huart->RxXferCount--;
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
      {
        return HAL_TIMEOUT;
 8002a90:	2003      	movs	r0, #3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002a92:	b002      	add	sp, #8
 8002a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002a98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002a9a:	4604      	mov	r4, r0
  uint32_t tickstart = 0U;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a9c:	2600      	movs	r6, #0
 8002a9e:	66c6      	str	r6, [r0, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002aa0:	f7fe fa38 	bl	8000f14 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aa4:	6823      	ldr	r3, [r4, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	071a      	lsls	r2, r3, #28

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002aaa:	4605      	mov	r5, r0

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002aac:	d404      	bmi.n	8002ab8 <UART_CheckIdleState+0x20>
      /* Timeout Occured */
      return HAL_TIMEOUT;
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002aae:	6823      	ldr	r3, [r4, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	075b      	lsls	r3, r3, #29
 8002ab4:	d51a      	bpl.n	8002aec <UART_CheckIdleState+0x54>
 8002ab6:	e00d      	b.n	8002ad4 <UART_CheckIdleState+0x3c>

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ab8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002abc:	9300      	str	r3, [sp, #0]
 8002abe:	4632      	mov	r2, r6
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002ac6:	4620      	mov	r0, r4
 8002ac8:	f7ff fef4 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 8002acc:	2800      	cmp	r0, #0
 8002ace:	d0ee      	beq.n	8002aae <UART_CheckIdleState+0x16>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8002ad0:	2003      	movs	r0, #3
 8002ad2:	e013      	b.n	8002afc <UART_CheckIdleState+0x64>
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002ad4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	462b      	mov	r3, r5
 8002ade:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002ae2:	4620      	mov	r0, r4
 8002ae4:	f7ff fee6 	bl	80028b4 <UART_WaitOnFlagUntilTimeout>
 8002ae8:	2800      	cmp	r0, #0
 8002aea:	d1f1      	bne.n	8002ad0 <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002aec:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002aee:	2000      	movs	r0, #0
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8002af0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002af4:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
  huart->RxState = HAL_UART_STATE_READY;
 8002af8:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);

  return HAL_OK;
}
 8002afc:	b002      	add	sp, #8
 8002afe:	bd70      	pop	{r4, r5, r6, pc}

08002b00 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart: UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b00:	b510      	push	{r4, lr}
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002b02:	4604      	mov	r4, r0
 8002b04:	b360      	cbz	r0, 8002b60 <HAL_UART_Init+0x60>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002b06:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8002b0a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002b0e:	b91b      	cbnz	r3, 8002b18 <HAL_UART_Init+0x18>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b10:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b14:	f000 fd52 	bl	80035bc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002b18:	6822      	ldr	r2, [r4, #0]

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1a:	2324      	movs	r3, #36	; 0x24
 8002b1c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002b20:	6813      	ldr	r3, [r2, #0]
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	6013      	str	r3, [r2, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b28:	4620      	mov	r0, r4
 8002b2a:	f7ff fd73 	bl	8002614 <UART_SetConfig>
 8002b2e:	2801      	cmp	r0, #1
 8002b30:	d016      	beq.n	8002b60 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002b34:	b113      	cbz	r3, 8002b3c <HAL_UART_Init+0x3c>
  {
    UART_AdvFeatureConfig(huart);
 8002b36:	4620      	mov	r0, r4
 8002b38:	f7ff fe68 	bl	800280c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3c:	6823      	ldr	r3, [r4, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b44:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b4c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	f042 0201 	orr.w	r2, r2, #1

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b54:	4620      	mov	r0, r4
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002b56:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
}
 8002b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b5c:	f7ff bf9c 	b.w	8002a98 <UART_CheckIdleState>
}
 8002b60:	2001      	movs	r0, #1
 8002b62:	bd10      	pop	{r4, pc}

08002b64 <config_EN.part.0>:
// Description: Sets or Resets the EN pins
// Parameters: flag to set or reset EN pin
// Return: None
void config_EN(int flag){
	if(flag){
		HAL_GPIO_WritePin(CONTROLPORT, EN_BIT, SET);
 8002b64:	2201      	movs	r2, #1
 8002b66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b6a:	4801      	ldr	r0, [pc, #4]	; (8002b70 <config_EN.part.0+0xc>)
 8002b6c:	f7fe bb2a 	b.w	80011c4 <HAL_GPIO_WritePin>
 8002b70:	48000c00 	.word	0x48000c00

08002b74 <GPIO_SetBits>:

GPIO_InitTypeDef  GPIO_InitStruct;


void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8002b74:	2201      	movs	r2, #1
 8002b76:	f7fe bb25 	b.w	80011c4 <HAL_GPIO_WritePin>

08002b7a <GPIO_ResetBits>:
}

void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) {
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	f7fe bb22 	b.w	80011c4 <HAL_GPIO_WritePin>

08002b80 <config_EN>:
// Name: config_EN
// Description: Sets or Resets the EN pins
// Parameters: flag to set or reset EN pin
// Return: None
void config_EN(int flag){
	if(flag){
 8002b80:	4602      	mov	r2, r0
 8002b82:	b108      	cbz	r0, 8002b88 <config_EN+0x8>
 8002b84:	f7ff bfee 	b.w	8002b64 <config_EN.part.0>
		HAL_GPIO_WritePin(CONTROLPORT, EN_BIT, SET);
	}
	else{
		HAL_GPIO_WritePin(CONTROLPORT, EN_BIT, RESET);
 8002b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b8c:	4801      	ldr	r0, [pc, #4]	; (8002b94 <config_EN+0x14>)
 8002b8e:	f7fe bb19 	b.w	80011c4 <HAL_GPIO_WritePin>
 8002b92:	bf00      	nop
 8002b94:	48000c00 	.word	0x48000c00

08002b98 <config_RS>:
// Name: config_RS
// Description: Sets or Resets the RS pins
// Parameters: flag to set or reset RS pin
// Return: None
void config_RS(int flag){
	if(flag){
 8002b98:	4602      	mov	r2, r0
 8002b9a:	b100      	cbz	r0, 8002b9e <config_RS+0x6>
		HAL_GPIO_WritePin(CONTROLPORT, RS_BIT, SET);
 8002b9c:	2201      	movs	r2, #1
	}
	else{
		HAL_GPIO_WritePin(CONTROLPORT, RS_BIT, RESET);
 8002b9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002ba2:	4801      	ldr	r0, [pc, #4]	; (8002ba8 <config_RS+0x10>)
 8002ba4:	f7fe bb0e 	b.w	80011c4 <HAL_GPIO_WritePin>
 8002ba8:	48000c00 	.word	0x48000c00

08002bac <config_RW>:
// Name: config_RW
// Description: Sets or Resets the RW pins
// Parameters: flag to set or reset RW pin
// Return: None
void config_RW(int flag){
	if(flag){
 8002bac:	4602      	mov	r2, r0
 8002bae:	b100      	cbz	r0, 8002bb2 <config_RW+0x6>
		HAL_GPIO_WritePin(CONTROLPORT, RW_BIT, SET);
 8002bb0:	2201      	movs	r2, #1
	}
	else{
		HAL_GPIO_WritePin(CONTROLPORT, RW_BIT, RESET);
 8002bb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002bb6:	4801      	ldr	r0, [pc, #4]	; (8002bbc <config_RW+0x10>)
 8002bb8:	f7fe bb04 	b.w	80011c4 <HAL_GPIO_WritePin>
 8002bbc:	48000c00 	.word	0x48000c00

08002bc0 <wr_lo_nibble>:
	write(data);
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void wr_lo_nibble(unsigned char data) {
 8002bc0:	b510      	push	{r4, lr}
 8002bc2:	4604      	mov	r4, r0
	if (data & 0x01) {
 8002bc4:	07e2      	lsls	r2, r4, #31
		GPIO_SetBits( DATAPORT, DATABIT4);
 8002bc6:	f04f 0110 	mov.w	r1, #16
 8002bca:	4817      	ldr	r0, [pc, #92]	; (8002c28 <wr_lo_nibble+0x68>)
}

#if HD44780_CONF_BUS == HD44780_FUNC_BUS_4BIT

void wr_lo_nibble(unsigned char data) {
	if (data & 0x01) {
 8002bcc:	d502      	bpl.n	8002bd4 <wr_lo_nibble+0x14>
		GPIO_SetBits( DATAPORT, DATABIT4);
 8002bce:	f7ff ffd1 	bl	8002b74 <GPIO_SetBits>
 8002bd2:	e001      	b.n	8002bd8 <wr_lo_nibble+0x18>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT4);
 8002bd4:	f7ff ffd1 	bl	8002b7a <GPIO_ResetBits>
	}
	if (data & 0x02) {
 8002bd8:	07a3      	lsls	r3, r4, #30
		GPIO_SetBits( DATAPORT, DATABIT5);
 8002bda:	f04f 0120 	mov.w	r1, #32
 8002bde:	4812      	ldr	r0, [pc, #72]	; (8002c28 <wr_lo_nibble+0x68>)
	if (data & 0x01) {
		GPIO_SetBits( DATAPORT, DATABIT4);
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT4);
	}
	if (data & 0x02) {
 8002be0:	d502      	bpl.n	8002be8 <wr_lo_nibble+0x28>
		GPIO_SetBits( DATAPORT, DATABIT5);
 8002be2:	f7ff ffc7 	bl	8002b74 <GPIO_SetBits>
 8002be6:	e001      	b.n	8002bec <wr_lo_nibble+0x2c>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT5);
 8002be8:	f7ff ffc7 	bl	8002b7a <GPIO_ResetBits>
	}
	if (data & 0x04) {
 8002bec:	0762      	lsls	r2, r4, #29
		GPIO_SetBits( DATAPORT, DATABIT6);
 8002bee:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002bf2:	480d      	ldr	r0, [pc, #52]	; (8002c28 <wr_lo_nibble+0x68>)
	if (data & 0x02) {
		GPIO_SetBits( DATAPORT, DATABIT5);
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT5);
	}
	if (data & 0x04) {
 8002bf4:	d502      	bpl.n	8002bfc <wr_lo_nibble+0x3c>
		GPIO_SetBits( DATAPORT, DATABIT6);
 8002bf6:	f7ff ffbd 	bl	8002b74 <GPIO_SetBits>
 8002bfa:	e001      	b.n	8002c00 <wr_lo_nibble+0x40>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT6);
 8002bfc:	f7ff ffbd 	bl	8002b7a <GPIO_ResetBits>
	}
	if (data & 0x08) {
 8002c00:	0723      	lsls	r3, r4, #28
		GPIO_SetBits( DATAPORT, DATABIT7);
 8002c02:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002c06:	4808      	ldr	r0, [pc, #32]	; (8002c28 <wr_lo_nibble+0x68>)
	if (data & 0x04) {
		GPIO_SetBits( DATAPORT, DATABIT6);
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT6);
	}
	if (data & 0x08) {
 8002c08:	d502      	bpl.n	8002c10 <wr_lo_nibble+0x50>
		GPIO_SetBits( DATAPORT, DATABIT7);
 8002c0a:	f7ff ffb3 	bl	8002b74 <GPIO_SetBits>
 8002c0e:	e001      	b.n	8002c14 <wr_lo_nibble+0x54>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT7);
 8002c10:	f7ff ffb3 	bl	8002b7a <GPIO_ResetBits>
 8002c14:	f7ff ffa6 	bl	8002b64 <config_EN.part.0>

	/* set the EN signal */
	config_EN(1);

	/* wait */
	HAL_Delay(10);
 8002c18:	200a      	movs	r0, #10
 8002c1a:	f7fe f981 	bl	8000f20 <HAL_Delay>

	/* reset the EN signal */
	config_EN(0);
 8002c1e:	2000      	movs	r0, #0
}
 8002c20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	/* wait */
	HAL_Delay(10);

	/* reset the EN signal */
	config_EN(0);
 8002c24:	f7ff bfac 	b.w	8002b80 <config_EN>
 8002c28:	48000c00 	.word	0x48000c00

08002c2c <wr_hi_nibble>:
	wr_lo_nibble(data);
}
#endif /* CONF_BUS == FUNC_BUS_4BIT */


void wr_hi_nibble(unsigned char data) {
 8002c2c:	b510      	push	{r4, lr}
 8002c2e:	4604      	mov	r4, r0
	if (data & 0x10) {
 8002c30:	06e2      	lsls	r2, r4, #27
		GPIO_SetBits( DATAPORT, DATABIT4);
 8002c32:	f04f 0110 	mov.w	r1, #16
 8002c36:	4817      	ldr	r0, [pc, #92]	; (8002c94 <wr_hi_nibble+0x68>)
}
#endif /* CONF_BUS == FUNC_BUS_4BIT */


void wr_hi_nibble(unsigned char data) {
	if (data & 0x10) {
 8002c38:	d502      	bpl.n	8002c40 <wr_hi_nibble+0x14>
		GPIO_SetBits( DATAPORT, DATABIT4);
 8002c3a:	f7ff ff9b 	bl	8002b74 <GPIO_SetBits>
 8002c3e:	e001      	b.n	8002c44 <wr_hi_nibble+0x18>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT4);
 8002c40:	f7ff ff9b 	bl	8002b7a <GPIO_ResetBits>
	}
	if (data & 0x20) {
 8002c44:	06a3      	lsls	r3, r4, #26
		GPIO_SetBits( DATAPORT, DATABIT5);
 8002c46:	f04f 0120 	mov.w	r1, #32
 8002c4a:	4812      	ldr	r0, [pc, #72]	; (8002c94 <wr_hi_nibble+0x68>)
	if (data & 0x10) {
		GPIO_SetBits( DATAPORT, DATABIT4);
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT4);
	}
	if (data & 0x20) {
 8002c4c:	d502      	bpl.n	8002c54 <wr_hi_nibble+0x28>
		GPIO_SetBits( DATAPORT, DATABIT5);
 8002c4e:	f7ff ff91 	bl	8002b74 <GPIO_SetBits>
 8002c52:	e001      	b.n	8002c58 <wr_hi_nibble+0x2c>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT5);
 8002c54:	f7ff ff91 	bl	8002b7a <GPIO_ResetBits>
	}
	if (data & 0x40) {
 8002c58:	0662      	lsls	r2, r4, #25
		GPIO_SetBits( DATAPORT, DATABIT6);
 8002c5a:	f04f 0140 	mov.w	r1, #64	; 0x40
 8002c5e:	480d      	ldr	r0, [pc, #52]	; (8002c94 <wr_hi_nibble+0x68>)
	if (data & 0x20) {
		GPIO_SetBits( DATAPORT, DATABIT5);
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT5);
	}
	if (data & 0x40) {
 8002c60:	d502      	bpl.n	8002c68 <wr_hi_nibble+0x3c>
		GPIO_SetBits( DATAPORT, DATABIT6);
 8002c62:	f7ff ff87 	bl	8002b74 <GPIO_SetBits>
 8002c66:	e001      	b.n	8002c6c <wr_hi_nibble+0x40>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT6);
 8002c68:	f7ff ff87 	bl	8002b7a <GPIO_ResetBits>
	}
	if (data & 0x80) {
 8002c6c:	0623      	lsls	r3, r4, #24
		GPIO_SetBits( DATAPORT, DATABIT7);
 8002c6e:	f04f 0180 	mov.w	r1, #128	; 0x80
 8002c72:	4808      	ldr	r0, [pc, #32]	; (8002c94 <wr_hi_nibble+0x68>)
	if (data & 0x40) {
		GPIO_SetBits( DATAPORT, DATABIT6);
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT6);
	}
	if (data & 0x80) {
 8002c74:	d502      	bpl.n	8002c7c <wr_hi_nibble+0x50>
		GPIO_SetBits( DATAPORT, DATABIT7);
 8002c76:	f7ff ff7d 	bl	8002b74 <GPIO_SetBits>
 8002c7a:	e001      	b.n	8002c80 <wr_hi_nibble+0x54>
	} else {
		GPIO_ResetBits( DATAPORT, DATABIT7);
 8002c7c:	f7ff ff7d 	bl	8002b7a <GPIO_ResetBits>
 8002c80:	f7ff ff70 	bl	8002b64 <config_EN.part.0>
	}

	/* set the EN signal */
	config_EN(1);
	/* wait */
	HAL_Delay(10);
 8002c84:	200a      	movs	r0, #10
 8002c86:	f7fe f94b 	bl	8000f20 <HAL_Delay>

	/* reset the EN signal */
	config_EN(0);
 8002c8a:	2000      	movs	r0, #0
}
 8002c8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	config_EN(1);
	/* wait */
	HAL_Delay(10);

	/* reset the EN signal */
	config_EN(0);
 8002c90:	f7ff bf76 	b.w	8002b80 <config_EN>
 8002c94:	48000c00 	.word	0x48000c00

08002c98 <write>:
}



/* 4bit bus version */
void write(unsigned char data) {
 8002c98:	b510      	push	{r4, lr}
 8002c9a:	4604      	mov	r4, r0
	/* send the data bits - high nibble first */
	wr_hi_nibble(data);
 8002c9c:	f7ff ffc6 	bl	8002c2c <wr_hi_nibble>
	wr_lo_nibble(data);
 8002ca0:	4620      	mov	r0, r4
}
 8002ca2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* 4bit bus version */
void write(unsigned char data) {
	/* send the data bits - high nibble first */
	wr_hi_nibble(data);
	wr_lo_nibble(data);
 8002ca6:	f7ff bf8b 	b.w	8002bc0 <wr_lo_nibble>

08002caa <wr_cmd>:
}


/*................................. Function used from the CooCox HD44780 library ............................*/

void wr_cmd(unsigned char cmd) {
 8002caa:	b510      	push	{r4, lr}
 8002cac:	4604      	mov	r4, r0
	config_RS(0);
 8002cae:	2000      	movs	r0, #0
 8002cb0:	f7ff ff72 	bl	8002b98 <config_RS>
	write(cmd);
 8002cb4:	4620      	mov	r0, r4
}
 8002cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/*................................. Function used from the CooCox HD44780 library ............................*/

void wr_cmd(unsigned char cmd) {
	config_RS(0);
	write(cmd);
 8002cba:	f7ff bfed 	b.w	8002c98 <write>
	...

08002cc0 <wr_data>:
}

void wr_data(unsigned char data) {
 8002cc0:	b510      	push	{r4, lr}
// Description: Sets or Resets the RS pins
// Parameters: flag to set or reset RS pin
// Return: None
void config_RS(int flag){
	if(flag){
		HAL_GPIO_WritePin(CONTROLPORT, RS_BIT, SET);
 8002cc2:	2201      	movs	r2, #1
void wr_cmd(unsigned char cmd) {
	config_RS(0);
	write(cmd);
}

void wr_data(unsigned char data) {
 8002cc4:	4604      	mov	r4, r0
// Description: Sets or Resets the RS pins
// Parameters: flag to set or reset RS pin
// Return: None
void config_RS(int flag){
	if(flag){
		HAL_GPIO_WritePin(CONTROLPORT, RS_BIT, SET);
 8002cc6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002cca:	4804      	ldr	r0, [pc, #16]	; (8002cdc <wr_data+0x1c>)
 8002ccc:	f7fe fa7a 	bl	80011c4 <HAL_GPIO_WritePin>
	write(cmd);
}

void wr_data(unsigned char data) {
	config_RS(1);
	write(data);
 8002cd0:	4620      	mov	r0, r4
}
 8002cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	write(cmd);
}

void wr_data(unsigned char data) {
	config_RS(1);
	write(data);
 8002cd6:	f7ff bfdf 	b.w	8002c98 <write>
 8002cda:	bf00      	nop
 8002cdc:	48000c00 	.word	0x48000c00

08002ce0 <Init>:

// Name: Init
// Description: Initializes the peripherals for LCD44780
// Parameters: None
// Return: None
void Init(){
 8002ce0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}

	//Enableing periferals for HD44780
	__GPIOD_CLK_ENABLE();
 8002ce4:	4e32      	ldr	r6, [pc, #200]	; (8002db0 <Init+0xd0>)
	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStruct.Pin = DATABIT7 | DATABIT6 | DATABIT5 | DATABIT4;
 8002ce6:	4c33      	ldr	r4, [pc, #204]	; (8002db4 <Init+0xd4>)
// Parameters: None
// Return: None
void Init(){

	//Enableing periferals for HD44780
	__GPIOD_CLK_ENABLE();
 8002ce8:	6973      	ldr	r3, [r6, #20]
	GPIO_InitStruct.Pin = DATABIT7 | DATABIT6 | DATABIT5 | DATABIT4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(DATAPORT, &GPIO_InitStruct);
 8002cea:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 8002db8 <Init+0xd8>
// Parameters: None
// Return: None
void Init(){

	//Enableing periferals for HD44780
	__GPIOD_CLK_ENABLE();
 8002cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cf2:	6173      	str	r3, [r6, #20]
 8002cf4:	6973      	ldr	r3, [r6, #20]
 8002cf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cfa:	9300      	str	r3, [sp, #0]
	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStruct.Pin = DATABIT7 | DATABIT6 | DATABIT5 | DATABIT4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002cfc:	2501      	movs	r5, #1
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002cfe:	2703      	movs	r7, #3
// Parameters: None
// Return: None
void Init(){

	//Enableing periferals for HD44780
	__GPIOD_CLK_ENABLE();
 8002d00:	9b00      	ldr	r3, [sp, #0]
	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStruct.Pin = DATABIT7 | DATABIT6 | DATABIT5 | DATABIT4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d02:	60a5      	str	r5, [r4, #8]

	//Enableing periferals for HD44780
	__GPIOD_CLK_ENABLE();
	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStruct.Pin = DATABIT7 | DATABIT6 | DATABIT5 | DATABIT4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d04:	23f0      	movs	r3, #240	; 0xf0
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(DATAPORT, &GPIO_InitStruct);
 8002d06:	4621      	mov	r1, r4
 8002d08:	4640      	mov	r0, r8

	//Enableing periferals for HD44780
	__GPIOD_CLK_ENABLE();
	/* Configure the HD44780 Data lines (DB7 - DB4) as outputs*/
	GPIO_InitStruct.Pin = DATABIT7 | DATABIT6 | DATABIT5 | DATABIT4;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d0a:	e884 0028 	stmia.w	r4, {r3, r5}
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002d0e:	60e7      	str	r7, [r4, #12]

	HAL_GPIO_Init(DATAPORT, &GPIO_InitStruct);
 8002d10:	f7fe f98e 	bl	8001030 <HAL_GPIO_Init>


	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStruct.Pin = RS_BIT | RW_BIT | EN_BIT;
 8002d14:	f44f 63e0 	mov.w	r3, #1792	; 0x700
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;

	HAL_GPIO_Init(CONTROLPORT, &GPIO_InitStruct);
 8002d18:	4621      	mov	r1, r4
 8002d1a:	4640      	mov	r0, r8
	HAL_GPIO_Init(DATAPORT, &GPIO_InitStruct);


	/* Configure the HD44780 Control lines (RS, RW, EN) as outputs*/
	GPIO_InitStruct.Pin = RS_BIT | RW_BIT | EN_BIT;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d1c:	e884 0028 	stmia.w	r4, {r3, r5}
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d20:	60a5      	str	r5, [r4, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002d22:	60e7      	str	r7, [r4, #12]

	HAL_GPIO_Init(CONTROLPORT, &GPIO_InitStruct);
 8002d24:	f7fe f984 	bl	8001030 <HAL_GPIO_Init>


	/*Enabling priferal for LCD backlit*/
	 __GPIOA_CLK_ENABLE();
 8002d28:	6973      	ldr	r3, [r6, #20]
 8002d2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d2e:	6173      	str	r3, [r6, #20]
 8002d30:	6973      	ldr	r3, [r6, #20]

    /*Configure the GPIOA PIN 10 for backlit*/
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d32:	60a5      	str	r5, [r4, #8]

	HAL_GPIO_Init(CONTROLPORT, &GPIO_InitStruct);


	/*Enabling priferal for LCD backlit*/
	 __GPIOA_CLK_ENABLE();
 8002d34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d38:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 0;

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	4621      	mov	r1, r4
    /*Configure the GPIOA PIN 10 for backlit*/
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 0;
 8002d3c:	2600      	movs	r6, #0

	HAL_GPIO_Init(CONTROLPORT, &GPIO_InitStruct);


	/*Enabling priferal for LCD backlit*/
	 __GPIOA_CLK_ENABLE();
 8002d3e:	9b01      	ldr	r3, [sp, #4]

    /*Configure the GPIOA PIN 10 for backlit*/
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002d40:	60e7      	str	r7, [r4, #12]

	/*Enabling priferal for LCD backlit*/
	 __GPIOA_CLK_ENABLE();

    /*Configure the GPIOA PIN 10 for backlit*/
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
 8002d42:	f44f 6380 	mov.w	r3, #1024	; 0x400
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 0;

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
	/*Enabling priferal for LCD backlit*/
	 __GPIOA_CLK_ENABLE();

    /*Configure the GPIOA PIN 10 for backlit*/
    GPIO_InitStruct.Pin = (GPIO_PIN_10);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002d4a:	e884 0028 	stmia.w	r4, {r3, r5}
	GPIO_InitStruct.Pull = GPIO_PULLUP;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
    GPIO_InitStruct.Alternate = 0;
 8002d4e:	6126      	str	r6, [r4, #16]

    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d50:	f7fe f96e 	bl	8001030 <HAL_GPIO_Init>

    /* clear control bits */
	config_EN(0);
 8002d54:	4630      	mov	r0, r6
 8002d56:	f7ff ff13 	bl	8002b80 <config_EN>
	config_RS(0);
 8002d5a:	4630      	mov	r0, r6
 8002d5c:	f7ff ff1c 	bl	8002b98 <config_RS>
	config_RW(0);
 8002d60:	4630      	mov	r0, r6
 8002d62:	f7ff ff23 	bl	8002bac <config_RW>
	
	/* wait initial delay for LCD to settle */
	/* reset procedure - 3 function calls resets the device */
	HAL_Delay(10);
 8002d66:	200a      	movs	r0, #10
 8002d68:	f7fe f8da 	bl	8000f20 <HAL_Delay>
	wr_hi_nibble( CMD_RESET);
 8002d6c:	2030      	movs	r0, #48	; 0x30
 8002d6e:	f7ff ff5d 	bl	8002c2c <wr_hi_nibble>
	HAL_Delay(10);
 8002d72:	200a      	movs	r0, #10
 8002d74:	f7fe f8d4 	bl	8000f20 <HAL_Delay>
	wr_hi_nibble( CMD_RESET);
 8002d78:	2030      	movs	r0, #48	; 0x30
 8002d7a:	f7ff ff57 	bl	8002c2c <wr_hi_nibble>
	HAL_Delay(10);
 8002d7e:	200a      	movs	r0, #10
 8002d80:	f7fe f8ce 	bl	8000f20 <HAL_Delay>
	wr_hi_nibble( CMD_RESET);
 8002d84:	2030      	movs	r0, #48	; 0x30
 8002d86:	f7ff ff51 	bl	8002c2c <wr_hi_nibble>

	#if CONF_BUS == FUNC_BUS_4BIT
	/* 4bit interface */
	wr_hi_nibble( CMD_FUNCTION);
 8002d8a:	2020      	movs	r0, #32
 8002d8c:	f7ff ff4e 	bl	8002c2c <wr_hi_nibble>
	#endif /* CONF_BUS == FUNC_BUS_4BIT */

	/* sets the configured values - can be set again only after reset */
	function(CONF_BUS, CONF_LINES, CONF_FONT);
 8002d90:	2028      	movs	r0, #40	; 0x28
 8002d92:	f7ff ff8a 	bl	8002caa <wr_cmd>

	/* clear the display */
	clear();
 8002d96:	4628      	mov	r0, r5
 8002d98:	f7ff ff87 	bl	8002caa <wr_cmd>

	/* turn the display on with no cursor or blinking */

	display(DISP_ON, DISP_CURS_OFF, DISP_BLINK_OFF);
 8002d9c:	200c      	movs	r0, #12
 8002d9e:	f7ff ff84 	bl	8002caa <wr_cmd>

	/* addr increment, shift cursor */
	entry(ENTRY_ADDR_INC, ENTRY_SHIFT_CURS);
 8002da2:	2006      	movs	r0, #6
 8002da4:	f7ff ff81 	bl	8002caa <wr_cmd>
}
 8002da8:	b002      	add	sp, #8
 8002daa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002dae:	bf00      	nop
 8002db0:	40021000 	.word	0x40021000
 8002db4:	200005d4 	.word	0x200005d4
 8002db8:	48000c00 	.word	0x48000c00

08002dbc <display_cursor>:
// Name: display_cursor
// Description: show and hide the cursor
// Parameters: cursor state
// Return: None
void display_cursor(int status){
	if (status == 1){
 8002dbc:	2801      	cmp	r0, #1
		display(DISP_ON, DISP_CURS_ON, DISP_BLINK_ON);
 8002dbe:	bf0c      	ite	eq
 8002dc0:	200f      	moveq	r0, #15
	}
	else{
		display(DISP_ON, DISP_CURS_OFF, DISP_BLINK_OFF);
 8002dc2:	200c      	movne	r0, #12
 8002dc4:	f7ff bf71 	b.w	8002caa <wr_cmd>

08002dc8 <ClrScr>:
// Name: ClrScr 
// Description: clears screen
// Parameters: None
// Return: None
void ClrScr(void) {
	wr_cmd(CMD_CLEAR);
 8002dc8:	2001      	movs	r0, #1
 8002dca:	f7ff bf6e 	b.w	8002caa <wr_cmd>

08002dce <PutStr>:

// Name: PutStr
// Description: Prints a string at the current character cursor position
// Parameters: string
// Return: None
void PutStr(char *str) {
 8002dce:	b513      	push	{r0, r1, r4, lr}
	__IO unsigned int i = 0;
 8002dd0:	2300      	movs	r3, #0

// Name: PutStr
// Description: Prints a string at the current character cursor position
// Parameters: string
// Return: None
void PutStr(char *str) {
 8002dd2:	4604      	mov	r4, r0
	__IO unsigned int i = 0;
 8002dd4:	9301      	str	r3, [sp, #4]

	do {
		PutChar(str[i]);
 8002dd6:	9b01      	ldr	r3, [sp, #4]
// Name: PutChar
// Description: Prints a character at the current character cursor position
// Parameters: unsigned char to be displayed
// Return: None
void PutChar(unsigned char c) {
	wr_data(c & 0xff);
 8002dd8:	5ce0      	ldrb	r0, [r4, r3]
 8002dda:	f7ff ff71 	bl	8002cc0 <wr_data>
void PutStr(char *str) {
	__IO unsigned int i = 0;

	do {
		PutChar(str[i]);
		i++;
 8002dde:	9b01      	ldr	r3, [sp, #4]
 8002de0:	3301      	adds	r3, #1
 8002de2:	9301      	str	r3, [sp, #4]
	} while (str[i] != '\0');
 8002de4:	9b01      	ldr	r3, [sp, #4]
 8002de6:	5ce3      	ldrb	r3, [r4, r3]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d1f4      	bne.n	8002dd6 <PutStr+0x8>
}
 8002dec:	b002      	add	sp, #8
 8002dee:	bd10      	pop	{r4, pc}

08002df0 <GotoXY>:

	if (x > (DISP_LENGTH - 1))
		x = 0;

	if (y > (DISP_ROWS - 1))
		y = 0;
 8002df0:	2901      	cmp	r1, #1
 8002df2:	bf88      	it	hi
 8002df4:	2100      	movhi	r1, #0
 8002df6:	4b04      	ldr	r3, [pc, #16]	; (8002e08 <GotoXY+0x18>)
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	wr_cmd(x + copy_y);
 8002df8:	5c5b      	ldrb	r3, [r3, r1]
// Return: None
void GotoXY(unsigned char x, unsigned char y) {
	unsigned char copy_y = 0;

	if (x > (DISP_LENGTH - 1))
		x = 0;
 8002dfa:	280f      	cmp	r0, #15
 8002dfc:	bf88      	it	hi
 8002dfe:	2000      	movhi	r0, #0
		break;
	case 3:
		copy_y = 0xd4;
		break;
	}
	wr_cmd(x + copy_y);
 8002e00:	4418      	add	r0, r3
 8002e02:	b2c0      	uxtb	r0, r0
 8002e04:	f7ff bf51 	b.w	8002caa <wr_cmd>
 8002e08:	0800719e 	.word	0x0800719e

08002e0c <dcRun.part.0>:
/*Name: dcRun
 *Description: Starts the motor to run
 *Parameter: direction for the motor
 *Return: None
 * */
void dcRun( int dir ){
 8002e0c:	b510      	push	{r4, lr}
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_SET); //disable the motor
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
	}
	//reverse direction
	if(dir == 2){
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_SET); //enable the motor
 8002e0e:	4c08      	ldr	r4, [pc, #32]	; (8002e30 <dcRun.part.0+0x24>)
 8002e10:	2201      	movs	r2, #1
 8002e12:	4620      	mov	r0, r4
 8002e14:	2104      	movs	r1, #4
 8002e16:	f7fe f9d5 	bl	80011c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET); //disable the motor
 8002e1a:	4620      	mov	r0, r4
 8002e1c:	2110      	movs	r1, #16
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f7fe f9d0 	bl	80011c4 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002e24:	2100      	movs	r1, #0
 8002e26:	4803      	ldr	r0, [pc, #12]	; (8002e34 <dcRun.part.0+0x28>)
	}
	return;
}
 8002e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	}
	//reverse direction
	if(dir == 2){
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_SET); //enable the motor
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET); //disable the motor
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002e2c:	f7ff ba78 	b.w	8002320 <HAL_TIM_PWM_Start>
 8002e30:	48001400 	.word	0x48001400
 8002e34:	20000730 	.word	0x20000730

08002e38 <ledInit>:
 *Return: None
 * */

/*Initializing GPIOE pins for led*/
void ledInit(){
	__GPIOE_CLK_ENABLE();
 8002e38:	4b0d      	ldr	r3, [pc, #52]	; (8002e70 <ledInit+0x38>)
 *Parameter: None
 *Return: None
 * */

/*Initializing GPIOE pins for led*/
void ledInit(){
 8002e3a:	b507      	push	{r0, r1, r2, lr}
	__GPIOE_CLK_ENABLE();
 8002e3c:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Pin = ( GPIO_PIN_8 |GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 );
 8002e3e:	490d      	ldr	r1, [pc, #52]	; (8002e74 <ledInit+0x3c>)
 *Return: None
 * */

/*Initializing GPIOE pins for led*/
void ledInit(){
	__GPIOE_CLK_ENABLE();
 8002e40:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002e44:	615a      	str	r2, [r3, #20]
 8002e46:	695b      	ldr	r3, [r3, #20]
 8002e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e4c:	9301      	str	r3, [sp, #4]
 8002e4e:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStruct.Pin = ( GPIO_PIN_8 |GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 );
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e50:	f44f 407f 	mov.w	r0, #65280	; 0xff00
 8002e54:	2301      	movs	r3, #1
 8002e56:	e881 0009 	stmia.w	r1, {r0, r3}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002e5a:	2203      	movs	r2, #3
/*Initializing GPIOE pins for led*/
void ledInit(){
	__GPIOE_CLK_ENABLE();
	GPIO_InitStruct.Pin = ( GPIO_PIN_8 |GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 );
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5c:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = 0;
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e5e:	4806      	ldr	r0, [pc, #24]	; (8002e78 <ledInit+0x40>)
/*Initializing GPIOE pins for led*/
void ledInit(){
	__GPIOE_CLK_ENABLE();
	GPIO_InitStruct.Pin = ( GPIO_PIN_8 |GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15 );
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e60:	608b      	str	r3, [r1, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002e62:	60ca      	str	r2, [r1, #12]
	GPIO_InitStruct.Alternate = 0;
 8002e64:	610b      	str	r3, [r1, #16]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002e66:	f7fe f8e3 	bl	8001030 <HAL_GPIO_Init>
}
 8002e6a:	b003      	add	sp, #12
 8002e6c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002e70:	40021000 	.word	0x40021000
 8002e74:	200005d4 	.word	0x200005d4
 8002e78:	48001000 	.word	0x48001000

08002e7c <dcRun>:
 *Parameter: direction for the motor
 *Return: None
 * */
void dcRun( int dir ){
	//Forward direction
	if(dir == 1){
 8002e7c:	2801      	cmp	r0, #1
/*Name: dcRun
 *Description: Starts the motor to run
 *Parameter: direction for the motor
 *Return: None
 * */
void dcRun( int dir ){
 8002e7e:	b510      	push	{r4, lr}
 8002e80:	4604      	mov	r4, r0
	//Forward direction
	if(dir == 1){
 8002e82:	d10f      	bne.n	8002ea4 <dcRun+0x28>
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET); //enable the motor
 8002e84:	2200      	movs	r2, #0
 8002e86:	2104      	movs	r1, #4
 8002e88:	480a      	ldr	r0, [pc, #40]	; (8002eb4 <dcRun+0x38>)
 8002e8a:	f7fe f99b 	bl	80011c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_SET); //disable the motor
 8002e8e:	4622      	mov	r2, r4
 8002e90:	2110      	movs	r1, #16
 8002e92:	4808      	ldr	r0, [pc, #32]	; (8002eb4 <dcRun+0x38>)
 8002e94:	f7fe f996 	bl	80011c4 <HAL_GPIO_WritePin>
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002e98:	2100      	movs	r1, #0
 8002e9a:	4807      	ldr	r0, [pc, #28]	; (8002eb8 <dcRun+0x3c>)
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_SET); //enable the motor
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET); //disable the motor
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
	}
	return;
}
 8002e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void dcRun( int dir ){
	//Forward direction
	if(dir == 1){
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET); //enable the motor
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_SET); //disable the motor
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8002ea0:	f7ff ba3e 	b.w	8002320 <HAL_TIM_PWM_Start>
	}
	//reverse direction
	if(dir == 2){
 8002ea4:	2802      	cmp	r0, #2
 8002ea6:	d103      	bne.n	8002eb0 <dcRun+0x34>
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_SET); //enable the motor
		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET); //disable the motor
		HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
	}
	return;
}
 8002ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002eac:	f7ff bfae 	b.w	8002e0c <dcRun.part.0>
 8002eb0:	bd10      	pop	{r4, pc}
 8002eb2:	bf00      	nop
 8002eb4:	48001400 	.word	0x48001400
 8002eb8:	20000730 	.word	0x20000730

08002ebc <writeLed>:
/* Name: writeLed
 * Description: Changes the state of the LED
 * Parameters: LED number and its state (0 or 1)
 *Return: None
 */
void writeLed(int led, int state ){
 8002ebc:	b4f0      	push	{r4, r5, r6, r7}
	const uint32_t LEDs[] = { GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
 8002ebe:	4d0b      	ldr	r5, [pc, #44]	; (8002eec <writeLed+0x30>)
/* Name: writeLed
 * Description: Changes the state of the LED
 * Parameters: LED number and its state (0 or 1)
 *Return: None
 */
void writeLed(int led, int state ){
 8002ec0:	460f      	mov	r7, r1
 8002ec2:	4606      	mov	r6, r0
	const uint32_t LEDs[] = { GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
 8002ec4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
/* Name: writeLed
 * Description: Changes the state of the LED
 * Parameters: LED number and its state (0 or 1)
 *Return: None
 */
void writeLed(int led, int state ){
 8002ec6:	b088      	sub	sp, #32
	const uint32_t LEDs[] = { GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};
 8002ec8:	466c      	mov	r4, sp
 8002eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ecc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ed0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	HAL_GPIO_WritePin(GPIOE, LEDs[led], state);	//write in the GPIO pin; turn 'on' and 'off' the LEDs.
 8002ed4:	ab08      	add	r3, sp, #32
 8002ed6:	eb03 0686 	add.w	r6, r3, r6, lsl #2
 8002eda:	4805      	ldr	r0, [pc, #20]	; (8002ef0 <writeLed+0x34>)
 8002edc:	f836 1c20 	ldrh.w	r1, [r6, #-32]
 8002ee0:	b2fa      	uxtb	r2, r7
}
 8002ee2:	b008      	add	sp, #32
 8002ee4:	bcf0      	pop	{r4, r5, r6, r7}
 *Return: None
 */
void writeLed(int led, int state ){
	const uint32_t LEDs[] = { GPIO_PIN_8, GPIO_PIN_9, GPIO_PIN_10, GPIO_PIN_11, GPIO_PIN_12, GPIO_PIN_13, GPIO_PIN_14, GPIO_PIN_15};

	HAL_GPIO_WritePin(GPIOE, LEDs[led], state);	//write in the GPIO pin; turn 'on' and 'off' the LEDs.
 8002ee6:	f7fe b96d 	b.w	80011c4 <HAL_GPIO_WritePin>
 8002eea:	bf00      	nop
 8002eec:	08007150 	.word	0x08007150
 8002ef0:	48001000 	.word	0x48001000

08002ef4 <ledToggle>:
/*Name: ledToggle
 *Description: toggles led in a pattern
 *Parameter: None
 *Return: None
 * */
void ledToggle(){
 8002ef4:	b538      	push	{r3, r4, r5, lr}
  static int k = 7 ; //holds LED position to turn off
  static int onOffFlag = 1; //set the on and off pattern of LEDs


	// Turns on LEDs
	if(l < 8 && onOffFlag == 1) {
 8002ef6:	4d15      	ldr	r5, [pc, #84]	; (8002f4c <ledToggle+0x58>)
 8002ef8:	6828      	ldr	r0, [r5, #0]
 8002efa:	2807      	cmp	r0, #7
 8002efc:	dc08      	bgt.n	8002f10 <ledToggle+0x1c>
 8002efe:	4b14      	ldr	r3, [pc, #80]	; (8002f50 <ledToggle+0x5c>)
 8002f00:	6819      	ldr	r1, [r3, #0]
 8002f02:	2901      	cmp	r1, #1
 8002f04:	d104      	bne.n	8002f10 <ledToggle+0x1c>
		writeLed(l, 1 );
 8002f06:	f7ff ffd9 	bl	8002ebc <writeLed>
	  l++;
 8002f0a:	682b      	ldr	r3, [r5, #0]
 8002f0c:	3301      	adds	r3, #1
 8002f0e:	602b      	str	r3, [r5, #0]
	}
	// Turns off LEDs
	if( k >=0 && onOffFlag == 0){
 8002f10:	4c10      	ldr	r4, [pc, #64]	; (8002f54 <ledToggle+0x60>)
 8002f12:	6820      	ldr	r0, [r4, #0]
 8002f14:	2800      	cmp	r0, #0
 8002f16:	db07      	blt.n	8002f28 <ledToggle+0x34>
 8002f18:	4b0d      	ldr	r3, [pc, #52]	; (8002f50 <ledToggle+0x5c>)
 8002f1a:	6819      	ldr	r1, [r3, #0]
 8002f1c:	b921      	cbnz	r1, 8002f28 <ledToggle+0x34>
		writeLed(k, 0);
 8002f1e:	f7ff ffcd 	bl	8002ebc <writeLed>
	  k--;
 8002f22:	6823      	ldr	r3, [r4, #0]
 8002f24:	3b01      	subs	r3, #1
 8002f26:	6023      	str	r3, [r4, #0]
	}

	//resetting led number
	if(l >= 8){
 8002f28:	682b      	ldr	r3, [r5, #0]
 8002f2a:	2b07      	cmp	r3, #7
 8002f2c:	dd04      	ble.n	8002f38 <ledToggle+0x44>
	  l = 0;
 8002f2e:	4a07      	ldr	r2, [pc, #28]	; (8002f4c <ledToggle+0x58>)
 8002f30:	2300      	movs	r3, #0
 8002f32:	6013      	str	r3, [r2, #0]
	  onOffFlag = 0;
 8002f34:	4a06      	ldr	r2, [pc, #24]	; (8002f50 <ledToggle+0x5c>)
 8002f36:	6013      	str	r3, [r2, #0]
	}
	if(k<0){
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	da05      	bge.n	8002f4a <ledToggle+0x56>
	  k = 7;
 8002f3e:	4b05      	ldr	r3, [pc, #20]	; (8002f54 <ledToggle+0x60>)
 8002f40:	2207      	movs	r2, #7
 8002f42:	601a      	str	r2, [r3, #0]
	  onOffFlag = 1;
 8002f44:	4b02      	ldr	r3, [pc, #8]	; (8002f50 <ledToggle+0x5c>)
 8002f46:	2201      	movs	r2, #1
 8002f48:	601a      	str	r2, [r3, #0]
 8002f4a:	bd38      	pop	{r3, r4, r5, pc}
 8002f4c:	20000590 	.word	0x20000590
 8002f50:	20000004 	.word	0x20000004
 8002f54:	20000000 	.word	0x20000000

08002f58 <dcStop>:
/*Name: dcStop
 *Description: Stops the motor
 *Parameter: None
 *Return: None
 * */
void dcStop( ){
 8002f58:	b510      	push	{r4, lr}
    HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET); //disable the motor
 8002f5a:	4c08      	ldr	r4, [pc, #32]	; (8002f7c <dcStop+0x24>)
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	4620      	mov	r0, r4
 8002f60:	2104      	movs	r1, #4
 8002f62:	f7fe f92f 	bl	80011c4 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET); //disable the motor
 8002f66:	4620      	mov	r0, r4
 8002f68:	2110      	movs	r1, #16
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	f7fe f92a 	bl	80011c4 <HAL_GPIO_WritePin>
    HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8002f70:	2100      	movs	r1, #0
 8002f72:	4803      	ldr	r0, [pc, #12]	; (8002f80 <dcStop+0x28>)
    return;
}
 8002f74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 *Return: None
 * */
void dcStop( ){
    HAL_GPIO_WritePin(GPIOF,GPIO_PIN_2,GPIO_PIN_RESET); //disable the motor
    HAL_GPIO_WritePin(GPIOF,GPIO_PIN_4,GPIO_PIN_RESET); //disable the motor
    HAL_TIM_PWM_Stop(&htim1,TIM_CHANNEL_1);
 8002f78:	f7ff b9f8 	b.w	800236c <HAL_TIM_PWM_Stop>
 8002f7c:	48001400 	.word	0x48001400
 8002f80:	20000730 	.word	0x20000730

08002f84 <dcInit>:
 *Description: Initializes peripherals for DC motor
 *Parameter: None
 *Return: None
 * */
void dcInit( ){
	__GPIOF_CLK_ENABLE();
 8002f84:	4b0d      	ldr	r3, [pc, #52]	; (8002fbc <dcInit+0x38>)
/*Name: dcInit
 *Description: Initializes peripherals for DC motor
 *Parameter: None
 *Return: None
 * */
void dcInit( ){
 8002f86:	b507      	push	{r0, r1, r2, lr}
	__GPIOF_CLK_ENABLE();
 8002f88:	695a      	ldr	r2, [r3, #20]
	 /*Configure GPIO pins for PF2 and PF4*/
	GPIO_InitStruct.Pin = (GPIO_PIN_2 | GPIO_PIN_4);
 8002f8a:	490d      	ldr	r1, [pc, #52]	; (8002fc0 <dcInit+0x3c>)
 *Description: Initializes peripherals for DC motor
 *Parameter: None
 *Return: None
 * */
void dcInit( ){
	__GPIOF_CLK_ENABLE();
 8002f8c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002f90:	615a      	str	r2, [r3, #20]
 8002f92:	695b      	ldr	r3, [r3, #20]
 8002f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	9b01      	ldr	r3, [sp, #4]
	 /*Configure GPIO pins for PF2 and PF4*/
	GPIO_InitStruct.Pin = (GPIO_PIN_2 | GPIO_PIN_4);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f9c:	2014      	movs	r0, #20
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e881 0009 	stmia.w	r1, {r0, r3}
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002fa4:	2203      	movs	r2, #3
void dcInit( ){
	__GPIOF_CLK_ENABLE();
	 /*Configure GPIO pins for PF2 and PF4*/
	GPIO_InitStruct.Pin = (GPIO_PIN_2 | GPIO_PIN_4);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = 0;
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fa8:	4806      	ldr	r0, [pc, #24]	; (8002fc4 <dcInit+0x40>)
void dcInit( ){
	__GPIOF_CLK_ENABLE();
	 /*Configure GPIO pins for PF2 and PF4*/
	GPIO_InitStruct.Pin = (GPIO_PIN_2 | GPIO_PIN_4);
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002faa:	608b      	str	r3, [r1, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8002fac:	60ca      	str	r2, [r1, #12]
	GPIO_InitStruct.Alternate = 0;
 8002fae:	610b      	str	r3, [r1, #16]
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002fb0:	f7fe f83e 	bl	8001030 <HAL_GPIO_Init>
}
 8002fb4:	b003      	add	sp, #12
 8002fb6:	f85d fb04 	ldr.w	pc, [sp], #4
 8002fba:	bf00      	nop
 8002fbc:	40021000 	.word	0x40021000
 8002fc0:	200005d4 	.word	0x200005d4
 8002fc4:	48001400 	.word	0x48001400

08002fc8 <encoder>:
/*Name: encoder
 *Description: run encoder to check the position of the motor and display on the screen
 *Parameter: None
 *Return: None
 * */
void encoder( ){
 8002fc8:	b510      	push	{r4, lr}
	uint32_t position = TIM3->CNT;
 8002fca:	4b08      	ldr	r3, [pc, #32]	; (8002fec <encoder+0x24>)
 8002fcc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
/*Name: encoder
 *Description: run encoder to check the position of the motor and display on the screen
 *Parameter: None
 *Return: None
 * */
void encoder( ){
 8002fce:	b086      	sub	sp, #24
	uint32_t position = TIM3->CNT;
	char posStr[20];
	GotoXY(0,1);
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	2000      	movs	r0, #0
 8002fd4:	f7ff ff0c 	bl	8002df0 <GotoXY>
	itoa(position, posStr, 10);
 8002fd8:	220a      	movs	r2, #10
 8002fda:	a901      	add	r1, sp, #4
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f000 fbbe 	bl	800375e <itoa>
	PutStr(posStr);
 8002fe2:	a801      	add	r0, sp, #4
 8002fe4:	f7ff fef3 	bl	8002dce <PutStr>
	return;

}
 8002fe8:	b006      	add	sp, #24
 8002fea:	bd10      	pop	{r4, pc}
 8002fec:	40000400 	.word	0x40000400

08002ff0 <encoderInit>:
 * */
void encoderInit(){

	TIM_Encoder_InitTypeDef encoderConfig;

	__GPIOC_CLK_ENABLE();
 8002ff0:	4b20      	ldr	r3, [pc, #128]	; (8003074 <encoderInit+0x84>)
	 /*Configure PC6 and PC7 for encoder*/
	GPIO_InitStruct.Pin = (GPIO_PIN_6 | GPIO_PIN_7);
 8002ff2:	4921      	ldr	r1, [pc, #132]	; (8003078 <encoderInit+0x88>)
 * */
void encoderInit(){

	TIM_Encoder_InitTypeDef encoderConfig;

	__GPIOC_CLK_ENABLE();
 8002ff4:	695a      	ldr	r2, [r3, #20]
	GPIO_InitStruct.Pin = (GPIO_PIN_6 | GPIO_PIN_7);
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = 2;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ff6:	4821      	ldr	r0, [pc, #132]	; (800307c <encoderInit+0x8c>)
/*Name: encoderInit
 *Description: Initializes peripherals for encoder
 *Parameter: None
 *Return: None
 * */
void encoderInit(){
 8002ff8:	b530      	push	{r4, r5, lr}

	TIM_Encoder_InitTypeDef encoderConfig;

	__GPIOC_CLK_ENABLE();
 8002ffa:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002ffe:	615a      	str	r2, [r3, #20]
 8003000:	695b      	ldr	r3, [r3, #20]
/*Name: encoderInit
 *Description: Initializes peripherals for encoder
 *Parameter: None
 *Return: None
 * */
void encoderInit(){
 8003002:	b08b      	sub	sp, #44	; 0x2c

	TIM_Encoder_InitTypeDef encoderConfig;

	__GPIOC_CLK_ENABLE();
 8003004:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003008:	9300      	str	r3, [sp, #0]
 800300a:	9b00      	ldr	r3, [sp, #0]
	 /*Configure PC6 and PC7 for encoder*/
	GPIO_InitStruct.Pin = (GPIO_PIN_6 | GPIO_PIN_7);
 800300c:	23c0      	movs	r3, #192	; 0xc0
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800300e:	2400      	movs	r4, #0
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 8003010:	2503      	movs	r5, #3

	TIM_Encoder_InitTypeDef encoderConfig;

	__GPIOC_CLK_ENABLE();
	 /*Configure PC6 and PC7 for encoder*/
	GPIO_InitStruct.Pin = (GPIO_PIN_6 | GPIO_PIN_7);
 8003012:	600b      	str	r3, [r1, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003014:	2302      	movs	r3, #2
 8003016:	604b      	str	r3, [r1, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003018:	608c      	str	r4, [r1, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
	GPIO_InitStruct.Alternate = 2;
 800301a:	610b      	str	r3, [r1, #16]
	__GPIOC_CLK_ENABLE();
	 /*Configure PC6 and PC7 for encoder*/
	GPIO_InitStruct.Pin = (GPIO_PIN_6 | GPIO_PIN_7);
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
	GPIO_InitStruct.Pull = GPIO_NOPULL;
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800301c:	60cd      	str	r5, [r1, #12]
	GPIO_InitStruct.Alternate = 2;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800301e:	f7fe f807 	bl	8001030 <HAL_GPIO_Init>


	/* initialize encoder data structure*/
	encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	encoderConfig.IC1Polarity = 0;
	encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003022:	2301      	movs	r3, #1
	encoderConfig.IC2Polarity = 0;
	encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	encoderConfig.IC2Prescaler = 0;
	encoderConfig.IC2Filter = 3;

	rc = HAL_TIM_Encoder_Init(&htim3,&encoderConfig);
 8003024:	a901      	add	r1, sp, #4
 8003026:	4816      	ldr	r0, [pc, #88]	; (8003080 <encoderInit+0x90>)
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


	/* initialize encoder data structure*/
	encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
	encoderConfig.IC1Polarity = 0;
 8003028:	9402      	str	r4, [sp, #8]
	encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
	encoderConfig.IC1Prescaler = 0;
 800302a:	9404      	str	r4, [sp, #16]
	encoderConfig.IC1Filter = 3;
	encoderConfig.IC2Polarity = 0;
 800302c:	9406      	str	r4, [sp, #24]
	encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
	encoderConfig.IC2Prescaler = 0;
 800302e:	9408      	str	r4, [sp, #32]
	GPIO_InitStruct.Alternate = 2;
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);


	/* initialize encoder data structure*/
	encoderConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003030:	9501      	str	r5, [sp, #4]
	encoderConfig.IC1Polarity = 0;
	encoderConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003032:	9303      	str	r3, [sp, #12]
	encoderConfig.IC1Prescaler = 0;
	encoderConfig.IC1Filter = 3;
 8003034:	9505      	str	r5, [sp, #20]
	encoderConfig.IC2Polarity = 0;
	encoderConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003036:	9307      	str	r3, [sp, #28]
	encoderConfig.IC2Prescaler = 0;
	encoderConfig.IC2Filter = 3;
 8003038:	9509      	str	r5, [sp, #36]	; 0x24

	rc = HAL_TIM_Encoder_Init(&htim3,&encoderConfig);
 800303a:	f7fe fedb 	bl	8001df4 <HAL_TIM_Encoder_Init>
 800303e:	4c11      	ldr	r4, [pc, #68]	; (8003084 <encoderInit+0x94>)
 8003040:	4601      	mov	r1, r0
 8003042:	7020      	strb	r0, [r4, #0]
	if(rc != HAL_OK) {
 8003044:	b108      	cbz	r0, 800304a <encoderInit+0x5a>
		printf("Failed to initialize Timer 3 Encoder rc=%u\n",(unsigned)rc);
 8003046:	4810      	ldr	r0, [pc, #64]	; (8003088 <encoderInit+0x98>)
 8003048:	e00d      	b.n	8003066 <encoderInit+0x76>
		return;
	}
	rc = HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 800304a:	480d      	ldr	r0, [pc, #52]	; (8003080 <encoderInit+0x90>)
 800304c:	f7fe fd75 	bl	8001b3a <HAL_TIM_Encoder_Start>
 8003050:	4601      	mov	r1, r0
 8003052:	7020      	strb	r0, [r4, #0]
	if(rc != HAL_OK) {
 8003054:	b930      	cbnz	r0, 8003064 <encoderInit+0x74>
		printf("Failed to start Timer 3 Encoder rc=%u\n",(unsigned)rc);
		return;
	}
	rc = HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);
 8003056:	2104      	movs	r1, #4
 8003058:	4809      	ldr	r0, [pc, #36]	; (8003080 <encoderInit+0x90>)
 800305a:	f7fe fd6e 	bl	8001b3a <HAL_TIM_Encoder_Start>
 800305e:	4601      	mov	r1, r0
 8003060:	7020      	strb	r0, [r4, #0]
	if(rc != HAL_OK) {
 8003062:	b118      	cbz	r0, 800306c <encoderInit+0x7c>
		printf("Failed to start Timer 3 Encoder rc=%u\n",(unsigned)rc);
 8003064:	4809      	ldr	r0, [pc, #36]	; (800308c <encoderInit+0x9c>)
 8003066:	f000 fb85 	bl	8003774 <printf>
		return;
 800306a:	e001      	b.n	8003070 <encoderInit+0x80>
	}

	TIM3->CNT = 0;
 800306c:	4b08      	ldr	r3, [pc, #32]	; (8003090 <encoderInit+0xa0>)
 800306e:	6258      	str	r0, [r3, #36]	; 0x24
}
 8003070:	b00b      	add	sp, #44	; 0x2c
 8003072:	bd30      	pop	{r4, r5, pc}
 8003074:	40021000 	.word	0x40021000
 8003078:	200005d4 	.word	0x200005d4
 800307c:	48000800 	.word	0x48000800
 8003080:	2000062c 	.word	0x2000062c
 8003084:	200005e8 	.word	0x200005e8
 8003088:	080071a2 	.word	0x080071a2
 800308c:	080071ce 	.word	0x080071ce
 8003090:	40000400 	.word	0x40000400

08003094 <SystemClock_Config>:


/** System Clock Configuration
*/
void SystemClock_Config(void)
{
 8003094:	b510      	push	{r4, lr}
 8003096:	b09e      	sub	sp, #120	; 0x78
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003098:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800309c:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800309e:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030a0:	2100      	movs	r1, #0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030a2:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030a4:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030a6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030a8:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030ac:	9205      	str	r2, [sp, #20]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80030ae:	9107      	str	r1, [sp, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030b0:	9209      	str	r2, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030b2:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80030b4:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030b6:	f7fe f88b 	bl	80011d0 <HAL_RCC_OscConfig>
 80030ba:	b100      	cbz	r0, 80030be <SystemClock_Config+0x2a>
 80030bc:	e7fe      	b.n	80030bc <SystemClock_Config+0x28>
    Error_Handler();
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030be:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030c0:	e88d 0018 	stmia.w	sp, {r3, r4}
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030c4:	9002      	str	r0, [sp, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80030ca:	9004      	str	r0, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030cc:	4621      	mov	r1, r4
 80030ce:	4668      	mov	r0, sp
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80030d0:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80030d2:	f7fe fb2d 	bl	8001730 <HAL_RCC_ClockConfig>
 80030d6:	b100      	cbz	r0, 80030da <SystemClock_Config+0x46>
 80030d8:	e7fe      	b.n	80030d8 <SystemClock_Config+0x44>
  {
    Error_Handler();
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
 80030da:	f241 0381 	movw	r3, #4225	; 0x1081
 80030de:	930f      	str	r3, [sp, #60]	; 0x3c
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80030e0:	9011      	str	r0, [sp, #68]	; 0x44
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80030e2:	f44f 7380 	mov.w	r3, #256	; 0x100
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 80030e6:	901b      	str	r0, [sp, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030e8:	a80f      	add	r0, sp, #60	; 0x3c
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_TIM1
                              |RCC_PERIPHCLK_ADC12;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 80030ea:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80030ec:	f7fe fc14 	bl	8001918 <HAL_RCCEx_PeriphCLKConfig>
 80030f0:	4604      	mov	r4, r0
 80030f2:	b100      	cbz	r0, 80030f6 <SystemClock_Config+0x62>
 80030f4:	e7fe      	b.n	80030f4 <SystemClock_Config+0x60>
    Error_Handler();
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 80030f6:	f7fe fbd9 	bl	80018ac <HAL_RCC_GetHCLKFreq>
 80030fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030fe:	fbb0 f0f3 	udiv	r0, r0, r3
 8003102:	f7fd ff6d 	bl	8000fe0 <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003106:	2004      	movs	r0, #4
 8003108:	f7fd ff80 	bl	800100c <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 800310c:	4622      	mov	r2, r4
 800310e:	4621      	mov	r1, r4
 8003110:	f04f 30ff 	mov.w	r0, #4294967295
 8003114:	f7fd ff24 	bl	8000f60 <HAL_NVIC_SetPriority>
}
 8003118:	b01e      	add	sp, #120	; 0x78
 800311a:	bd10      	pop	{r4, pc}

0800311c <main>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

int main(void)
{
 800311c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003120:	b093      	sub	sp, #76	; 0x4c
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003122:	f7fd fedd 	bl	8000ee0 <HAL_Init>
  ledInit();
 8003126:	f7ff fe87 	bl	8002e38 <ledInit>
  Init();
 800312a:	f7ff fdd9 	bl	8002ce0 <Init>
  dcInit();
 800312e:	f7ff ff29 	bl	8002f84 <dcInit>
  /* Configure the system clock */
  SystemClock_Config();
 8003132:	f7ff ffaf 	bl	8003094 <SystemClock_Config>
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003136:	4ba0      	ldr	r3, [pc, #640]	; (80033b8 <main+0x29c>)

/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003138:	48a0      	ldr	r0, [pc, #640]	; (80033bc <main+0x2a0>)
*/
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800313a:	695a      	ldr	r2, [r3, #20]
 800313c:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8003140:	615a      	str	r2, [r3, #20]
 8003142:	695a      	ldr	r2, [r3, #20]
 8003144:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8003148:	9201      	str	r2, [sp, #4]
 800314a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003152:	615a      	str	r2, [r3, #20]
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800315a:	9202      	str	r2, [sp, #8]
 800315c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800315e:	695a      	ldr	r2, [r3, #20]
 8003160:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8003164:	615a      	str	r2, [r3, #20]
 8003166:	695b      	ldr	r3, [r3, #20]
 8003168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316c:	9303      	str	r3, [sp, #12]
 800316e:	9b03      	ldr	r3, [sp, #12]
/* USART1 init function */
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
 8003170:	4b93      	ldr	r3, [pc, #588]	; (80033c0 <main+0x2a4>)
 8003172:	f44f 5616 	mov.w	r6, #9600	; 0x2580
 8003176:	e880 0048 	stmia.w	r0, {r3, r6}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800317a:	220c      	movs	r2, #12
static void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800317c:	2300      	movs	r3, #0
 800317e:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003180:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003182:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003184:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003186:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003188:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800318a:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800318c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800318e:	f7ff fcb7 	bl	8002b00 <HAL_UART_Init>
 8003192:	b100      	cbz	r0, 8003196 <main+0x7a>
 8003194:	e7fe      	b.n	8003194 <main+0x78>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim1.Instance = TIM1;
 8003196:	4c8b      	ldr	r4, [pc, #556]	; (80033c4 <main+0x2a8>)
  htim1.Init.Prescaler = 72;
 8003198:	4b8b      	ldr	r3, [pc, #556]	; (80033c8 <main+0x2ac>)
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800319a:	60a0      	str	r0, [r4, #8]
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72;
 800319c:	f04f 0848 	mov.w	r8, #72	; 0x48
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000;
 80031a0:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031a4:	6120      	str	r0, [r4, #16]
  htim1.Init.RepetitionCounter = 0;
 80031a6:	6160      	str	r0, [r4, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a8:	61a0      	str	r0, [r4, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031aa:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  TIM_OC_InitTypeDef sConfigOC;

  htim1.Instance = TIM1;
  htim1.Init.Prescaler = 72;
 80031ac:	e884 0108 	stmia.w	r4, {r3, r8}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 1000;
 80031b0:	60e7      	str	r7, [r4, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80031b2:	f7fe fdeb 	bl	8001d8c <HAL_TIM_Base_Init>
 80031b6:	b100      	cbz	r0, 80031ba <main+0x9e>
 80031b8:	e7fe      	b.n	80031b8 <main+0x9c>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031ba:	ae12      	add	r6, sp, #72	; 0x48
 80031bc:	f44f 5980 	mov.w	r9, #4096	; 0x1000
 80031c0:	f846 9d2c 	str.w	r9, [r6, #-44]!
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80031c4:	4620      	mov	r0, r4
 80031c6:	4631      	mov	r1, r6
 80031c8:	f7fe ff76 	bl	80020b8 <HAL_TIM_ConfigClockSource>
 80031cc:	b100      	cbz	r0, 80031d0 <main+0xb4>
 80031ce:	e7fe      	b.n	80031ce <main+0xb2>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80031d0:	4620      	mov	r0, r4
 80031d2:	f7fe fdf5 	bl	8001dc0 <HAL_TIM_PWM_Init>
 80031d6:	b100      	cbz	r0, 80031da <main+0xbe>
 80031d8:	e7fe      	b.n	80031d8 <main+0xbc>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031da:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80031dc:	9005      	str	r0, [sp, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031de:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80031e0:	a904      	add	r1, sp, #16
 80031e2:	4620      	mov	r0, r4
 80031e4:	f7ff f9ee 	bl	80025c4 <HAL_TIMEx_MasterConfigSynchronization>
 80031e8:	4602      	mov	r2, r0
 80031ea:	b100      	cbz	r0, 80031ee <main+0xd2>
 80031ec:	e7fe      	b.n	80031ec <main+0xd0>
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80031ee:	2360      	movs	r3, #96	; 0x60
 80031f0:	930b      	str	r3, [sp, #44]	; 0x2c
  sConfigOC.Pulse = 500;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80031f2:	900d      	str	r0, [sp, #52]	; 0x34
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 500;
 80031f4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80031f8:	900e      	str	r0, [sp, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80031fa:	900f      	str	r0, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80031fc:	9010      	str	r0, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80031fe:	9011      	str	r0, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003200:	a90b      	add	r1, sp, #44	; 0x2c
 8003202:	4620      	mov	r0, r4
  {
    Error_Handler();
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 500;
 8003204:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003206:	f7ff f957 	bl	80024b8 <HAL_TIM_PWM_ConfigChannel>
 800320a:	4605      	mov	r5, r0
 800320c:	b100      	cbz	r0, 8003210 <main+0xf4>
 800320e:	e7fe      	b.n	800320e <main+0xf2>
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim1);
 8003210:	4620      	mov	r0, r4

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  //TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8003212:	4c6e      	ldr	r4, [pc, #440]	; (80033cc <main+0x2b0>)
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
  {
    Error_Handler();
  }

  HAL_TIM_MspPostInit(&htim1);
 8003214:	f000 f9a6 	bl	8003564 <HAL_TIM_MspPostInit>

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  //TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
 8003218:	4b6d      	ldr	r3, [pc, #436]	; (80033d0 <main+0x2b4>)
  htim3.Init.Prescaler = 72;
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800321a:	60a5      	str	r5, [r4, #8]
  htim3.Init.Period = 1000;
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800321c:	4620      	mov	r0, r4
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_MasterConfigTypeDef sMasterConfig;
  //TIM_OC_InitTypeDef sConfigOC;

  htim3.Instance = TIM3;
  htim3.Init.Prescaler = 72;
 800321e:	e884 0108 	stmia.w	r4, {r3, r8}
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim3.Init.Period = 1000;
 8003222:	60e7      	str	r7, [r4, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003224:	6125      	str	r5, [r4, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003226:	61a5      	str	r5, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003228:	f7fe fdb0 	bl	8001d8c <HAL_TIM_Base_Init>
 800322c:	b100      	cbz	r0, 8003230 <main+0x114>
 800322e:	e7fe      	b.n	800322e <main+0x112>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003230:	a90b      	add	r1, sp, #44	; 0x2c
 8003232:	4620      	mov	r0, r4
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003234:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003238:	f7fe ff3e 	bl	80020b8 <HAL_TIM_ConfigClockSource>
 800323c:	b100      	cbz	r0, 8003240 <main+0x124>
 800323e:	e7fe      	b.n	800323e <main+0x122>
  {
    Error_Handler();
  }

  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8003240:	4620      	mov	r0, r4
 8003242:	f7fe fdbd 	bl	8001dc0 <HAL_TIM_PWM_Init>
 8003246:	b100      	cbz	r0, 800324a <main+0x12e>
 8003248:	e7fe      	b.n	8003248 <main+0x12c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800324a:	9007      	str	r0, [sp, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800324c:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800324e:	4631      	mov	r1, r6
 8003250:	4620      	mov	r0, r4
 8003252:	f7ff f9b7 	bl	80025c4 <HAL_TIMEx_MasterConfigSynchronization>
 8003256:	b100      	cbz	r0, 800325a <main+0x13e>
 8003258:	e7fe      	b.n	8003258 <main+0x13c>
  {
    Error_Handler();
  }

  encoderInit();
 800325a:	f7ff fec9 	bl	8002ff0 <encoderInit>

  HAL_TIM_MspPostInit(&htim3);
 800325e:	485b      	ldr	r0, [pc, #364]	; (80033cc <main+0x2b0>)

  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim15.Instance = TIM15;
 8003260:	4d5c      	ldr	r5, [pc, #368]	; (80033d4 <main+0x2b8>)
    Error_Handler();
  }

  encoderInit();

  HAL_TIM_MspPostInit(&htim3);
 8003262:	f000 f97f 	bl	8003564 <HAL_TIM_MspPostInit>
  TIM_ClockConfigTypeDef sClockSourceConfig;
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 1;
 8003266:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <main+0x2bc>)
 8003268:	2701      	movs	r7, #1
 800326a:	e885 0088 	stmia.w	r5, {r3, r7}
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim15.Init.Period = 35999;
 800326e:	f648 429f 	movw	r2, #35999	; 0x8c9f
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 1;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003272:	2300      	movs	r3, #0
  htim15.Init.Period = 35999;
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim15.Init.RepetitionCounter = 0;
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003274:	4628      	mov	r0, r5
  TIM_SlaveConfigTypeDef sSlaveConfig;
  TIM_MasterConfigTypeDef sMasterConfig;

  htim15.Instance = TIM15;
  htim15.Init.Prescaler = 1;
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003276:	60ab      	str	r3, [r5, #8]
  htim15.Init.Period = 35999;
 8003278:	60ea      	str	r2, [r5, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800327a:	612b      	str	r3, [r5, #16]
  htim15.Init.RepetitionCounter = 0;
 800327c:	616b      	str	r3, [r5, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800327e:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003280:	f7fe fd84 	bl	8001d8c <HAL_TIM_Base_Init>
 8003284:	b100      	cbz	r0, 8003288 <main+0x16c>
 8003286:	e7fe      	b.n	8003286 <main+0x16a>
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003288:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 800328c:	4631      	mov	r1, r6
 800328e:	4628      	mov	r0, r5
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
  {
    Error_Handler();
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003290:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8003292:	f7fe ff11 	bl	80020b8 <HAL_TIM_ConfigClockSource>
 8003296:	b100      	cbz	r0, 800329a <main+0x17e>
 8003298:	e7fe      	b.n	8003298 <main+0x17c>
  {
    Error_Handler();
  }

  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800329a:	900b      	str	r0, [sp, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800329c:	900c      	str	r0, [sp, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 800329e:	a90b      	add	r1, sp, #44	; 0x2c
 80032a0:	4628      	mov	r0, r5
 80032a2:	f7ff f810 	bl	80022c6 <HAL_TIM_SlaveConfigSynchronization>
 80032a6:	b100      	cbz	r0, 80032aa <main+0x18e>
 80032a8:	e7fe      	b.n	80032a8 <main+0x18c>
  {
    Error_Handler();
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032aa:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ac:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80032ae:	a904      	add	r1, sp, #16
 80032b0:	4628      	mov	r0, r5
 80032b2:	f7ff f987 	bl	80025c4 <HAL_TIMEx_MasterConfigSynchronization>
 80032b6:	4604      	mov	r4, r0
 80032b8:	b100      	cbz	r0, 80032bc <main+0x1a0>
 80032ba:	e7fe      	b.n	80032ba <main+0x19e>
  {
    Error_Handler();
  }

  /* Timer interrupt intializer */
  HAL_NVIC_SetPriority(TIM15_IRQn, 0, 1);
 80032bc:	4601      	mov	r1, r0
 80032be:	463a      	mov	r2, r7
 80032c0:	2018      	movs	r0, #24
 80032c2:	f7fd fe4d 	bl	8000f60 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM15_IRQn);
 80032c6:	2018      	movs	r0, #24
 80032c8:	f7fd fe7e 	bl	8000fc8 <HAL_NVIC_EnableIRQ>
  MX_TIM15_Init();

  /* USER CODE BEGIN 2 */


    uint8_t string[10] = "START\r\n";
 80032cc:	4a43      	ldr	r2, [pc, #268]	; (80033dc <main+0x2c0>)
 80032ce:	f8ad 4024 	strh.w	r4, [sp, #36]	; 0x24
 80032d2:	6810      	ldr	r0, [r2, #0]
 80032d4:	6851      	ldr	r1, [r2, #4]
 80032d6:	4633      	mov	r3, r6
 80032d8:	c303      	stmia	r3!, {r0, r1}
    uint8_t received[20] = {0};
 80032da:	2214      	movs	r2, #20
 80032dc:	4621      	mov	r1, r4
 80032de:	a80b      	add	r0, sp, #44	; 0x2c
 80032e0:	f000 fa3f 	bl	8003762 <memset>
    int direction = 1;
    bufferPtr = received;

    char state = '0';
    //char preState = '2';
    HAL_UART_Transmit(&huart1, string, 10, 100);
 80032e4:	2364      	movs	r3, #100	; 0x64
 80032e6:	220a      	movs	r2, #10
 80032e8:	4631      	mov	r1, r6
 80032ea:	4834      	ldr	r0, [pc, #208]	; (80033bc <main+0x2a0>)
 80032ec:	f7ff fb13 	bl	8002916 <HAL_UART_Transmit>
  //char str[10];

    ClrScr();
 80032f0:	f7ff fd6a 	bl	8002dc8 <ClrScr>
    display_cursor(0);
 80032f4:	4620      	mov	r0, r4
 80032f6:	f7ff fd61 	bl	8002dbc <display_cursor>
    GotoXY(0,0);
 80032fa:	4621      	mov	r1, r4
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff fd77 	bl	8002df0 <GotoXY>
    PutStr("WELLCOME");
 8003302:	4837      	ldr	r0, [pc, #220]	; (80033e0 <main+0x2c4>)
 8003304:	f7ff fd63 	bl	8002dce <PutStr>
    /* USER CODE BEGIN WHILE */

  /* USER CODE END 2 */


   HAL_TIM_Base_Start_IT(&htim15);
 8003308:	4628      	mov	r0, r5
 800330a:	f7fe fc09 	bl	8001b20 <HAL_TIM_Base_Start_IT>
 800330e:	4626      	mov	r6, r4
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  /* USER CODE END WHILE */
	  /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart1, received, 10, 200);
 8003310:	23c8      	movs	r3, #200	; 0xc8
 8003312:	220a      	movs	r2, #10
 8003314:	a90b      	add	r1, sp, #44	; 0x2c
 8003316:	4829      	ldr	r0, [pc, #164]	; (80033bc <main+0x2a0>)
 8003318:	f7ff fb57 	bl	80029ca <HAL_UART_Receive>
	  state = (char)received[0];
		  //HAL_UART_Transmit(&huart1, string, 10, 100);

	  switch(state){
 800331c:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8003320:	3b31      	subs	r3, #49	; 0x31
 8003322:	2b07      	cmp	r3, #7
 8003324:	d877      	bhi.n	8003416 <main+0x2fa>
 8003326:	e8df f003 	tbb	[pc, r3]
 800332a:	0d04      	.short	0x0d04
 800332c:	3078281d 	.word	0x3078281d
 8003330:	6b3c      	.short	0x6b3c

		  case '0':
			  break;

		  case '1':
			  ledFlag = 1;
 8003332:	4b2c      	ldr	r3, [pc, #176]	; (80033e4 <main+0x2c8>)
			  GotoXY(0,0);
 8003334:	2100      	movs	r1, #0

		  case '0':
			  break;

		  case '1':
			  ledFlag = 1;
 8003336:	2201      	movs	r2, #1
			  GotoXY(0,0);
 8003338:	4608      	mov	r0, r1

		  case '0':
			  break;

		  case '1':
			  ledFlag = 1;
 800333a:	601a      	str	r2, [r3, #0]
			  GotoXY(0,0);
 800333c:	f7ff fd58 	bl	8002df0 <GotoXY>
			  PutStr("LED ON       ");
 8003340:	4829      	ldr	r0, [pc, #164]	; (80033e8 <main+0x2cc>)
 8003342:	e02b      	b.n	800339c <main+0x280>
			  break;

		  case '2':
			  ledFlag = 0;
 8003344:	4b27      	ldr	r3, [pc, #156]	; (80033e4 <main+0x2c8>)
			  for(int i=0; i<8; i++){
 8003346:	2500      	movs	r5, #0
			  GotoXY(0,0);
			  PutStr("LED ON       ");
			  break;

		  case '2':
			  ledFlag = 0;
 8003348:	601e      	str	r6, [r3, #0]
			  for(int i=0; i<8; i++){
				  writeLed(i, 0);
 800334a:	4628      	mov	r0, r5
 800334c:	2100      	movs	r1, #0
			  PutStr("LED ON       ");
			  break;

		  case '2':
			  ledFlag = 0;
			  for(int i=0; i<8; i++){
 800334e:	3501      	adds	r5, #1
				  writeLed(i, 0);
 8003350:	f7ff fdb4 	bl	8002ebc <writeLed>
			  PutStr("LED ON       ");
			  break;

		  case '2':
			  ledFlag = 0;
			  for(int i=0; i<8; i++){
 8003354:	2d08      	cmp	r5, #8
 8003356:	d1f8      	bne.n	800334a <main+0x22e>
				  writeLed(i, 0);
			  }
			  GotoXY(0,0);
 8003358:	2100      	movs	r1, #0
 800335a:	4608      	mov	r0, r1
 800335c:	f7ff fd48 	bl	8002df0 <GotoXY>
			  PutStr("LED OFF      ");
 8003360:	4822      	ldr	r0, [pc, #136]	; (80033ec <main+0x2d0>)
 8003362:	e01b      	b.n	800339c <main+0x280>
			  break;

		  case '3':
			  dcStop();
 8003364:	f7ff fdf8 	bl	8002f58 <dcStop>
			  direction =1;
			  dcRun(direction);
 8003368:	2001      	movs	r0, #1
 800336a:	f7ff fd87 	bl	8002e7c <dcRun>
			  GotoXY(0,0);
 800336e:	2100      	movs	r1, #0
 8003370:	4608      	mov	r0, r1
 8003372:	f7ff fd3d 	bl	8002df0 <GotoXY>
			  PutStr("Motor ON FWD ");
 8003376:	481e      	ldr	r0, [pc, #120]	; (80033f0 <main+0x2d4>)
 8003378:	e010      	b.n	800339c <main+0x280>
			  break;

		  case '4':
			  dcStop();
 800337a:	f7ff fded 	bl	8002f58 <dcStop>
			  GotoXY(0,0);
 800337e:	2100      	movs	r1, #0
 8003380:	4608      	mov	r0, r1
 8003382:	f7ff fd35 	bl	8002df0 <GotoXY>
			  PutStr("Motor OFF     ");
 8003386:	481b      	ldr	r0, [pc, #108]	; (80033f4 <main+0x2d8>)
 8003388:	e008      	b.n	800339c <main+0x280>
		  case '5':
			  encoderFlag = 1;
			  break;

		  case '6':
			  dcStop();
 800338a:	f7ff fde5 	bl	8002f58 <dcStop>
 800338e:	f7ff fd3d 	bl	8002e0c <dcRun.part.0>
			  direction = 2;
			  dcRun(direction);
			  GotoXY(0,0);
 8003392:	2100      	movs	r1, #0
 8003394:	4608      	mov	r0, r1
 8003396:	f7ff fd2b 	bl	8002df0 <GotoXY>
			  PutStr("Motor ON RWD ");
 800339a:	4817      	ldr	r0, [pc, #92]	; (80033f8 <main+0x2dc>)
 800339c:	f7ff fd17 	bl	8002dce <PutStr>
			  break;
 80033a0:	e039      	b.n	8003416 <main+0x2fa>

		  case '7':
			  GotoXY(0,0);
 80033a2:	2100      	movs	r1, #0
 80033a4:	4608      	mov	r0, r1
 80033a6:	f7ff fd23 	bl	8002df0 <GotoXY>
			  PutStr("MIN Speed    ");
 80033aa:	4814      	ldr	r0, [pc, #80]	; (80033fc <main+0x2e0>)
 80033ac:	f7ff fd0f 	bl	8002dce <PutStr>
			  TIM1->CCR1 = 300;
 80033b0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80033b4:	e02d      	b.n	8003412 <main+0x2f6>
 80033b6:	bf00      	nop
 80033b8:	40021000 	.word	0x40021000
 80033bc:	200006c0 	.word	0x200006c0
 80033c0:	40013800 	.word	0x40013800
 80033c4:	20000730 	.word	0x20000730
 80033c8:	40012c00 	.word	0x40012c00
 80033cc:	2000062c 	.word	0x2000062c
 80033d0:	40000400 	.word	0x40000400
 80033d4:	200005ec 	.word	0x200005ec
 80033d8:	40014000 	.word	0x40014000
 80033dc:	08007170 	.word	0x08007170
 80033e0:	080071f5 	.word	0x080071f5
 80033e4:	20000594 	.word	0x20000594
 80033e8:	080071fe 	.word	0x080071fe
 80033ec:	0800720c 	.word	0x0800720c
 80033f0:	0800721a 	.word	0x0800721a
 80033f4:	08007228 	.word	0x08007228
 80033f8:	08007237 	.word	0x08007237
 80033fc:	08007245 	.word	0x08007245
			  break;

		  case '8':
			  GotoXY(0,0);
 8003400:	2100      	movs	r1, #0
 8003402:	4608      	mov	r0, r1
 8003404:	f7ff fcf4 	bl	8002df0 <GotoXY>
			  PutStr("MAX Speed    ");
 8003408:	4808      	ldr	r0, [pc, #32]	; (800342c <main+0x310>)
 800340a:	f7ff fce0 	bl	8002dce <PutStr>
			  TIM1->CCR1 = 1000;
 800340e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003412:	4b07      	ldr	r3, [pc, #28]	; (8003430 <main+0x314>)
 8003414:	635a      	str	r2, [r3, #52]	; 0x34
			  state = '0';
			  break;

	  }
	  //turn on and of the encoder
	  if (encoderFlag == 1){
 8003416:	2c01      	cmp	r4, #1
 8003418:	d103      	bne.n	8003422 <main+0x306>
		  encoder( );
 800341a:	f7ff fdd5 	bl	8002fc8 <encoder>
 800341e:	2401      	movs	r4, #1
 8003420:	e000      	b.n	8003424 <main+0x308>
 8003422:	2400      	movs	r4, #0
	  }

	 *bufferPtr = 0;
 8003424:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c

  }
 8003428:	e772      	b.n	8003310 <main+0x1f4>
 800342a:	bf00      	nop
 800342c:	08007253 	.word	0x08007253
 8003430:	40012c00 	.word	0x40012c00

08003434 <TIM1_BRK_TIM15_IRQHandler>:

// Name: TIM1_BRK_TIM15_IRQHandler
// Description: interrupt handler for timer 15
// Parameters: None
// Return: None
void TIM1_BRK_TIM15_IRQHandler(){
 8003434:	b510      	push	{r4, lr}
    HAL_TIM_IRQHandler(&htim15);  //reset the interrupt flag
    if(counter15 == 500 ){
 8003436:	4c0a      	ldr	r4, [pc, #40]	; (8003460 <TIM1_BRK_TIM15_IRQHandler+0x2c>)
// Name: TIM1_BRK_TIM15_IRQHandler
// Description: interrupt handler for timer 15
// Parameters: None
// Return: None
void TIM1_BRK_TIM15_IRQHandler(){
    HAL_TIM_IRQHandler(&htim15);  //reset the interrupt flag
 8003438:	480a      	ldr	r0, [pc, #40]	; (8003464 <TIM1_BRK_TIM15_IRQHandler+0x30>)
 800343a:	f7fe fba6 	bl	8001b8a <HAL_TIM_IRQHandler>
    if(counter15 == 500 ){
 800343e:	6823      	ldr	r3, [r4, #0]
 8003440:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003444:	d107      	bne.n	8003456 <TIM1_BRK_TIM15_IRQHandler+0x22>
        if (ledFlag == 1){
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <TIM1_BRK_TIM15_IRQHandler+0x1e>
            	ledToggle();
 800344e:	f7ff fd51 	bl	8002ef4 <ledToggle>
         }

        counter15 = 0;
 8003452:	2300      	movs	r3, #0
 8003454:	6023      	str	r3, [r4, #0]
    }
    counter15++;
 8003456:	6823      	ldr	r3, [r4, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	6023      	str	r3, [r4, #0]
 800345c:	bd10      	pop	{r4, pc}
 800345e:	bf00      	nop
 8003460:	2000058c 	.word	0x2000058c
 8003464:	200005ec 	.word	0x200005ec
 8003468:	20000594 	.word	0x20000594

0800346c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800346c:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <HAL_MspInit+0x78>)
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800346e:	b507      	push	{r0, r1, r2, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003470:	699a      	ldr	r2, [r3, #24]
 8003472:	f042 0201 	orr.w	r2, r2, #1
 8003476:	619a      	str	r2, [r3, #24]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003480:	2003      	movs	r0, #3
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003482:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003484:	f7fd fd5a 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003488:	2200      	movs	r2, #0
 800348a:	4611      	mov	r1, r2
 800348c:	f06f 000b 	mvn.w	r0, #11
 8003490:	f7fd fd66 	bl	8000f60 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003494:	2200      	movs	r2, #0
 8003496:	4611      	mov	r1, r2
 8003498:	f06f 000a 	mvn.w	r0, #10
 800349c:	f7fd fd60 	bl	8000f60 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80034a0:	2200      	movs	r2, #0
 80034a2:	4611      	mov	r1, r2
 80034a4:	f06f 0009 	mvn.w	r0, #9
 80034a8:	f7fd fd5a 	bl	8000f60 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80034ac:	2200      	movs	r2, #0
 80034ae:	4611      	mov	r1, r2
 80034b0:	f06f 0004 	mvn.w	r0, #4
 80034b4:	f7fd fd54 	bl	8000f60 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80034b8:	2200      	movs	r2, #0
 80034ba:	4611      	mov	r1, r2
 80034bc:	f06f 0003 	mvn.w	r0, #3
 80034c0:	f7fd fd4e 	bl	8000f60 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 80034c4:	2200      	movs	r2, #0
 80034c6:	4611      	mov	r1, r2
 80034c8:	f06f 0001 	mvn.w	r0, #1
 80034cc:	f7fd fd48 	bl	8000f60 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	4611      	mov	r1, r2
 80034d4:	f04f 30ff 	mov.w	r0, #4294967295
 80034d8:	f7fd fd42 	bl	8000f60 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034dc:	b003      	add	sp, #12
 80034de:	f85d fb04 	ldr.w	pc, [sp], #4
 80034e2:	bf00      	nop
 80034e4:	40021000 	.word	0x40021000

080034e8 <HAL_TIM_Base_MspInit>:
  /* USER CODE END ADC1_MspDeInit 1 */

}

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}

  if(htim_base->Instance==TIM1)
 80034ea:	6803      	ldr	r3, [r0, #0]
 80034ec:	4a19      	ldr	r2, [pc, #100]	; (8003554 <HAL_TIM_Base_MspInit+0x6c>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10a      	bne.n	8003508 <HAL_TIM_Base_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80034f2:	4b19      	ldr	r3, [pc, #100]	; (8003558 <HAL_TIM_Base_MspInit+0x70>)
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80034fa:	619a      	str	r2, [r3, #24]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	9b01      	ldr	r3, [sp, #4]
 8003506:	e01a      	b.n	800353e <HAL_TIM_Base_MspInit+0x56>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
  else if(htim_base->Instance==TIM3)
 8003508:	4a14      	ldr	r2, [pc, #80]	; (800355c <HAL_TIM_Base_MspInit+0x74>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d10a      	bne.n	8003524 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800350e:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_TIM_Base_MspInit+0x70>)
 8003510:	69da      	ldr	r2, [r3, #28]
 8003512:	f042 0202 	orr.w	r2, r2, #2
 8003516:	61da      	str	r2, [r3, #28]
 8003518:	69db      	ldr	r3, [r3, #28]
 800351a:	f003 0302 	and.w	r3, r3, #2
 800351e:	9302      	str	r3, [sp, #8]
 8003520:	9b02      	ldr	r3, [sp, #8]
 8003522:	e014      	b.n	800354e <HAL_TIM_Base_MspInit+0x66>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM15)
 8003524:	4a0e      	ldr	r2, [pc, #56]	; (8003560 <HAL_TIM_Base_MspInit+0x78>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d111      	bne.n	800354e <HAL_TIM_Base_MspInit+0x66>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800352a:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_TIM_Base_MspInit+0x70>)
 800352c:	699a      	ldr	r2, [r3, #24]
 800352e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003532:	619a      	str	r2, [r3, #24]
 8003534:	699b      	ldr	r3, [r3, #24]
 8003536:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353a:	9303      	str	r3, [sp, #12]
 800353c:	9b03      	ldr	r3, [sp, #12]
    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800353e:	2200      	movs	r2, #0
 8003540:	2018      	movs	r0, #24
 8003542:	4611      	mov	r1, r2
 8003544:	f7fd fd0c 	bl	8000f60 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003548:	2018      	movs	r0, #24
 800354a:	f7fd fd3d 	bl	8000fc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 800354e:	b005      	add	sp, #20
 8003550:	f85d fb04 	ldr.w	pc, [sp], #4
 8003554:	40012c00 	.word	0x40012c00
 8003558:	40021000 	.word	0x40021000
 800355c:	40000400 	.word	0x40000400
 8003560:	40014000 	.word	0x40014000

08003564 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003564:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(htim->Instance==TIM1)
 8003566:	6803      	ldr	r3, [r0, #0]
 8003568:	4a11      	ldr	r2, [pc, #68]	; (80035b0 <HAL_TIM_MspPostInit+0x4c>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d10d      	bne.n	800358a <HAL_TIM_MspPostInit+0x26>

  /* USER CODE END TIM1_MspPostInit 0 */
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800356e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003572:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003574:	2302      	movs	r3, #2
 8003576:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003578:	2300      	movs	r3, #0
 800357a:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800357c:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800357e:	2306      	movs	r3, #6
 8003580:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003582:	a901      	add	r1, sp, #4
 8003584:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003588:	e00c      	b.n	80035a4 <HAL_TIM_MspPostInit+0x40>

  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }
  else if(htim->Instance==TIM3)
 800358a:	4a0a      	ldr	r2, [pc, #40]	; (80035b4 <HAL_TIM_MspPostInit+0x50>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d10b      	bne.n	80035a8 <HAL_TIM_MspPostInit+0x44>
  
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003590:	23c0      	movs	r3, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003592:	2200      	movs	r2, #0
  
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003594:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003596:	4808      	ldr	r0, [pc, #32]	; (80035b8 <HAL_TIM_MspPostInit+0x54>)
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003598:	9203      	str	r2, [sp, #12]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800359a:	2302      	movs	r3, #2
 800359c:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800359e:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80035a2:	a901      	add	r1, sp, #4
 80035a4:	f7fd fd44 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035a8:	b007      	add	sp, #28
 80035aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80035ae:	bf00      	nop
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40000400 	.word	0x40000400
 80035b8:	48000800 	.word	0x48000800

080035bc <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 80035be:	6802      	ldr	r2, [r0, #0]
 80035c0:	4b10      	ldr	r3, [pc, #64]	; (8003604 <HAL_UART_MspInit+0x48>)
 80035c2:	429a      	cmp	r2, r3
 80035c4:	d11a      	bne.n	80035fc <HAL_UART_MspInit+0x40>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035c6:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035ca:	a901      	add	r1, sp, #4
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80035cc:	699a      	ldr	r2, [r3, #24]
 80035ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035d2:	619a      	str	r2, [r3, #24]
 80035d4:	699b      	ldr	r3, [r3, #24]
 80035d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035da:	9300      	str	r3, [sp, #0]
 80035dc:	9b00      	ldr	r3, [sp, #0]
  
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80035de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80035e2:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035e4:	2302      	movs	r3, #2
 80035e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035e8:	2301      	movs	r3, #1
 80035ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80035ec:	2303      	movs	r3, #3
 80035ee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80035f4:	2307      	movs	r3, #7
 80035f6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035f8:	f7fd fd1a 	bl	8001030 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80035fc:	b007      	add	sp, #28
 80035fe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003602:	bf00      	nop
 8003604:	40013800 	.word	0x40013800

08003608 <NMI_Handler>:
 8003608:	4770      	bx	lr

0800360a <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 800360a:	e7fe      	b.n	800360a <HardFault_Handler>

0800360c <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 800360c:	e7fe      	b.n	800360c <MemManage_Handler>

0800360e <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 800360e:	e7fe      	b.n	800360e <BusFault_Handler>

08003610 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003610:	e7fe      	b.n	8003610 <UsageFault_Handler>

08003612 <SVC_Handler>:
 8003612:	4770      	bx	lr

08003614 <DebugMon_Handler>:
 8003614:	4770      	bx	lr

08003616 <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003616:	4770      	bx	lr

08003618 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003618:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800361a:	f7fd fc73 	bl	8000f04 <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800361e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  HAL_SYSTICK_IRQHandler();
 8003622:	f7fd bd00 	b.w	8001026 <HAL_SYSTICK_IRQHandler>
	...

08003628 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003628:	4915      	ldr	r1, [pc, #84]	; (8003680 <SystemInit+0x58>)
 800362a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800362e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003632:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003636:	4b13      	ldr	r3, [pc, #76]	; (8003684 <SystemInit+0x5c>)
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003640:	6858      	ldr	r0, [r3, #4]
 8003642:	4a11      	ldr	r2, [pc, #68]	; (8003688 <SystemInit+0x60>)
 8003644:	4002      	ands	r2, r0
 8003646:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800364e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003652:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800365a:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 800365c:	685a      	ldr	r2, [r3, #4]
 800365e:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8003662:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003666:	f022 020f 	bic.w	r2, r2, #15
 800366a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800366c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800366e:	4a07      	ldr	r2, [pc, #28]	; (800368c <SystemInit+0x64>)
 8003670:	4002      	ands	r2, r0
 8003672:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003674:	2200      	movs	r2, #0
 8003676:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003678:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800367c:	608b      	str	r3, [r1, #8]
 800367e:	4770      	bx	lr
 8003680:	e000ed00 	.word	0xe000ed00
 8003684:	40021000 	.word	0x40021000
 8003688:	f87fc00c 	.word	0xf87fc00c
 800368c:	ff00fccc 	.word	0xff00fccc

08003690 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80036c8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003694:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003696:	e003      	b.n	80036a0 <LoopCopyDataInit>

08003698 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003698:	4b0c      	ldr	r3, [pc, #48]	; (80036cc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800369a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800369c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800369e:	3104      	adds	r1, #4

080036a0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80036a0:	480b      	ldr	r0, [pc, #44]	; (80036d0 <LoopForever+0xa>)
	ldr	r3, =_edata
 80036a2:	4b0c      	ldr	r3, [pc, #48]	; (80036d4 <LoopForever+0xe>)
	adds	r2, r0, r1
 80036a4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80036a6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80036a8:	d3f6      	bcc.n	8003698 <CopyDataInit>
	ldr	r2, =_sbss
 80036aa:	4a0b      	ldr	r2, [pc, #44]	; (80036d8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80036ac:	e002      	b.n	80036b4 <LoopFillZerobss>

080036ae <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80036ae:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80036b0:	f842 3b04 	str.w	r3, [r2], #4

080036b4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <LoopForever+0x16>)
	cmp	r2, r3
 80036b6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80036b8:	d3f9      	bcc.n	80036ae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80036ba:	f7ff ffb5 	bl	8003628 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80036be:	f000 f811 	bl	80036e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80036c2:	f7ff fd2b 	bl	800311c <main>

080036c6 <LoopForever>:

LoopForever:
    b LoopForever
 80036c6:	e7fe      	b.n	80036c6 <LoopForever>

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80036c8:	2000a000 	.word	0x2000a000
/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
  b	LoopCopyDataInit

CopyDataInit:
	ldr	r3, =_sidata
 80036cc:	0800747c 	.word	0x0800747c
	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
	adds	r1, r1, #4

LoopCopyDataInit:
	ldr	r0, =_sdata
 80036d0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80036d4:	20000570 	.word	0x20000570
	adds	r2, r0, r1
	cmp	r2, r3
	bcc	CopyDataInit
	ldr	r2, =_sbss
 80036d8:	20000570 	.word	0x20000570
FillZerobss:
	movs	r3, #0
	str	r3, [r2], #4

LoopFillZerobss:
	ldr	r3, = _ebss
 80036dc:	20000774 	.word	0x20000774

080036e0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80036e0:	e7fe      	b.n	80036e0 <ADC1_2_IRQHandler>
	...

080036e4 <__libc_init_array>:
 80036e4:	b570      	push	{r4, r5, r6, lr}
 80036e6:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <__libc_init_array+0x3c>)
 80036e8:	4c0e      	ldr	r4, [pc, #56]	; (8003724 <__libc_init_array+0x40>)
 80036ea:	1ae4      	subs	r4, r4, r3
 80036ec:	10a4      	asrs	r4, r4, #2
 80036ee:	2500      	movs	r5, #0
 80036f0:	461e      	mov	r6, r3
 80036f2:	42a5      	cmp	r5, r4
 80036f4:	d004      	beq.n	8003700 <__libc_init_array+0x1c>
 80036f6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036fa:	4798      	blx	r3
 80036fc:	3501      	adds	r5, #1
 80036fe:	e7f8      	b.n	80036f2 <__libc_init_array+0xe>
 8003700:	f003 fd18 	bl	8007134 <_init>
 8003704:	4c08      	ldr	r4, [pc, #32]	; (8003728 <__libc_init_array+0x44>)
 8003706:	4b09      	ldr	r3, [pc, #36]	; (800372c <__libc_init_array+0x48>)
 8003708:	1ae4      	subs	r4, r4, r3
 800370a:	10a4      	asrs	r4, r4, #2
 800370c:	2500      	movs	r5, #0
 800370e:	461e      	mov	r6, r3
 8003710:	42a5      	cmp	r5, r4
 8003712:	d004      	beq.n	800371e <__libc_init_array+0x3a>
 8003714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003718:	4798      	blx	r3
 800371a:	3501      	adds	r5, #1
 800371c:	e7f8      	b.n	8003710 <__libc_init_array+0x2c>
 800371e:	bd70      	pop	{r4, r5, r6, pc}
 8003720:	08007474 	.word	0x08007474
 8003724:	08007474 	.word	0x08007474
 8003728:	08007478 	.word	0x08007478
 800372c:	08007474 	.word	0x08007474

08003730 <__itoa>:
 8003730:	1e93      	subs	r3, r2, #2
 8003732:	2b22      	cmp	r3, #34	; 0x22
 8003734:	b510      	push	{r4, lr}
 8003736:	460c      	mov	r4, r1
 8003738:	d902      	bls.n	8003740 <__itoa+0x10>
 800373a:	2000      	movs	r0, #0
 800373c:	7008      	strb	r0, [r1, #0]
 800373e:	bd10      	pop	{r4, pc}
 8003740:	2a0a      	cmp	r2, #10
 8003742:	d106      	bne.n	8003752 <__itoa+0x22>
 8003744:	2800      	cmp	r0, #0
 8003746:	da04      	bge.n	8003752 <__itoa+0x22>
 8003748:	232d      	movs	r3, #45	; 0x2d
 800374a:	700b      	strb	r3, [r1, #0]
 800374c:	4240      	negs	r0, r0
 800374e:	2101      	movs	r1, #1
 8003750:	e000      	b.n	8003754 <__itoa+0x24>
 8003752:	2100      	movs	r1, #0
 8003754:	4421      	add	r1, r4
 8003756:	f000 f825 	bl	80037a4 <__utoa>
 800375a:	4620      	mov	r0, r4
 800375c:	bd10      	pop	{r4, pc}

0800375e <itoa>:
 800375e:	f7ff bfe7 	b.w	8003730 <__itoa>

08003762 <memset>:
 8003762:	4402      	add	r2, r0
 8003764:	4603      	mov	r3, r0
 8003766:	4293      	cmp	r3, r2
 8003768:	d002      	beq.n	8003770 <memset+0xe>
 800376a:	f803 1b01 	strb.w	r1, [r3], #1
 800376e:	e7fa      	b.n	8003766 <memset+0x4>
 8003770:	4770      	bx	lr
	...

08003774 <printf>:
 8003774:	b40f      	push	{r0, r1, r2, r3}
 8003776:	4b0a      	ldr	r3, [pc, #40]	; (80037a0 <printf+0x2c>)
 8003778:	b513      	push	{r0, r1, r4, lr}
 800377a:	681c      	ldr	r4, [r3, #0]
 800377c:	b124      	cbz	r4, 8003788 <printf+0x14>
 800377e:	69a3      	ldr	r3, [r4, #24]
 8003780:	b913      	cbnz	r3, 8003788 <printf+0x14>
 8003782:	4620      	mov	r0, r4
 8003784:	f002 f816 	bl	80057b4 <__sinit>
 8003788:	ab05      	add	r3, sp, #20
 800378a:	9a04      	ldr	r2, [sp, #16]
 800378c:	68a1      	ldr	r1, [r4, #8]
 800378e:	9301      	str	r3, [sp, #4]
 8003790:	4620      	mov	r0, r4
 8003792:	f000 f845 	bl	8003820 <_vfprintf_r>
 8003796:	b002      	add	sp, #8
 8003798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800379c:	b004      	add	sp, #16
 800379e:	4770      	bx	lr
 80037a0:	200000fc 	.word	0x200000fc

080037a4 <__utoa>:
 80037a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037a6:	4c1c      	ldr	r4, [pc, #112]	; (8003818 <__utoa+0x74>)
 80037a8:	b08b      	sub	sp, #44	; 0x2c
 80037aa:	4603      	mov	r3, r0
 80037ac:	460f      	mov	r7, r1
 80037ae:	466d      	mov	r5, sp
 80037b0:	f104 0e20 	add.w	lr, r4, #32
 80037b4:	6820      	ldr	r0, [r4, #0]
 80037b6:	6861      	ldr	r1, [r4, #4]
 80037b8:	462e      	mov	r6, r5
 80037ba:	c603      	stmia	r6!, {r0, r1}
 80037bc:	3408      	adds	r4, #8
 80037be:	4574      	cmp	r4, lr
 80037c0:	4635      	mov	r5, r6
 80037c2:	d1f7      	bne.n	80037b4 <__utoa+0x10>
 80037c4:	7921      	ldrb	r1, [r4, #4]
 80037c6:	7131      	strb	r1, [r6, #4]
 80037c8:	1e91      	subs	r1, r2, #2
 80037ca:	6820      	ldr	r0, [r4, #0]
 80037cc:	6030      	str	r0, [r6, #0]
 80037ce:	2922      	cmp	r1, #34	; 0x22
 80037d0:	f04f 0000 	mov.w	r0, #0
 80037d4:	d901      	bls.n	80037da <__utoa+0x36>
 80037d6:	7038      	strb	r0, [r7, #0]
 80037d8:	e01c      	b.n	8003814 <__utoa+0x70>
 80037da:	1e7d      	subs	r5, r7, #1
 80037dc:	fbb3 f4f2 	udiv	r4, r3, r2
 80037e0:	ae0a      	add	r6, sp, #40	; 0x28
 80037e2:	fb02 3314 	mls	r3, r2, r4, r3
 80037e6:	4433      	add	r3, r6
 80037e8:	1c41      	adds	r1, r0, #1
 80037ea:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80037ee:	f805 3f01 	strb.w	r3, [r5, #1]!
 80037f2:	4623      	mov	r3, r4
 80037f4:	b10c      	cbz	r4, 80037fa <__utoa+0x56>
 80037f6:	4608      	mov	r0, r1
 80037f8:	e7f0      	b.n	80037dc <__utoa+0x38>
 80037fa:	547c      	strb	r4, [r7, r1]
 80037fc:	183a      	adds	r2, r7, r0
 80037fe:	1ac1      	subs	r1, r0, r3
 8003800:	428b      	cmp	r3, r1
 8003802:	da06      	bge.n	8003812 <__utoa+0x6e>
 8003804:	5cf9      	ldrb	r1, [r7, r3]
 8003806:	7814      	ldrb	r4, [r2, #0]
 8003808:	54fc      	strb	r4, [r7, r3]
 800380a:	f802 1901 	strb.w	r1, [r2], #-1
 800380e:	3301      	adds	r3, #1
 8003810:	e7f5      	b.n	80037fe <__utoa+0x5a>
 8003812:	4638      	mov	r0, r7
 8003814:	b00b      	add	sp, #44	; 0x2c
 8003816:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003818:	08007279 	.word	0x08007279
 800381c:	00000000 	.word	0x00000000

08003820 <_vfprintf_r>:
 8003820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003824:	b0bd      	sub	sp, #244	; 0xf4
 8003826:	468b      	mov	fp, r1
 8003828:	9205      	str	r2, [sp, #20]
 800382a:	461c      	mov	r4, r3
 800382c:	461f      	mov	r7, r3
 800382e:	4682      	mov	sl, r0
 8003830:	f002 f96e 	bl	8005b10 <_localeconv_r>
 8003834:	6803      	ldr	r3, [r0, #0]
 8003836:	930d      	str	r3, [sp, #52]	; 0x34
 8003838:	4618      	mov	r0, r3
 800383a:	f7fc fd19 	bl	8000270 <strlen>
 800383e:	9008      	str	r0, [sp, #32]
 8003840:	f1ba 0f00 	cmp.w	sl, #0
 8003844:	d005      	beq.n	8003852 <_vfprintf_r+0x32>
 8003846:	f8da 3018 	ldr.w	r3, [sl, #24]
 800384a:	b913      	cbnz	r3, 8003852 <_vfprintf_r+0x32>
 800384c:	4650      	mov	r0, sl
 800384e:	f001 ffb1 	bl	80057b4 <__sinit>
 8003852:	4b9d      	ldr	r3, [pc, #628]	; (8003ac8 <_vfprintf_r+0x2a8>)
 8003854:	459b      	cmp	fp, r3
 8003856:	d102      	bne.n	800385e <_vfprintf_r+0x3e>
 8003858:	f8da b004 	ldr.w	fp, [sl, #4]
 800385c:	e00a      	b.n	8003874 <_vfprintf_r+0x54>
 800385e:	4b9b      	ldr	r3, [pc, #620]	; (8003acc <_vfprintf_r+0x2ac>)
 8003860:	459b      	cmp	fp, r3
 8003862:	d102      	bne.n	800386a <_vfprintf_r+0x4a>
 8003864:	f8da b008 	ldr.w	fp, [sl, #8]
 8003868:	e004      	b.n	8003874 <_vfprintf_r+0x54>
 800386a:	4b99      	ldr	r3, [pc, #612]	; (8003ad0 <_vfprintf_r+0x2b0>)
 800386c:	459b      	cmp	fp, r3
 800386e:	bf08      	it	eq
 8003870:	f8da b00c 	ldreq.w	fp, [sl, #12]
 8003874:	f9bb 300c 	ldrsh.w	r3, [fp, #12]
 8003878:	0498      	lsls	r0, r3, #18
 800387a:	d409      	bmi.n	8003890 <_vfprintf_r+0x70>
 800387c:	f8db 2064 	ldr.w	r2, [fp, #100]	; 0x64
 8003880:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003888:	f8ab 300c 	strh.w	r3, [fp, #12]
 800388c:	f8cb 2064 	str.w	r2, [fp, #100]	; 0x64
 8003890:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 8003894:	0719      	lsls	r1, r3, #28
 8003896:	d509      	bpl.n	80038ac <_vfprintf_r+0x8c>
 8003898:	f8db 3010 	ldr.w	r3, [fp, #16]
 800389c:	b133      	cbz	r3, 80038ac <_vfprintf_r+0x8c>
 800389e:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 80038a2:	f003 031a 	and.w	r3, r3, #26
 80038a6:	2b0a      	cmp	r3, #10
 80038a8:	d116      	bne.n	80038d8 <_vfprintf_r+0xb8>
 80038aa:	e009      	b.n	80038c0 <_vfprintf_r+0xa0>
 80038ac:	4659      	mov	r1, fp
 80038ae:	4650      	mov	r0, sl
 80038b0:	f000 ffe6 	bl	8004880 <__swsetup_r>
 80038b4:	2800      	cmp	r0, #0
 80038b6:	d0f2      	beq.n	800389e <_vfprintf_r+0x7e>
 80038b8:	f04f 30ff 	mov.w	r0, #4294967295
 80038bc:	f000 bfa3 	b.w	8004806 <_vfprintf_r+0xfe6>
 80038c0:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db07      	blt.n	80038d8 <_vfprintf_r+0xb8>
 80038c8:	4623      	mov	r3, r4
 80038ca:	9a05      	ldr	r2, [sp, #20]
 80038cc:	4659      	mov	r1, fp
 80038ce:	4650      	mov	r0, sl
 80038d0:	f000 ffa0 	bl	8004814 <__sbprintf>
 80038d4:	f000 bf97 	b.w	8004806 <_vfprintf_r+0xfe6>
 80038d8:	ed9f 7b79 	vldr	d7, [pc, #484]	; 8003ac0 <_vfprintf_r+0x2a0>
 80038dc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80038e0:	2300      	movs	r3, #0
 80038e2:	ac2c      	add	r4, sp, #176	; 0xb0
 80038e4:	941f      	str	r4, [sp, #124]	; 0x7c
 80038e6:	9321      	str	r3, [sp, #132]	; 0x84
 80038e8:	9320      	str	r3, [sp, #128]	; 0x80
 80038ea:	9304      	str	r3, [sp, #16]
 80038ec:	9311      	str	r3, [sp, #68]	; 0x44
 80038ee:	9310      	str	r3, [sp, #64]	; 0x40
 80038f0:	930a      	str	r3, [sp, #40]	; 0x28
 80038f2:	9d05      	ldr	r5, [sp, #20]
 80038f4:	462b      	mov	r3, r5
 80038f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80038fa:	b11a      	cbz	r2, 8003904 <_vfprintf_r+0xe4>
 80038fc:	2a25      	cmp	r2, #37	; 0x25
 80038fe:	d001      	beq.n	8003904 <_vfprintf_r+0xe4>
 8003900:	461d      	mov	r5, r3
 8003902:	e7f7      	b.n	80038f4 <_vfprintf_r+0xd4>
 8003904:	9b05      	ldr	r3, [sp, #20]
 8003906:	1aee      	subs	r6, r5, r3
 8003908:	d017      	beq.n	800393a <_vfprintf_r+0x11a>
 800390a:	e884 0048 	stmia.w	r4, {r3, r6}
 800390e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003910:	4433      	add	r3, r6
 8003912:	9321      	str	r3, [sp, #132]	; 0x84
 8003914:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003916:	3301      	adds	r3, #1
 8003918:	2b07      	cmp	r3, #7
 800391a:	9320      	str	r3, [sp, #128]	; 0x80
 800391c:	dc01      	bgt.n	8003922 <_vfprintf_r+0x102>
 800391e:	3408      	adds	r4, #8
 8003920:	e008      	b.n	8003934 <_vfprintf_r+0x114>
 8003922:	aa1f      	add	r2, sp, #124	; 0x7c
 8003924:	4659      	mov	r1, fp
 8003926:	4650      	mov	r0, sl
 8003928:	f002 febd 	bl	80066a6 <__sprint_r>
 800392c:	2800      	cmp	r0, #0
 800392e:	f040 8633 	bne.w	8004598 <_vfprintf_r+0xd78>
 8003932:	ac2c      	add	r4, sp, #176	; 0xb0
 8003934:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003936:	4433      	add	r3, r6
 8003938:	930a      	str	r3, [sp, #40]	; 0x28
 800393a:	782b      	ldrb	r3, [r5, #0]
 800393c:	2b00      	cmp	r3, #0
 800393e:	f000 8624 	beq.w	800458a <_vfprintf_r+0xd6a>
 8003942:	2200      	movs	r2, #0
 8003944:	1c6b      	adds	r3, r5, #1
 8003946:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 800394a:	4611      	mov	r1, r2
 800394c:	f04f 39ff 	mov.w	r9, #4294967295
 8003950:	9209      	str	r2, [sp, #36]	; 0x24
 8003952:	4615      	mov	r5, r2
 8003954:	200a      	movs	r0, #10
 8003956:	1c5e      	adds	r6, r3, #1
 8003958:	781b      	ldrb	r3, [r3, #0]
 800395a:	9605      	str	r6, [sp, #20]
 800395c:	9302      	str	r3, [sp, #8]
 800395e:	9b02      	ldr	r3, [sp, #8]
 8003960:	3b20      	subs	r3, #32
 8003962:	2b58      	cmp	r3, #88	; 0x58
 8003964:	f200 826a 	bhi.w	8003e3c <_vfprintf_r+0x61c>
 8003968:	e8df f013 	tbh	[pc, r3, lsl #1]
 800396c:	0268005c 	.word	0x0268005c
 8003970:	006c0268 	.word	0x006c0268
 8003974:	02680268 	.word	0x02680268
 8003978:	02680268 	.word	0x02680268
 800397c:	02680268 	.word	0x02680268
 8003980:	0059006f 	.word	0x0059006f
 8003984:	007a0268 	.word	0x007a0268
 8003988:	0268007d 	.word	0x0268007d
 800398c:	00b600a4 	.word	0x00b600a4
 8003990:	00b600b6 	.word	0x00b600b6
 8003994:	00b600b6 	.word	0x00b600b6
 8003998:	00b600b6 	.word	0x00b600b6
 800399c:	00b600b6 	.word	0x00b600b6
 80039a0:	02680268 	.word	0x02680268
 80039a4:	02680268 	.word	0x02680268
 80039a8:	02680268 	.word	0x02680268
 80039ac:	02680268 	.word	0x02680268
 80039b0:	02680268 	.word	0x02680268
 80039b4:	011200e6 	.word	0x011200e6
 80039b8:	01120268 	.word	0x01120268
 80039bc:	02680268 	.word	0x02680268
 80039c0:	02680268 	.word	0x02680268
 80039c4:	026800c9 	.word	0x026800c9
 80039c8:	01590268 	.word	0x01590268
 80039cc:	02680268 	.word	0x02680268
 80039d0:	02680268 	.word	0x02680268
 80039d4:	01a00268 	.word	0x01a00268
 80039d8:	02680268 	.word	0x02680268
 80039dc:	02680067 	.word	0x02680067
 80039e0:	02680268 	.word	0x02680268
 80039e4:	02680268 	.word	0x02680268
 80039e8:	02680268 	.word	0x02680268
 80039ec:	02680268 	.word	0x02680268
 80039f0:	00dd0268 	.word	0x00dd0268
 80039f4:	01120061 	.word	0x01120061
 80039f8:	01120112 	.word	0x01120112
 80039fc:	006100cc 	.word	0x006100cc
 8003a00:	02680268 	.word	0x02680268
 8003a04:	026800cf 	.word	0x026800cf
 8003a08:	015b013b 	.word	0x015b013b
 8003a0c:	00da0176 	.word	0x00da0176
 8003a10:	01870268 	.word	0x01870268
 8003a14:	01a20268 	.word	0x01a20268
 8003a18:	02680268 	.word	0x02680268
 8003a1c:	01ba      	.short	0x01ba
 8003a1e:	2201      	movs	r2, #1
 8003a20:	212b      	movs	r1, #43	; 0x2b
 8003a22:	e002      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003a24:	b909      	cbnz	r1, 8003a2a <_vfprintf_r+0x20a>
 8003a26:	2201      	movs	r2, #1
 8003a28:	2120      	movs	r1, #32
 8003a2a:	9b05      	ldr	r3, [sp, #20]
 8003a2c:	e793      	b.n	8003956 <_vfprintf_r+0x136>
 8003a2e:	2a00      	cmp	r2, #0
 8003a30:	f000 8087 	beq.w	8003b42 <_vfprintf_r+0x322>
 8003a34:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003a38:	e083      	b.n	8003b42 <_vfprintf_r+0x322>
 8003a3a:	b10a      	cbz	r2, 8003a40 <_vfprintf_r+0x220>
 8003a3c:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003a40:	4b24      	ldr	r3, [pc, #144]	; (8003ad4 <_vfprintf_r+0x2b4>)
 8003a42:	e151      	b.n	8003ce8 <_vfprintf_r+0x4c8>
 8003a44:	f045 0501 	orr.w	r5, r5, #1
 8003a48:	e7ef      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003a4a:	683e      	ldr	r6, [r7, #0]
 8003a4c:	9609      	str	r6, [sp, #36]	; 0x24
 8003a4e:	2e00      	cmp	r6, #0
 8003a50:	f107 0304 	add.w	r3, r7, #4
 8003a54:	db01      	blt.n	8003a5a <_vfprintf_r+0x23a>
 8003a56:	461f      	mov	r7, r3
 8003a58:	e7e7      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003a5a:	4276      	negs	r6, r6
 8003a5c:	9609      	str	r6, [sp, #36]	; 0x24
 8003a5e:	461f      	mov	r7, r3
 8003a60:	f045 0504 	orr.w	r5, r5, #4
 8003a64:	e7e1      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003a66:	9e05      	ldr	r6, [sp, #20]
 8003a68:	9b05      	ldr	r3, [sp, #20]
 8003a6a:	7836      	ldrb	r6, [r6, #0]
 8003a6c:	9602      	str	r6, [sp, #8]
 8003a6e:	2e2a      	cmp	r6, #42	; 0x2a
 8003a70:	f103 0301 	add.w	r3, r3, #1
 8003a74:	d002      	beq.n	8003a7c <_vfprintf_r+0x25c>
 8003a76:	f04f 0900 	mov.w	r9, #0
 8003a7a:	e00a      	b.n	8003a92 <_vfprintf_r+0x272>
 8003a7c:	f8d7 9000 	ldr.w	r9, [r7]
 8003a80:	9305      	str	r3, [sp, #20]
 8003a82:	1d3e      	adds	r6, r7, #4
 8003a84:	f1b9 0f00 	cmp.w	r9, #0
 8003a88:	4637      	mov	r7, r6
 8003a8a:	dace      	bge.n	8003a2a <_vfprintf_r+0x20a>
 8003a8c:	f04f 39ff 	mov.w	r9, #4294967295
 8003a90:	e7cb      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003a92:	9305      	str	r3, [sp, #20]
 8003a94:	9b02      	ldr	r3, [sp, #8]
 8003a96:	3b30      	subs	r3, #48	; 0x30
 8003a98:	2b09      	cmp	r3, #9
 8003a9a:	d808      	bhi.n	8003aae <_vfprintf_r+0x28e>
 8003a9c:	fb00 3909 	mla	r9, r0, r9, r3
 8003aa0:	9b05      	ldr	r3, [sp, #20]
 8003aa2:	461e      	mov	r6, r3
 8003aa4:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003aa8:	9302      	str	r3, [sp, #8]
 8003aaa:	4633      	mov	r3, r6
 8003aac:	e7f1      	b.n	8003a92 <_vfprintf_r+0x272>
 8003aae:	ea49 79e9 	orr.w	r9, r9, r9, asr #31
 8003ab2:	e754      	b.n	800395e <_vfprintf_r+0x13e>
 8003ab4:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 8003ab8:	e7b7      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003aba:	bf00      	nop
 8003abc:	f3af 8000 	nop.w
	...
 8003ac8:	08007300 	.word	0x08007300
 8003acc:	08007320 	.word	0x08007320
 8003ad0:	08007340 	.word	0x08007340
 8003ad4:	080072be 	.word	0x080072be
 8003ad8:	2300      	movs	r3, #0
 8003ada:	9309      	str	r3, [sp, #36]	; 0x24
 8003adc:	9b02      	ldr	r3, [sp, #8]
 8003ade:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8003ae0:	3b30      	subs	r3, #48	; 0x30
 8003ae2:	fb00 3306 	mla	r3, r0, r6, r3
 8003ae6:	9309      	str	r3, [sp, #36]	; 0x24
 8003ae8:	9b05      	ldr	r3, [sp, #20]
 8003aea:	461e      	mov	r6, r3
 8003aec:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003af0:	9302      	str	r3, [sp, #8]
 8003af2:	9b02      	ldr	r3, [sp, #8]
 8003af4:	9605      	str	r6, [sp, #20]
 8003af6:	3b30      	subs	r3, #48	; 0x30
 8003af8:	2b09      	cmp	r3, #9
 8003afa:	d9ef      	bls.n	8003adc <_vfprintf_r+0x2bc>
 8003afc:	e72f      	b.n	800395e <_vfprintf_r+0x13e>
 8003afe:	f045 0508 	orr.w	r5, r5, #8
 8003b02:	e792      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003b04:	f045 0540 	orr.w	r5, r5, #64	; 0x40
 8003b08:	e78f      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003b0a:	9b05      	ldr	r3, [sp, #20]
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	2b6c      	cmp	r3, #108	; 0x6c
 8003b10:	d103      	bne.n	8003b1a <_vfprintf_r+0x2fa>
 8003b12:	9b05      	ldr	r3, [sp, #20]
 8003b14:	3301      	adds	r3, #1
 8003b16:	9305      	str	r3, [sp, #20]
 8003b18:	e002      	b.n	8003b20 <_vfprintf_r+0x300>
 8003b1a:	f045 0510 	orr.w	r5, r5, #16
 8003b1e:	e784      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003b20:	f045 0520 	orr.w	r5, r5, #32
 8003b24:	e781      	b.n	8003a2a <_vfprintf_r+0x20a>
 8003b26:	1d3b      	adds	r3, r7, #4
 8003b28:	9303      	str	r3, [sp, #12]
 8003b2a:	2600      	movs	r6, #0
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003b32:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003b36:	e190      	b.n	8003e5a <_vfprintf_r+0x63a>
 8003b38:	b10a      	cbz	r2, 8003b3e <_vfprintf_r+0x31e>
 8003b3a:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003b3e:	f045 0510 	orr.w	r5, r5, #16
 8003b42:	06aa      	lsls	r2, r5, #26
 8003b44:	d508      	bpl.n	8003b58 <_vfprintf_r+0x338>
 8003b46:	3707      	adds	r7, #7
 8003b48:	f027 0707 	bic.w	r7, r7, #7
 8003b4c:	f107 0308 	add.w	r3, r7, #8
 8003b50:	9303      	str	r3, [sp, #12]
 8003b52:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003b56:	e00e      	b.n	8003b76 <_vfprintf_r+0x356>
 8003b58:	f015 0f10 	tst.w	r5, #16
 8003b5c:	f107 0304 	add.w	r3, r7, #4
 8003b60:	d002      	beq.n	8003b68 <_vfprintf_r+0x348>
 8003b62:	9303      	str	r3, [sp, #12]
 8003b64:	683e      	ldr	r6, [r7, #0]
 8003b66:	e005      	b.n	8003b74 <_vfprintf_r+0x354>
 8003b68:	683e      	ldr	r6, [r7, #0]
 8003b6a:	9303      	str	r3, [sp, #12]
 8003b6c:	f015 0f40 	tst.w	r5, #64	; 0x40
 8003b70:	bf18      	it	ne
 8003b72:	b236      	sxthne	r6, r6
 8003b74:	17f7      	asrs	r7, r6, #31
 8003b76:	2e00      	cmp	r6, #0
 8003b78:	f177 0300 	sbcs.w	r3, r7, #0
 8003b7c:	f280 80de 	bge.w	8003d3c <_vfprintf_r+0x51c>
 8003b80:	4276      	negs	r6, r6
 8003b82:	f04f 032d 	mov.w	r3, #45	; 0x2d
 8003b86:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 8003b8a:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 8003b8e:	e0d5      	b.n	8003d3c <_vfprintf_r+0x51c>
 8003b90:	b10a      	cbz	r2, 8003b96 <_vfprintf_r+0x376>
 8003b92:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003b96:	3707      	adds	r7, #7
 8003b98:	f027 0707 	bic.w	r7, r7, #7
 8003b9c:	f107 0308 	add.w	r3, r7, #8
 8003ba0:	9303      	str	r3, [sp, #12]
 8003ba2:	ed97 7b00 	vldr	d7, [r7]
 8003ba6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003baa:	9b06      	ldr	r3, [sp, #24]
 8003bac:	9312      	str	r3, [sp, #72]	; 0x48
 8003bae:	9b07      	ldr	r3, [sp, #28]
 8003bb0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003bb4:	9313      	str	r3, [sp, #76]	; 0x4c
 8003bb6:	f04f 32ff 	mov.w	r2, #4294967295
 8003bba:	4bab      	ldr	r3, [pc, #684]	; (8003e68 <_vfprintf_r+0x648>)
 8003bbc:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003bc0:	f7fc ffb0 	bl	8000b24 <__aeabi_dcmpun>
 8003bc4:	2800      	cmp	r0, #0
 8003bc6:	f040 84ee 	bne.w	80045a6 <_vfprintf_r+0xd86>
 8003bca:	f04f 32ff 	mov.w	r2, #4294967295
 8003bce:	4ba6      	ldr	r3, [pc, #664]	; (8003e68 <_vfprintf_r+0x648>)
 8003bd0:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8003bd4:	f7fc ff88 	bl	8000ae8 <__aeabi_dcmple>
 8003bd8:	2800      	cmp	r0, #0
 8003bda:	f040 84e4 	bne.w	80045a6 <_vfprintf_r+0xd86>
 8003bde:	f000 bdfb 	b.w	80047d8 <_vfprintf_r+0xfb8>
 8003be2:	b10a      	cbz	r2, 8003be8 <_vfprintf_r+0x3c8>
 8003be4:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003be8:	f015 0f20 	tst.w	r5, #32
 8003bec:	f107 0304 	add.w	r3, r7, #4
 8003bf0:	d007      	beq.n	8003c02 <_vfprintf_r+0x3e2>
 8003bf2:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	17ce      	asrs	r6, r1, #31
 8003bf8:	4608      	mov	r0, r1
 8003bfa:	4631      	mov	r1, r6
 8003bfc:	e9c2 0100 	strd	r0, r1, [r2]
 8003c00:	e00b      	b.n	8003c1a <_vfprintf_r+0x3fa>
 8003c02:	06e9      	lsls	r1, r5, #27
 8003c04:	d406      	bmi.n	8003c14 <_vfprintf_r+0x3f4>
 8003c06:	066a      	lsls	r2, r5, #25
 8003c08:	d504      	bpl.n	8003c14 <_vfprintf_r+0x3f4>
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8003c10:	8011      	strh	r1, [r2, #0]
 8003c12:	e002      	b.n	8003c1a <_vfprintf_r+0x3fa>
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8003c18:	6011      	str	r1, [r2, #0]
 8003c1a:	461f      	mov	r7, r3
 8003c1c:	e669      	b.n	80038f2 <_vfprintf_r+0xd2>
 8003c1e:	f045 0510 	orr.w	r5, r5, #16
 8003c22:	f015 0320 	ands.w	r3, r5, #32
 8003c26:	d009      	beq.n	8003c3c <_vfprintf_r+0x41c>
 8003c28:	3707      	adds	r7, #7
 8003c2a:	f027 0707 	bic.w	r7, r7, #7
 8003c2e:	f107 0308 	add.w	r3, r7, #8
 8003c32:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	2300      	movs	r3, #0
 8003c3a:	e07b      	b.n	8003d34 <_vfprintf_r+0x514>
 8003c3c:	1d3a      	adds	r2, r7, #4
 8003c3e:	f015 0110 	ands.w	r1, r5, #16
 8003c42:	9203      	str	r2, [sp, #12]
 8003c44:	d105      	bne.n	8003c52 <_vfprintf_r+0x432>
 8003c46:	f015 0340 	ands.w	r3, r5, #64	; 0x40
 8003c4a:	d002      	beq.n	8003c52 <_vfprintf_r+0x432>
 8003c4c:	883e      	ldrh	r6, [r7, #0]
 8003c4e:	2700      	movs	r7, #0
 8003c50:	e7f2      	b.n	8003c38 <_vfprintf_r+0x418>
 8003c52:	683e      	ldr	r6, [r7, #0]
 8003c54:	2700      	movs	r7, #0
 8003c56:	e06d      	b.n	8003d34 <_vfprintf_r+0x514>
 8003c58:	1d3b      	adds	r3, r7, #4
 8003c5a:	9303      	str	r3, [sp, #12]
 8003c5c:	2330      	movs	r3, #48	; 0x30
 8003c5e:	2278      	movs	r2, #120	; 0x78
 8003c60:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003c64:	4b81      	ldr	r3, [pc, #516]	; (8003e6c <_vfprintf_r+0x64c>)
 8003c66:	683e      	ldr	r6, [r7, #0]
 8003c68:	9311      	str	r3, [sp, #68]	; 0x44
 8003c6a:	2700      	movs	r7, #0
 8003c6c:	f045 0502 	orr.w	r5, r5, #2
 8003c70:	f88d 2061 	strb.w	r2, [sp, #97]	; 0x61
 8003c74:	2302      	movs	r3, #2
 8003c76:	9202      	str	r2, [sp, #8]
 8003c78:	e05c      	b.n	8003d34 <_vfprintf_r+0x514>
 8003c7a:	2600      	movs	r6, #0
 8003c7c:	1d3b      	adds	r3, r7, #4
 8003c7e:	45b1      	cmp	r9, r6
 8003c80:	9303      	str	r3, [sp, #12]
 8003c82:	f8d7 8000 	ldr.w	r8, [r7]
 8003c86:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003c8a:	db0a      	blt.n	8003ca2 <_vfprintf_r+0x482>
 8003c8c:	464a      	mov	r2, r9
 8003c8e:	4631      	mov	r1, r6
 8003c90:	4640      	mov	r0, r8
 8003c92:	f7fc fa9d 	bl	80001d0 <memchr>
 8003c96:	2800      	cmp	r0, #0
 8003c98:	f000 80ea 	beq.w	8003e70 <_vfprintf_r+0x650>
 8003c9c:	ebc8 0900 	rsb	r9, r8, r0
 8003ca0:	e0e7      	b.n	8003e72 <_vfprintf_r+0x652>
 8003ca2:	4640      	mov	r0, r8
 8003ca4:	f7fc fae4 	bl	8000270 <strlen>
 8003ca8:	4681      	mov	r9, r0
 8003caa:	e0e2      	b.n	8003e72 <_vfprintf_r+0x652>
 8003cac:	f045 0510 	orr.w	r5, r5, #16
 8003cb0:	06ae      	lsls	r6, r5, #26
 8003cb2:	d508      	bpl.n	8003cc6 <_vfprintf_r+0x4a6>
 8003cb4:	3707      	adds	r7, #7
 8003cb6:	f027 0707 	bic.w	r7, r7, #7
 8003cba:	f107 0308 	add.w	r3, r7, #8
 8003cbe:	9303      	str	r3, [sp, #12]
 8003cc0:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003cc4:	e00a      	b.n	8003cdc <_vfprintf_r+0x4bc>
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	f015 0f10 	tst.w	r5, #16
 8003ccc:	9303      	str	r3, [sp, #12]
 8003cce:	d103      	bne.n	8003cd8 <_vfprintf_r+0x4b8>
 8003cd0:	0668      	lsls	r0, r5, #25
 8003cd2:	d501      	bpl.n	8003cd8 <_vfprintf_r+0x4b8>
 8003cd4:	883e      	ldrh	r6, [r7, #0]
 8003cd6:	e000      	b.n	8003cda <_vfprintf_r+0x4ba>
 8003cd8:	683e      	ldr	r6, [r7, #0]
 8003cda:	2700      	movs	r7, #0
 8003cdc:	2301      	movs	r3, #1
 8003cde:	e029      	b.n	8003d34 <_vfprintf_r+0x514>
 8003ce0:	b10a      	cbz	r2, 8003ce6 <_vfprintf_r+0x4c6>
 8003ce2:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003ce6:	4b61      	ldr	r3, [pc, #388]	; (8003e6c <_vfprintf_r+0x64c>)
 8003ce8:	9311      	str	r3, [sp, #68]	; 0x44
 8003cea:	06a9      	lsls	r1, r5, #26
 8003cec:	d508      	bpl.n	8003d00 <_vfprintf_r+0x4e0>
 8003cee:	3707      	adds	r7, #7
 8003cf0:	f027 0707 	bic.w	r7, r7, #7
 8003cf4:	f107 0308 	add.w	r3, r7, #8
 8003cf8:	9303      	str	r3, [sp, #12]
 8003cfa:	e9d7 6700 	ldrd	r6, r7, [r7]
 8003cfe:	e00a      	b.n	8003d16 <_vfprintf_r+0x4f6>
 8003d00:	1d3b      	adds	r3, r7, #4
 8003d02:	f015 0f10 	tst.w	r5, #16
 8003d06:	9303      	str	r3, [sp, #12]
 8003d08:	d103      	bne.n	8003d12 <_vfprintf_r+0x4f2>
 8003d0a:	066a      	lsls	r2, r5, #25
 8003d0c:	d501      	bpl.n	8003d12 <_vfprintf_r+0x4f2>
 8003d0e:	883e      	ldrh	r6, [r7, #0]
 8003d10:	e000      	b.n	8003d14 <_vfprintf_r+0x4f4>
 8003d12:	683e      	ldr	r6, [r7, #0]
 8003d14:	2700      	movs	r7, #0
 8003d16:	07eb      	lsls	r3, r5, #31
 8003d18:	d50b      	bpl.n	8003d32 <_vfprintf_r+0x512>
 8003d1a:	ea56 0307 	orrs.w	r3, r6, r7
 8003d1e:	d008      	beq.n	8003d32 <_vfprintf_r+0x512>
 8003d20:	2330      	movs	r3, #48	; 0x30
 8003d22:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8003d26:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003d2a:	f88d 3061 	strb.w	r3, [sp, #97]	; 0x61
 8003d2e:	f045 0502 	orr.w	r5, r5, #2
 8003d32:	2302      	movs	r3, #2
 8003d34:	2200      	movs	r2, #0
 8003d36:	f88d 205f 	strb.w	r2, [sp, #95]	; 0x5f
 8003d3a:	e000      	b.n	8003d3e <_vfprintf_r+0x51e>
 8003d3c:	2301      	movs	r3, #1
 8003d3e:	f1b9 0f00 	cmp.w	r9, #0
 8003d42:	f2c0 855a 	blt.w	80047fa <_vfprintf_r+0xfda>
 8003d46:	ea56 0207 	orrs.w	r2, r6, r7
 8003d4a:	f025 0180 	bic.w	r1, r5, #128	; 0x80
 8003d4e:	d103      	bne.n	8003d58 <_vfprintf_r+0x538>
 8003d50:	f1b9 0f00 	cmp.w	r9, #0
 8003d54:	d05f      	beq.n	8003e16 <_vfprintf_r+0x5f6>
 8003d56:	e006      	b.n	8003d66 <_vfprintf_r+0x546>
 8003d58:	460d      	mov	r5, r1
 8003d5a:	2b01      	cmp	r3, #1
 8003d5c:	d025      	beq.n	8003daa <_vfprintf_r+0x58a>
 8003d5e:	2b02      	cmp	r3, #2
 8003d60:	d046      	beq.n	8003df0 <_vfprintf_r+0x5d0>
 8003d62:	4629      	mov	r1, r5
 8003d64:	e007      	b.n	8003d76 <_vfprintf_r+0x556>
 8003d66:	460d      	mov	r5, r1
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d022      	beq.n	8003db2 <_vfprintf_r+0x592>
 8003d6c:	2b02      	cmp	r3, #2
 8003d6e:	d03d      	beq.n	8003dec <_vfprintf_r+0x5cc>
 8003d70:	4629      	mov	r1, r5
 8003d72:	2600      	movs	r6, #0
 8003d74:	2700      	movs	r7, #0
 8003d76:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003d7a:	08f2      	lsrs	r2, r6, #3
 8003d7c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 8003d80:	08f8      	lsrs	r0, r7, #3
 8003d82:	f006 0307 	and.w	r3, r6, #7
 8003d86:	4607      	mov	r7, r0
 8003d88:	4616      	mov	r6, r2
 8003d8a:	3330      	adds	r3, #48	; 0x30
 8003d8c:	ea56 0207 	orrs.w	r2, r6, r7
 8003d90:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003d94:	d1f1      	bne.n	8003d7a <_vfprintf_r+0x55a>
 8003d96:	07e8      	lsls	r0, r5, #31
 8003d98:	d548      	bpl.n	8003e2c <_vfprintf_r+0x60c>
 8003d9a:	2b30      	cmp	r3, #48	; 0x30
 8003d9c:	d046      	beq.n	8003e2c <_vfprintf_r+0x60c>
 8003d9e:	2330      	movs	r3, #48	; 0x30
 8003da0:	f808 3c01 	strb.w	r3, [r8, #-1]
 8003da4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003da8:	e040      	b.n	8003e2c <_vfprintf_r+0x60c>
 8003daa:	2f00      	cmp	r7, #0
 8003dac:	bf08      	it	eq
 8003dae:	2e0a      	cmpeq	r6, #10
 8003db0:	d205      	bcs.n	8003dbe <_vfprintf_r+0x59e>
 8003db2:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003db6:	3630      	adds	r6, #48	; 0x30
 8003db8:	f808 6d41 	strb.w	r6, [r8, #-65]!
 8003dbc:	e029      	b.n	8003e12 <_vfprintf_r+0x5f2>
 8003dbe:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003dc2:	4630      	mov	r0, r6
 8003dc4:	4639      	mov	r1, r7
 8003dc6:	220a      	movs	r2, #10
 8003dc8:	2300      	movs	r3, #0
 8003dca:	f7fc fee9 	bl	8000ba0 <__aeabi_uldivmod>
 8003dce:	3230      	adds	r2, #48	; 0x30
 8003dd0:	f808 2d01 	strb.w	r2, [r8, #-1]!
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	4639      	mov	r1, r7
 8003dda:	220a      	movs	r2, #10
 8003ddc:	f7fc fee0 	bl	8000ba0 <__aeabi_uldivmod>
 8003de0:	4606      	mov	r6, r0
 8003de2:	460f      	mov	r7, r1
 8003de4:	ea56 0307 	orrs.w	r3, r6, r7
 8003de8:	d1eb      	bne.n	8003dc2 <_vfprintf_r+0x5a2>
 8003dea:	e012      	b.n	8003e12 <_vfprintf_r+0x5f2>
 8003dec:	2600      	movs	r6, #0
 8003dee:	2700      	movs	r7, #0
 8003df0:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003df4:	f006 030f 	and.w	r3, r6, #15
 8003df8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8003dfa:	5cd3      	ldrb	r3, [r2, r3]
 8003dfc:	f808 3d01 	strb.w	r3, [r8, #-1]!
 8003e00:	0933      	lsrs	r3, r6, #4
 8003e02:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 8003e06:	093a      	lsrs	r2, r7, #4
 8003e08:	461e      	mov	r6, r3
 8003e0a:	4617      	mov	r7, r2
 8003e0c:	ea56 0307 	orrs.w	r3, r6, r7
 8003e10:	d1f0      	bne.n	8003df4 <_vfprintf_r+0x5d4>
 8003e12:	4629      	mov	r1, r5
 8003e14:	e00a      	b.n	8003e2c <_vfprintf_r+0x60c>
 8003e16:	b93b      	cbnz	r3, 8003e28 <_vfprintf_r+0x608>
 8003e18:	07ea      	lsls	r2, r5, #31
 8003e1a:	d505      	bpl.n	8003e28 <_vfprintf_r+0x608>
 8003e1c:	f10d 08f0 	add.w	r8, sp, #240	; 0xf0
 8003e20:	2330      	movs	r3, #48	; 0x30
 8003e22:	f808 3d41 	strb.w	r3, [r8, #-65]!
 8003e26:	e001      	b.n	8003e2c <_vfprintf_r+0x60c>
 8003e28:	f10d 08b0 	add.w	r8, sp, #176	; 0xb0
 8003e2c:	464e      	mov	r6, r9
 8003e2e:	f10d 09b0 	add.w	r9, sp, #176	; 0xb0
 8003e32:	ebc8 0909 	rsb	r9, r8, r9
 8003e36:	460d      	mov	r5, r1
 8003e38:	2700      	movs	r7, #0
 8003e3a:	e01b      	b.n	8003e74 <_vfprintf_r+0x654>
 8003e3c:	b10a      	cbz	r2, 8003e42 <_vfprintf_r+0x622>
 8003e3e:	f88d 105f 	strb.w	r1, [sp, #95]	; 0x5f
 8003e42:	9b02      	ldr	r3, [sp, #8]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 83a0 	beq.w	800458a <_vfprintf_r+0xd6a>
 8003e4a:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8003e4e:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8003e52:	2600      	movs	r6, #0
 8003e54:	f88d 605f 	strb.w	r6, [sp, #95]	; 0x5f
 8003e58:	9703      	str	r7, [sp, #12]
 8003e5a:	f04f 0901 	mov.w	r9, #1
 8003e5e:	4637      	mov	r7, r6
 8003e60:	f10d 0888 	add.w	r8, sp, #136	; 0x88
 8003e64:	e006      	b.n	8003e74 <_vfprintf_r+0x654>
 8003e66:	bf00      	nop
 8003e68:	7fefffff 	.word	0x7fefffff
 8003e6c:	080072cf 	.word	0x080072cf
 8003e70:	4606      	mov	r6, r0
 8003e72:	4637      	mov	r7, r6
 8003e74:	454e      	cmp	r6, r9
 8003e76:	4633      	mov	r3, r6
 8003e78:	bfb8      	it	lt
 8003e7a:	464b      	movlt	r3, r9
 8003e7c:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e7e:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003e82:	b113      	cbz	r3, 8003e8a <_vfprintf_r+0x66a>
 8003e84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8003e86:	3301      	adds	r3, #1
 8003e88:	930b      	str	r3, [sp, #44]	; 0x2c
 8003e8a:	f015 0302 	ands.w	r3, r5, #2
 8003e8e:	9314      	str	r3, [sp, #80]	; 0x50
 8003e90:	bf1e      	ittt	ne
 8003e92:	9b0b      	ldrne	r3, [sp, #44]	; 0x2c
 8003e94:	3302      	addne	r3, #2
 8003e96:	930b      	strne	r3, [sp, #44]	; 0x2c
 8003e98:	f015 0384 	ands.w	r3, r5, #132	; 0x84
 8003e9c:	9315      	str	r3, [sp, #84]	; 0x54
 8003e9e:	d139      	bne.n	8003f14 <_vfprintf_r+0x6f4>
 8003ea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003ea2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	930c      	str	r3, [sp, #48]	; 0x30
 8003eaa:	dd33      	ble.n	8003f14 <_vfprintf_r+0x6f4>
 8003eac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	4ba6      	ldr	r3, [pc, #664]	; (800414c <_vfprintf_r+0x92c>)
 8003eb2:	6023      	str	r3, [r4, #0]
 8003eb4:	dd18      	ble.n	8003ee8 <_vfprintf_r+0x6c8>
 8003eb6:	2310      	movs	r3, #16
 8003eb8:	6063      	str	r3, [r4, #4]
 8003eba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ebc:	3310      	adds	r3, #16
 8003ebe:	9321      	str	r3, [sp, #132]	; 0x84
 8003ec0:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	2b07      	cmp	r3, #7
 8003ec6:	9320      	str	r3, [sp, #128]	; 0x80
 8003ec8:	dc01      	bgt.n	8003ece <_vfprintf_r+0x6ae>
 8003eca:	3408      	adds	r4, #8
 8003ecc:	e008      	b.n	8003ee0 <_vfprintf_r+0x6c0>
 8003ece:	aa1f      	add	r2, sp, #124	; 0x7c
 8003ed0:	4659      	mov	r1, fp
 8003ed2:	4650      	mov	r0, sl
 8003ed4:	f002 fbe7 	bl	80066a6 <__sprint_r>
 8003ed8:	2800      	cmp	r0, #0
 8003eda:	f040 835d 	bne.w	8004598 <_vfprintf_r+0xd78>
 8003ede:	ac2c      	add	r4, sp, #176	; 0xb0
 8003ee0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003ee2:	3b10      	subs	r3, #16
 8003ee4:	930c      	str	r3, [sp, #48]	; 0x30
 8003ee6:	e7e1      	b.n	8003eac <_vfprintf_r+0x68c>
 8003ee8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003eea:	6063      	str	r3, [r4, #4]
 8003eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003eee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ef0:	4413      	add	r3, r2
 8003ef2:	9321      	str	r3, [sp, #132]	; 0x84
 8003ef4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003ef6:	3301      	adds	r3, #1
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	9320      	str	r3, [sp, #128]	; 0x80
 8003efc:	dc01      	bgt.n	8003f02 <_vfprintf_r+0x6e2>
 8003efe:	3408      	adds	r4, #8
 8003f00:	e008      	b.n	8003f14 <_vfprintf_r+0x6f4>
 8003f02:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f04:	4659      	mov	r1, fp
 8003f06:	4650      	mov	r0, sl
 8003f08:	f002 fbcd 	bl	80066a6 <__sprint_r>
 8003f0c:	2800      	cmp	r0, #0
 8003f0e:	f040 8343 	bne.w	8004598 <_vfprintf_r+0xd78>
 8003f12:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f14:	f89d 305f 	ldrb.w	r3, [sp, #95]	; 0x5f
 8003f18:	b1bb      	cbz	r3, 8003f4a <_vfprintf_r+0x72a>
 8003f1a:	f10d 035f 	add.w	r3, sp, #95	; 0x5f
 8003f1e:	6023      	str	r3, [r4, #0]
 8003f20:	2301      	movs	r3, #1
 8003f22:	6063      	str	r3, [r4, #4]
 8003f24:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f26:	3301      	adds	r3, #1
 8003f28:	9321      	str	r3, [sp, #132]	; 0x84
 8003f2a:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	2b07      	cmp	r3, #7
 8003f30:	9320      	str	r3, [sp, #128]	; 0x80
 8003f32:	dc01      	bgt.n	8003f38 <_vfprintf_r+0x718>
 8003f34:	3408      	adds	r4, #8
 8003f36:	e008      	b.n	8003f4a <_vfprintf_r+0x72a>
 8003f38:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f3a:	4659      	mov	r1, fp
 8003f3c:	4650      	mov	r0, sl
 8003f3e:	f002 fbb2 	bl	80066a6 <__sprint_r>
 8003f42:	2800      	cmp	r0, #0
 8003f44:	f040 8328 	bne.w	8004598 <_vfprintf_r+0xd78>
 8003f48:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f4a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003f4c:	b1b3      	cbz	r3, 8003f7c <_vfprintf_r+0x75c>
 8003f4e:	ab18      	add	r3, sp, #96	; 0x60
 8003f50:	6023      	str	r3, [r4, #0]
 8003f52:	2302      	movs	r3, #2
 8003f54:	6063      	str	r3, [r4, #4]
 8003f56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f58:	3302      	adds	r3, #2
 8003f5a:	9321      	str	r3, [sp, #132]	; 0x84
 8003f5c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003f5e:	3301      	adds	r3, #1
 8003f60:	2b07      	cmp	r3, #7
 8003f62:	9320      	str	r3, [sp, #128]	; 0x80
 8003f64:	dc01      	bgt.n	8003f6a <_vfprintf_r+0x74a>
 8003f66:	3408      	adds	r4, #8
 8003f68:	e008      	b.n	8003f7c <_vfprintf_r+0x75c>
 8003f6a:	aa1f      	add	r2, sp, #124	; 0x7c
 8003f6c:	4659      	mov	r1, fp
 8003f6e:	4650      	mov	r0, sl
 8003f70:	f002 fb99 	bl	80066a6 <__sprint_r>
 8003f74:	2800      	cmp	r0, #0
 8003f76:	f040 830f 	bne.w	8004598 <_vfprintf_r+0xd78>
 8003f7a:	ac2c      	add	r4, sp, #176	; 0xb0
 8003f7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003f7e:	2b80      	cmp	r3, #128	; 0x80
 8003f80:	d135      	bne.n	8003fee <_vfprintf_r+0x7ce>
 8003f82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003f86:	1a9b      	subs	r3, r3, r2
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	dd30      	ble.n	8003fee <_vfprintf_r+0x7ce>
 8003f8c:	4a70      	ldr	r2, [pc, #448]	; (8004150 <_vfprintf_r+0x930>)
 8003f8e:	6022      	str	r2, [r4, #0]
 8003f90:	2b10      	cmp	r3, #16
 8003f92:	dd18      	ble.n	8003fc6 <_vfprintf_r+0x7a6>
 8003f94:	2210      	movs	r2, #16
 8003f96:	6062      	str	r2, [r4, #4]
 8003f98:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003f9a:	3210      	adds	r2, #16
 8003f9c:	9221      	str	r2, [sp, #132]	; 0x84
 8003f9e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8003fa0:	3201      	adds	r2, #1
 8003fa2:	2a07      	cmp	r2, #7
 8003fa4:	9220      	str	r2, [sp, #128]	; 0x80
 8003fa6:	dc01      	bgt.n	8003fac <_vfprintf_r+0x78c>
 8003fa8:	3408      	adds	r4, #8
 8003faa:	e00a      	b.n	8003fc2 <_vfprintf_r+0x7a2>
 8003fac:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fae:	4659      	mov	r1, fp
 8003fb0:	4650      	mov	r0, sl
 8003fb2:	930c      	str	r3, [sp, #48]	; 0x30
 8003fb4:	f002 fb77 	bl	80066a6 <__sprint_r>
 8003fb8:	2800      	cmp	r0, #0
 8003fba:	f040 82ed 	bne.w	8004598 <_vfprintf_r+0xd78>
 8003fbe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003fc0:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fc2:	3b10      	subs	r3, #16
 8003fc4:	e7e2      	b.n	8003f8c <_vfprintf_r+0x76c>
 8003fc6:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003fc8:	6063      	str	r3, [r4, #4]
 8003fca:	4413      	add	r3, r2
 8003fcc:	9321      	str	r3, [sp, #132]	; 0x84
 8003fce:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	2b07      	cmp	r3, #7
 8003fd4:	9320      	str	r3, [sp, #128]	; 0x80
 8003fd6:	dc01      	bgt.n	8003fdc <_vfprintf_r+0x7bc>
 8003fd8:	3408      	adds	r4, #8
 8003fda:	e008      	b.n	8003fee <_vfprintf_r+0x7ce>
 8003fdc:	aa1f      	add	r2, sp, #124	; 0x7c
 8003fde:	4659      	mov	r1, fp
 8003fe0:	4650      	mov	r0, sl
 8003fe2:	f002 fb60 	bl	80066a6 <__sprint_r>
 8003fe6:	2800      	cmp	r0, #0
 8003fe8:	f040 82d6 	bne.w	8004598 <_vfprintf_r+0xd78>
 8003fec:	ac2c      	add	r4, sp, #176	; 0xb0
 8003fee:	ebc9 0606 	rsb	r6, r9, r6
 8003ff2:	2e00      	cmp	r6, #0
 8003ff4:	dd2e      	ble.n	8004054 <_vfprintf_r+0x834>
 8003ff6:	4b56      	ldr	r3, [pc, #344]	; (8004150 <_vfprintf_r+0x930>)
 8003ff8:	6023      	str	r3, [r4, #0]
 8003ffa:	2e10      	cmp	r6, #16
 8003ffc:	dd16      	ble.n	800402c <_vfprintf_r+0x80c>
 8003ffe:	2310      	movs	r3, #16
 8004000:	6063      	str	r3, [r4, #4]
 8004002:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004004:	3310      	adds	r3, #16
 8004006:	9321      	str	r3, [sp, #132]	; 0x84
 8004008:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800400a:	3301      	adds	r3, #1
 800400c:	2b07      	cmp	r3, #7
 800400e:	9320      	str	r3, [sp, #128]	; 0x80
 8004010:	dc01      	bgt.n	8004016 <_vfprintf_r+0x7f6>
 8004012:	3408      	adds	r4, #8
 8004014:	e008      	b.n	8004028 <_vfprintf_r+0x808>
 8004016:	aa1f      	add	r2, sp, #124	; 0x7c
 8004018:	4659      	mov	r1, fp
 800401a:	4650      	mov	r0, sl
 800401c:	f002 fb43 	bl	80066a6 <__sprint_r>
 8004020:	2800      	cmp	r0, #0
 8004022:	f040 82b9 	bne.w	8004598 <_vfprintf_r+0xd78>
 8004026:	ac2c      	add	r4, sp, #176	; 0xb0
 8004028:	3e10      	subs	r6, #16
 800402a:	e7e4      	b.n	8003ff6 <_vfprintf_r+0x7d6>
 800402c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800402e:	9821      	ldr	r0, [sp, #132]	; 0x84
 8004030:	6066      	str	r6, [r4, #4]
 8004032:	3301      	adds	r3, #1
 8004034:	4406      	add	r6, r0
 8004036:	2b07      	cmp	r3, #7
 8004038:	9621      	str	r6, [sp, #132]	; 0x84
 800403a:	9320      	str	r3, [sp, #128]	; 0x80
 800403c:	dc01      	bgt.n	8004042 <_vfprintf_r+0x822>
 800403e:	3408      	adds	r4, #8
 8004040:	e008      	b.n	8004054 <_vfprintf_r+0x834>
 8004042:	aa1f      	add	r2, sp, #124	; 0x7c
 8004044:	4659      	mov	r1, fp
 8004046:	4650      	mov	r0, sl
 8004048:	f002 fb2d 	bl	80066a6 <__sprint_r>
 800404c:	2800      	cmp	r0, #0
 800404e:	f040 82a3 	bne.w	8004598 <_vfprintf_r+0xd78>
 8004052:	ac2c      	add	r4, sp, #176	; 0xb0
 8004054:	05eb      	lsls	r3, r5, #23
 8004056:	d414      	bmi.n	8004082 <_vfprintf_r+0x862>
 8004058:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800405a:	e884 0300 	stmia.w	r4, {r8, r9}
 800405e:	444b      	add	r3, r9
 8004060:	9321      	str	r3, [sp, #132]	; 0x84
 8004062:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004064:	3301      	adds	r3, #1
 8004066:	2b07      	cmp	r3, #7
 8004068:	9320      	str	r3, [sp, #128]	; 0x80
 800406a:	f340 8244 	ble.w	80044f6 <_vfprintf_r+0xcd6>
 800406e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004070:	4659      	mov	r1, fp
 8004072:	4650      	mov	r0, sl
 8004074:	f002 fb17 	bl	80066a6 <__sprint_r>
 8004078:	2800      	cmp	r0, #0
 800407a:	f040 828d 	bne.w	8004598 <_vfprintf_r+0xd78>
 800407e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004080:	e23a      	b.n	80044f8 <_vfprintf_r+0xcd8>
 8004082:	9b02      	ldr	r3, [sp, #8]
 8004084:	2b65      	cmp	r3, #101	; 0x65
 8004086:	f340 81ad 	ble.w	80043e4 <_vfprintf_r+0xbc4>
 800408a:	2200      	movs	r2, #0
 800408c:	2300      	movs	r3, #0
 800408e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004092:	f7fc fd15 	bl	8000ac0 <__aeabi_dcmpeq>
 8004096:	2800      	cmp	r0, #0
 8004098:	d05e      	beq.n	8004158 <_vfprintf_r+0x938>
 800409a:	4b2e      	ldr	r3, [pc, #184]	; (8004154 <_vfprintf_r+0x934>)
 800409c:	6023      	str	r3, [r4, #0]
 800409e:	2301      	movs	r3, #1
 80040a0:	6063      	str	r3, [r4, #4]
 80040a2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040a4:	3301      	adds	r3, #1
 80040a6:	9321      	str	r3, [sp, #132]	; 0x84
 80040a8:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040aa:	3301      	adds	r3, #1
 80040ac:	2b07      	cmp	r3, #7
 80040ae:	9320      	str	r3, [sp, #128]	; 0x80
 80040b0:	dc01      	bgt.n	80040b6 <_vfprintf_r+0x896>
 80040b2:	3408      	adds	r4, #8
 80040b4:	e008      	b.n	80040c8 <_vfprintf_r+0x8a8>
 80040b6:	aa1f      	add	r2, sp, #124	; 0x7c
 80040b8:	4659      	mov	r1, fp
 80040ba:	4650      	mov	r0, sl
 80040bc:	f002 faf3 	bl	80066a6 <__sprint_r>
 80040c0:	2800      	cmp	r0, #0
 80040c2:	f040 8269 	bne.w	8004598 <_vfprintf_r+0xd78>
 80040c6:	ac2c      	add	r4, sp, #176	; 0xb0
 80040c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80040ca:	9a04      	ldr	r2, [sp, #16]
 80040cc:	4293      	cmp	r3, r2
 80040ce:	db02      	blt.n	80040d6 <_vfprintf_r+0x8b6>
 80040d0:	07ef      	lsls	r7, r5, #31
 80040d2:	f140 8211 	bpl.w	80044f8 <_vfprintf_r+0xcd8>
 80040d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80040d8:	6023      	str	r3, [r4, #0]
 80040da:	9b08      	ldr	r3, [sp, #32]
 80040dc:	6063      	str	r3, [r4, #4]
 80040de:	9a08      	ldr	r2, [sp, #32]
 80040e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80040e2:	4413      	add	r3, r2
 80040e4:	9321      	str	r3, [sp, #132]	; 0x84
 80040e6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80040e8:	3301      	adds	r3, #1
 80040ea:	2b07      	cmp	r3, #7
 80040ec:	9320      	str	r3, [sp, #128]	; 0x80
 80040ee:	dc01      	bgt.n	80040f4 <_vfprintf_r+0x8d4>
 80040f0:	3408      	adds	r4, #8
 80040f2:	e008      	b.n	8004106 <_vfprintf_r+0x8e6>
 80040f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80040f6:	4659      	mov	r1, fp
 80040f8:	4650      	mov	r0, sl
 80040fa:	f002 fad4 	bl	80066a6 <__sprint_r>
 80040fe:	2800      	cmp	r0, #0
 8004100:	f040 824a 	bne.w	8004598 <_vfprintf_r+0xd78>
 8004104:	ac2c      	add	r4, sp, #176	; 0xb0
 8004106:	9b04      	ldr	r3, [sp, #16]
 8004108:	1e5e      	subs	r6, r3, #1
 800410a:	2e00      	cmp	r6, #0
 800410c:	f340 81f4 	ble.w	80044f8 <_vfprintf_r+0xcd8>
 8004110:	4f0f      	ldr	r7, [pc, #60]	; (8004150 <_vfprintf_r+0x930>)
 8004112:	f04f 0810 	mov.w	r8, #16
 8004116:	2e10      	cmp	r6, #16
 8004118:	f340 8159 	ble.w	80043ce <_vfprintf_r+0xbae>
 800411c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800411e:	3310      	adds	r3, #16
 8004120:	9321      	str	r3, [sp, #132]	; 0x84
 8004122:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004124:	3301      	adds	r3, #1
 8004126:	2b07      	cmp	r3, #7
 8004128:	e884 0180 	stmia.w	r4, {r7, r8}
 800412c:	9320      	str	r3, [sp, #128]	; 0x80
 800412e:	dc01      	bgt.n	8004134 <_vfprintf_r+0x914>
 8004130:	3408      	adds	r4, #8
 8004132:	e008      	b.n	8004146 <_vfprintf_r+0x926>
 8004134:	aa1f      	add	r2, sp, #124	; 0x7c
 8004136:	4659      	mov	r1, fp
 8004138:	4650      	mov	r0, sl
 800413a:	f002 fab4 	bl	80066a6 <__sprint_r>
 800413e:	2800      	cmp	r0, #0
 8004140:	f040 822a 	bne.w	8004598 <_vfprintf_r+0xd78>
 8004144:	ac2c      	add	r4, sp, #176	; 0xb0
 8004146:	3e10      	subs	r6, #16
 8004148:	e7e5      	b.n	8004116 <_vfprintf_r+0x8f6>
 800414a:	bf00      	nop
 800414c:	0800729e 	.word	0x0800729e
 8004150:	080072e2 	.word	0x080072e2
 8004154:	080072e0 	.word	0x080072e0
 8004158:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800415a:	2b00      	cmp	r3, #0
 800415c:	dc7c      	bgt.n	8004258 <_vfprintf_r+0xa38>
 800415e:	4b9f      	ldr	r3, [pc, #636]	; (80043dc <_vfprintf_r+0xbbc>)
 8004160:	6023      	str	r3, [r4, #0]
 8004162:	2301      	movs	r3, #1
 8004164:	6063      	str	r3, [r4, #4]
 8004166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004168:	3301      	adds	r3, #1
 800416a:	9321      	str	r3, [sp, #132]	; 0x84
 800416c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800416e:	3301      	adds	r3, #1
 8004170:	2b07      	cmp	r3, #7
 8004172:	9320      	str	r3, [sp, #128]	; 0x80
 8004174:	dc01      	bgt.n	800417a <_vfprintf_r+0x95a>
 8004176:	3408      	adds	r4, #8
 8004178:	e008      	b.n	800418c <_vfprintf_r+0x96c>
 800417a:	aa1f      	add	r2, sp, #124	; 0x7c
 800417c:	4659      	mov	r1, fp
 800417e:	4650      	mov	r0, sl
 8004180:	f002 fa91 	bl	80066a6 <__sprint_r>
 8004184:	2800      	cmp	r0, #0
 8004186:	f040 8207 	bne.w	8004598 <_vfprintf_r+0xd78>
 800418a:	ac2c      	add	r4, sp, #176	; 0xb0
 800418c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800418e:	b923      	cbnz	r3, 800419a <_vfprintf_r+0x97a>
 8004190:	9b04      	ldr	r3, [sp, #16]
 8004192:	b913      	cbnz	r3, 800419a <_vfprintf_r+0x97a>
 8004194:	07ee      	lsls	r6, r5, #31
 8004196:	f140 81af 	bpl.w	80044f8 <_vfprintf_r+0xcd8>
 800419a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800419c:	6023      	str	r3, [r4, #0]
 800419e:	9b08      	ldr	r3, [sp, #32]
 80041a0:	6063      	str	r3, [r4, #4]
 80041a2:	9a08      	ldr	r2, [sp, #32]
 80041a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80041a6:	4413      	add	r3, r2
 80041a8:	9321      	str	r3, [sp, #132]	; 0x84
 80041aa:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80041ac:	3301      	adds	r3, #1
 80041ae:	2b07      	cmp	r3, #7
 80041b0:	9320      	str	r3, [sp, #128]	; 0x80
 80041b2:	dc02      	bgt.n	80041ba <_vfprintf_r+0x99a>
 80041b4:	f104 0308 	add.w	r3, r4, #8
 80041b8:	e008      	b.n	80041cc <_vfprintf_r+0x9ac>
 80041ba:	aa1f      	add	r2, sp, #124	; 0x7c
 80041bc:	4659      	mov	r1, fp
 80041be:	4650      	mov	r0, sl
 80041c0:	f002 fa71 	bl	80066a6 <__sprint_r>
 80041c4:	2800      	cmp	r0, #0
 80041c6:	f040 81e7 	bne.w	8004598 <_vfprintf_r+0xd78>
 80041ca:	ab2c      	add	r3, sp, #176	; 0xb0
 80041cc:	9e19      	ldr	r6, [sp, #100]	; 0x64
 80041ce:	4276      	negs	r6, r6
 80041d0:	2e00      	cmp	r6, #0
 80041d2:	dd30      	ble.n	8004236 <_vfprintf_r+0xa16>
 80041d4:	4f82      	ldr	r7, [pc, #520]	; (80043e0 <_vfprintf_r+0xbc0>)
 80041d6:	2410      	movs	r4, #16
 80041d8:	2e10      	cmp	r6, #16
 80041da:	dd16      	ble.n	800420a <_vfprintf_r+0x9ea>
 80041dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80041de:	601f      	str	r7, [r3, #0]
 80041e0:	3210      	adds	r2, #16
 80041e2:	9221      	str	r2, [sp, #132]	; 0x84
 80041e4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80041e6:	605c      	str	r4, [r3, #4]
 80041e8:	3201      	adds	r2, #1
 80041ea:	2a07      	cmp	r2, #7
 80041ec:	9220      	str	r2, [sp, #128]	; 0x80
 80041ee:	dc01      	bgt.n	80041f4 <_vfprintf_r+0x9d4>
 80041f0:	3308      	adds	r3, #8
 80041f2:	e008      	b.n	8004206 <_vfprintf_r+0x9e6>
 80041f4:	aa1f      	add	r2, sp, #124	; 0x7c
 80041f6:	4659      	mov	r1, fp
 80041f8:	4650      	mov	r0, sl
 80041fa:	f002 fa54 	bl	80066a6 <__sprint_r>
 80041fe:	2800      	cmp	r0, #0
 8004200:	f040 81ca 	bne.w	8004598 <_vfprintf_r+0xd78>
 8004204:	ab2c      	add	r3, sp, #176	; 0xb0
 8004206:	3e10      	subs	r6, #16
 8004208:	e7e6      	b.n	80041d8 <_vfprintf_r+0x9b8>
 800420a:	4a75      	ldr	r2, [pc, #468]	; (80043e0 <_vfprintf_r+0xbc0>)
 800420c:	e883 0044 	stmia.w	r3, {r2, r6}
 8004210:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004212:	4416      	add	r6, r2
 8004214:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004216:	9621      	str	r6, [sp, #132]	; 0x84
 8004218:	3201      	adds	r2, #1
 800421a:	2a07      	cmp	r2, #7
 800421c:	9220      	str	r2, [sp, #128]	; 0x80
 800421e:	dc01      	bgt.n	8004224 <_vfprintf_r+0xa04>
 8004220:	3308      	adds	r3, #8
 8004222:	e008      	b.n	8004236 <_vfprintf_r+0xa16>
 8004224:	aa1f      	add	r2, sp, #124	; 0x7c
 8004226:	4659      	mov	r1, fp
 8004228:	4650      	mov	r0, sl
 800422a:	f002 fa3c 	bl	80066a6 <__sprint_r>
 800422e:	2800      	cmp	r0, #0
 8004230:	f040 81b2 	bne.w	8004598 <_vfprintf_r+0xd78>
 8004234:	ab2c      	add	r3, sp, #176	; 0xb0
 8004236:	9a04      	ldr	r2, [sp, #16]
 8004238:	605a      	str	r2, [r3, #4]
 800423a:	9904      	ldr	r1, [sp, #16]
 800423c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800423e:	f8c3 8000 	str.w	r8, [r3]
 8004242:	440a      	add	r2, r1
 8004244:	9221      	str	r2, [sp, #132]	; 0x84
 8004246:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004248:	3201      	adds	r2, #1
 800424a:	2a07      	cmp	r2, #7
 800424c:	9220      	str	r2, [sp, #128]	; 0x80
 800424e:	f73f af0e 	bgt.w	800406e <_vfprintf_r+0x84e>
 8004252:	f103 0408 	add.w	r4, r3, #8
 8004256:	e14f      	b.n	80044f8 <_vfprintf_r+0xcd8>
 8004258:	9b04      	ldr	r3, [sp, #16]
 800425a:	42bb      	cmp	r3, r7
 800425c:	bfa8      	it	ge
 800425e:	463b      	movge	r3, r7
 8004260:	2b00      	cmp	r3, #0
 8004262:	461e      	mov	r6, r3
 8004264:	dd15      	ble.n	8004292 <_vfprintf_r+0xa72>
 8004266:	6063      	str	r3, [r4, #4]
 8004268:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800426a:	f8c4 8000 	str.w	r8, [r4]
 800426e:	4433      	add	r3, r6
 8004270:	9321      	str	r3, [sp, #132]	; 0x84
 8004272:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004274:	3301      	adds	r3, #1
 8004276:	2b07      	cmp	r3, #7
 8004278:	9320      	str	r3, [sp, #128]	; 0x80
 800427a:	dc01      	bgt.n	8004280 <_vfprintf_r+0xa60>
 800427c:	3408      	adds	r4, #8
 800427e:	e008      	b.n	8004292 <_vfprintf_r+0xa72>
 8004280:	aa1f      	add	r2, sp, #124	; 0x7c
 8004282:	4659      	mov	r1, fp
 8004284:	4650      	mov	r0, sl
 8004286:	f002 fa0e 	bl	80066a6 <__sprint_r>
 800428a:	2800      	cmp	r0, #0
 800428c:	f040 8184 	bne.w	8004598 <_vfprintf_r+0xd78>
 8004290:	ac2c      	add	r4, sp, #176	; 0xb0
 8004292:	2e00      	cmp	r6, #0
 8004294:	bfac      	ite	ge
 8004296:	1bbe      	subge	r6, r7, r6
 8004298:	463e      	movlt	r6, r7
 800429a:	2e00      	cmp	r6, #0
 800429c:	dd30      	ble.n	8004300 <_vfprintf_r+0xae0>
 800429e:	f04f 0910 	mov.w	r9, #16
 80042a2:	4b4f      	ldr	r3, [pc, #316]	; (80043e0 <_vfprintf_r+0xbc0>)
 80042a4:	6023      	str	r3, [r4, #0]
 80042a6:	2e10      	cmp	r6, #16
 80042a8:	dd16      	ble.n	80042d8 <_vfprintf_r+0xab8>
 80042aa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042ac:	f8c4 9004 	str.w	r9, [r4, #4]
 80042b0:	3310      	adds	r3, #16
 80042b2:	9321      	str	r3, [sp, #132]	; 0x84
 80042b4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042b6:	3301      	adds	r3, #1
 80042b8:	2b07      	cmp	r3, #7
 80042ba:	9320      	str	r3, [sp, #128]	; 0x80
 80042bc:	dc01      	bgt.n	80042c2 <_vfprintf_r+0xaa2>
 80042be:	3408      	adds	r4, #8
 80042c0:	e008      	b.n	80042d4 <_vfprintf_r+0xab4>
 80042c2:	aa1f      	add	r2, sp, #124	; 0x7c
 80042c4:	4659      	mov	r1, fp
 80042c6:	4650      	mov	r0, sl
 80042c8:	f002 f9ed 	bl	80066a6 <__sprint_r>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	f040 8163 	bne.w	8004598 <_vfprintf_r+0xd78>
 80042d2:	ac2c      	add	r4, sp, #176	; 0xb0
 80042d4:	3e10      	subs	r6, #16
 80042d6:	e7e4      	b.n	80042a2 <_vfprintf_r+0xa82>
 80042d8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80042da:	6066      	str	r6, [r4, #4]
 80042dc:	441e      	add	r6, r3
 80042de:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80042e0:	9621      	str	r6, [sp, #132]	; 0x84
 80042e2:	3301      	adds	r3, #1
 80042e4:	2b07      	cmp	r3, #7
 80042e6:	9320      	str	r3, [sp, #128]	; 0x80
 80042e8:	dc01      	bgt.n	80042ee <_vfprintf_r+0xace>
 80042ea:	3408      	adds	r4, #8
 80042ec:	e008      	b.n	8004300 <_vfprintf_r+0xae0>
 80042ee:	aa1f      	add	r2, sp, #124	; 0x7c
 80042f0:	4659      	mov	r1, fp
 80042f2:	4650      	mov	r0, sl
 80042f4:	f002 f9d7 	bl	80066a6 <__sprint_r>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	f040 814d 	bne.w	8004598 <_vfprintf_r+0xd78>
 80042fe:	ac2c      	add	r4, sp, #176	; 0xb0
 8004300:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004302:	9a04      	ldr	r2, [sp, #16]
 8004304:	4293      	cmp	r3, r2
 8004306:	4447      	add	r7, r8
 8004308:	db01      	blt.n	800430e <_vfprintf_r+0xaee>
 800430a:	07e8      	lsls	r0, r5, #31
 800430c:	d517      	bpl.n	800433e <_vfprintf_r+0xb1e>
 800430e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	9b08      	ldr	r3, [sp, #32]
 8004314:	6063      	str	r3, [r4, #4]
 8004316:	9a08      	ldr	r2, [sp, #32]
 8004318:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800431a:	4413      	add	r3, r2
 800431c:	9321      	str	r3, [sp, #132]	; 0x84
 800431e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004320:	3301      	adds	r3, #1
 8004322:	2b07      	cmp	r3, #7
 8004324:	9320      	str	r3, [sp, #128]	; 0x80
 8004326:	dc01      	bgt.n	800432c <_vfprintf_r+0xb0c>
 8004328:	3408      	adds	r4, #8
 800432a:	e008      	b.n	800433e <_vfprintf_r+0xb1e>
 800432c:	aa1f      	add	r2, sp, #124	; 0x7c
 800432e:	4659      	mov	r1, fp
 8004330:	4650      	mov	r0, sl
 8004332:	f002 f9b8 	bl	80066a6 <__sprint_r>
 8004336:	2800      	cmp	r0, #0
 8004338:	f040 812e 	bne.w	8004598 <_vfprintf_r+0xd78>
 800433c:	ac2c      	add	r4, sp, #176	; 0xb0
 800433e:	9b04      	ldr	r3, [sp, #16]
 8004340:	9a04      	ldr	r2, [sp, #16]
 8004342:	eb08 0603 	add.w	r6, r8, r3
 8004346:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004348:	1bf6      	subs	r6, r6, r7
 800434a:	1ad3      	subs	r3, r2, r3
 800434c:	429e      	cmp	r6, r3
 800434e:	bfa8      	it	ge
 8004350:	461e      	movge	r6, r3
 8004352:	2e00      	cmp	r6, #0
 8004354:	dd14      	ble.n	8004380 <_vfprintf_r+0xb60>
 8004356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004358:	6027      	str	r7, [r4, #0]
 800435a:	4433      	add	r3, r6
 800435c:	9321      	str	r3, [sp, #132]	; 0x84
 800435e:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004360:	6066      	str	r6, [r4, #4]
 8004362:	3301      	adds	r3, #1
 8004364:	2b07      	cmp	r3, #7
 8004366:	9320      	str	r3, [sp, #128]	; 0x80
 8004368:	dc01      	bgt.n	800436e <_vfprintf_r+0xb4e>
 800436a:	3408      	adds	r4, #8
 800436c:	e008      	b.n	8004380 <_vfprintf_r+0xb60>
 800436e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004370:	4659      	mov	r1, fp
 8004372:	4650      	mov	r0, sl
 8004374:	f002 f997 	bl	80066a6 <__sprint_r>
 8004378:	2800      	cmp	r0, #0
 800437a:	f040 810d 	bne.w	8004598 <_vfprintf_r+0xd78>
 800437e:	ac2c      	add	r4, sp, #176	; 0xb0
 8004380:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004382:	9a04      	ldr	r2, [sp, #16]
 8004384:	2e00      	cmp	r6, #0
 8004386:	eba2 0303 	sub.w	r3, r2, r3
 800438a:	bfac      	ite	ge
 800438c:	1b9e      	subge	r6, r3, r6
 800438e:	461e      	movlt	r6, r3
 8004390:	2e00      	cmp	r6, #0
 8004392:	f340 80b1 	ble.w	80044f8 <_vfprintf_r+0xcd8>
 8004396:	4f12      	ldr	r7, [pc, #72]	; (80043e0 <_vfprintf_r+0xbc0>)
 8004398:	f04f 0810 	mov.w	r8, #16
 800439c:	2e10      	cmp	r6, #16
 800439e:	dd16      	ble.n	80043ce <_vfprintf_r+0xbae>
 80043a0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043a2:	3310      	adds	r3, #16
 80043a4:	9321      	str	r3, [sp, #132]	; 0x84
 80043a6:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043a8:	3301      	adds	r3, #1
 80043aa:	2b07      	cmp	r3, #7
 80043ac:	e884 0180 	stmia.w	r4, {r7, r8}
 80043b0:	9320      	str	r3, [sp, #128]	; 0x80
 80043b2:	dc01      	bgt.n	80043b8 <_vfprintf_r+0xb98>
 80043b4:	3408      	adds	r4, #8
 80043b6:	e008      	b.n	80043ca <_vfprintf_r+0xbaa>
 80043b8:	aa1f      	add	r2, sp, #124	; 0x7c
 80043ba:	4659      	mov	r1, fp
 80043bc:	4650      	mov	r0, sl
 80043be:	f002 f972 	bl	80066a6 <__sprint_r>
 80043c2:	2800      	cmp	r0, #0
 80043c4:	f040 80e8 	bne.w	8004598 <_vfprintf_r+0xd78>
 80043c8:	ac2c      	add	r4, sp, #176	; 0xb0
 80043ca:	3e10      	subs	r6, #16
 80043cc:	e7e6      	b.n	800439c <_vfprintf_r+0xb7c>
 80043ce:	4b04      	ldr	r3, [pc, #16]	; (80043e0 <_vfprintf_r+0xbc0>)
 80043d0:	e884 0048 	stmia.w	r4, {r3, r6}
 80043d4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043d6:	441e      	add	r6, r3
 80043d8:	9621      	str	r6, [sp, #132]	; 0x84
 80043da:	e642      	b.n	8004062 <_vfprintf_r+0x842>
 80043dc:	080072e0 	.word	0x080072e0
 80043e0:	080072e2 	.word	0x080072e2
 80043e4:	9b04      	ldr	r3, [sp, #16]
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	dc01      	bgt.n	80043ee <_vfprintf_r+0xbce>
 80043ea:	07e9      	lsls	r1, r5, #31
 80043ec:	d573      	bpl.n	80044d6 <_vfprintf_r+0xcb6>
 80043ee:	2301      	movs	r3, #1
 80043f0:	6063      	str	r3, [r4, #4]
 80043f2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80043f4:	f8c4 8000 	str.w	r8, [r4]
 80043f8:	3301      	adds	r3, #1
 80043fa:	9321      	str	r3, [sp, #132]	; 0x84
 80043fc:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80043fe:	3301      	adds	r3, #1
 8004400:	2b07      	cmp	r3, #7
 8004402:	9320      	str	r3, [sp, #128]	; 0x80
 8004404:	dc01      	bgt.n	800440a <_vfprintf_r+0xbea>
 8004406:	3408      	adds	r4, #8
 8004408:	e008      	b.n	800441c <_vfprintf_r+0xbfc>
 800440a:	aa1f      	add	r2, sp, #124	; 0x7c
 800440c:	4659      	mov	r1, fp
 800440e:	4650      	mov	r0, sl
 8004410:	f002 f949 	bl	80066a6 <__sprint_r>
 8004414:	2800      	cmp	r0, #0
 8004416:	f040 80bf 	bne.w	8004598 <_vfprintf_r+0xd78>
 800441a:	ac2c      	add	r4, sp, #176	; 0xb0
 800441c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800441e:	6023      	str	r3, [r4, #0]
 8004420:	9b08      	ldr	r3, [sp, #32]
 8004422:	6063      	str	r3, [r4, #4]
 8004424:	9a08      	ldr	r2, [sp, #32]
 8004426:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004428:	4413      	add	r3, r2
 800442a:	9321      	str	r3, [sp, #132]	; 0x84
 800442c:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800442e:	3301      	adds	r3, #1
 8004430:	2b07      	cmp	r3, #7
 8004432:	9320      	str	r3, [sp, #128]	; 0x80
 8004434:	dc01      	bgt.n	800443a <_vfprintf_r+0xc1a>
 8004436:	3408      	adds	r4, #8
 8004438:	e008      	b.n	800444c <_vfprintf_r+0xc2c>
 800443a:	aa1f      	add	r2, sp, #124	; 0x7c
 800443c:	4659      	mov	r1, fp
 800443e:	4650      	mov	r0, sl
 8004440:	f002 f931 	bl	80066a6 <__sprint_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	f040 80a7 	bne.w	8004598 <_vfprintf_r+0xd78>
 800444a:	ac2c      	add	r4, sp, #176	; 0xb0
 800444c:	2300      	movs	r3, #0
 800444e:	2200      	movs	r2, #0
 8004450:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004454:	f7fc fb34 	bl	8000ac0 <__aeabi_dcmpeq>
 8004458:	9b04      	ldr	r3, [sp, #16]
 800445a:	1e5e      	subs	r6, r3, #1
 800445c:	b9b8      	cbnz	r0, 800448e <_vfprintf_r+0xc6e>
 800445e:	f108 0301 	add.w	r3, r8, #1
 8004462:	e884 0048 	stmia.w	r4, {r3, r6}
 8004466:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004468:	9a04      	ldr	r2, [sp, #16]
 800446a:	3b01      	subs	r3, #1
 800446c:	4413      	add	r3, r2
 800446e:	9321      	str	r3, [sp, #132]	; 0x84
 8004470:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004472:	3301      	adds	r3, #1
 8004474:	2b07      	cmp	r3, #7
 8004476:	9320      	str	r3, [sp, #128]	; 0x80
 8004478:	dd34      	ble.n	80044e4 <_vfprintf_r+0xcc4>
 800447a:	aa1f      	add	r2, sp, #124	; 0x7c
 800447c:	4659      	mov	r1, fp
 800447e:	4650      	mov	r0, sl
 8004480:	f002 f911 	bl	80066a6 <__sprint_r>
 8004484:	2800      	cmp	r0, #0
 8004486:	f040 8087 	bne.w	8004598 <_vfprintf_r+0xd78>
 800448a:	ac2c      	add	r4, sp, #176	; 0xb0
 800448c:	e02b      	b.n	80044e6 <_vfprintf_r+0xcc6>
 800448e:	2e00      	cmp	r6, #0
 8004490:	dd29      	ble.n	80044e6 <_vfprintf_r+0xcc6>
 8004492:	4fa6      	ldr	r7, [pc, #664]	; (800472c <_vfprintf_r+0xf0c>)
 8004494:	f04f 0810 	mov.w	r8, #16
 8004498:	2e10      	cmp	r6, #16
 800449a:	dd15      	ble.n	80044c8 <_vfprintf_r+0xca8>
 800449c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800449e:	3310      	adds	r3, #16
 80044a0:	9321      	str	r3, [sp, #132]	; 0x84
 80044a2:	9b20      	ldr	r3, [sp, #128]	; 0x80
 80044a4:	3301      	adds	r3, #1
 80044a6:	2b07      	cmp	r3, #7
 80044a8:	e884 0180 	stmia.w	r4, {r7, r8}
 80044ac:	9320      	str	r3, [sp, #128]	; 0x80
 80044ae:	dc01      	bgt.n	80044b4 <_vfprintf_r+0xc94>
 80044b0:	3408      	adds	r4, #8
 80044b2:	e007      	b.n	80044c4 <_vfprintf_r+0xca4>
 80044b4:	aa1f      	add	r2, sp, #124	; 0x7c
 80044b6:	4659      	mov	r1, fp
 80044b8:	4650      	mov	r0, sl
 80044ba:	f002 f8f4 	bl	80066a6 <__sprint_r>
 80044be:	2800      	cmp	r0, #0
 80044c0:	d16a      	bne.n	8004598 <_vfprintf_r+0xd78>
 80044c2:	ac2c      	add	r4, sp, #176	; 0xb0
 80044c4:	3e10      	subs	r6, #16
 80044c6:	e7e7      	b.n	8004498 <_vfprintf_r+0xc78>
 80044c8:	4b98      	ldr	r3, [pc, #608]	; (800472c <_vfprintf_r+0xf0c>)
 80044ca:	e884 0048 	stmia.w	r4, {r3, r6}
 80044ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044d0:	441e      	add	r6, r3
 80044d2:	9621      	str	r6, [sp, #132]	; 0x84
 80044d4:	e7cc      	b.n	8004470 <_vfprintf_r+0xc50>
 80044d6:	2301      	movs	r3, #1
 80044d8:	6063      	str	r3, [r4, #4]
 80044da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044dc:	f8c4 8000 	str.w	r8, [r4]
 80044e0:	3301      	adds	r3, #1
 80044e2:	e7c4      	b.n	800446e <_vfprintf_r+0xc4e>
 80044e4:	3408      	adds	r4, #8
 80044e6:	ab1b      	add	r3, sp, #108	; 0x6c
 80044e8:	6023      	str	r3, [r4, #0]
 80044ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80044ec:	6063      	str	r3, [r4, #4]
 80044ee:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80044f0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80044f2:	4413      	add	r3, r2
 80044f4:	e5b4      	b.n	8004060 <_vfprintf_r+0x840>
 80044f6:	3408      	adds	r4, #8
 80044f8:	076a      	lsls	r2, r5, #29
 80044fa:	d40b      	bmi.n	8004514 <_vfprintf_r+0xcf4>
 80044fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80044fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004500:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004502:	428a      	cmp	r2, r1
 8004504:	bfac      	ite	ge
 8004506:	189b      	addge	r3, r3, r2
 8004508:	185b      	addlt	r3, r3, r1
 800450a:	930a      	str	r3, [sp, #40]	; 0x28
 800450c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800450e:	2b00      	cmp	r3, #0
 8004510:	d035      	beq.n	800457e <_vfprintf_r+0xd5e>
 8004512:	e02e      	b.n	8004572 <_vfprintf_r+0xd52>
 8004514:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004516:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004518:	1a9d      	subs	r5, r3, r2
 800451a:	2d00      	cmp	r5, #0
 800451c:	ddee      	ble.n	80044fc <_vfprintf_r+0xcdc>
 800451e:	2610      	movs	r6, #16
 8004520:	4b83      	ldr	r3, [pc, #524]	; (8004730 <_vfprintf_r+0xf10>)
 8004522:	6023      	str	r3, [r4, #0]
 8004524:	2d10      	cmp	r5, #16
 8004526:	dd13      	ble.n	8004550 <_vfprintf_r+0xd30>
 8004528:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800452a:	6066      	str	r6, [r4, #4]
 800452c:	3310      	adds	r3, #16
 800452e:	9321      	str	r3, [sp, #132]	; 0x84
 8004530:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004532:	3301      	adds	r3, #1
 8004534:	2b07      	cmp	r3, #7
 8004536:	9320      	str	r3, [sp, #128]	; 0x80
 8004538:	dc01      	bgt.n	800453e <_vfprintf_r+0xd1e>
 800453a:	3408      	adds	r4, #8
 800453c:	e006      	b.n	800454c <_vfprintf_r+0xd2c>
 800453e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004540:	4659      	mov	r1, fp
 8004542:	4650      	mov	r0, sl
 8004544:	f002 f8af 	bl	80066a6 <__sprint_r>
 8004548:	bb30      	cbnz	r0, 8004598 <_vfprintf_r+0xd78>
 800454a:	ac2c      	add	r4, sp, #176	; 0xb0
 800454c:	3d10      	subs	r5, #16
 800454e:	e7e7      	b.n	8004520 <_vfprintf_r+0xd00>
 8004550:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004552:	6065      	str	r5, [r4, #4]
 8004554:	441d      	add	r5, r3
 8004556:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8004558:	9521      	str	r5, [sp, #132]	; 0x84
 800455a:	3301      	adds	r3, #1
 800455c:	2b07      	cmp	r3, #7
 800455e:	9320      	str	r3, [sp, #128]	; 0x80
 8004560:	ddcc      	ble.n	80044fc <_vfprintf_r+0xcdc>
 8004562:	aa1f      	add	r2, sp, #124	; 0x7c
 8004564:	4659      	mov	r1, fp
 8004566:	4650      	mov	r0, sl
 8004568:	f002 f89d 	bl	80066a6 <__sprint_r>
 800456c:	2800      	cmp	r0, #0
 800456e:	d0c5      	beq.n	80044fc <_vfprintf_r+0xcdc>
 8004570:	e012      	b.n	8004598 <_vfprintf_r+0xd78>
 8004572:	aa1f      	add	r2, sp, #124	; 0x7c
 8004574:	4659      	mov	r1, fp
 8004576:	4650      	mov	r0, sl
 8004578:	f002 f895 	bl	80066a6 <__sprint_r>
 800457c:	b960      	cbnz	r0, 8004598 <_vfprintf_r+0xd78>
 800457e:	2300      	movs	r3, #0
 8004580:	9320      	str	r3, [sp, #128]	; 0x80
 8004582:	9f03      	ldr	r7, [sp, #12]
 8004584:	ac2c      	add	r4, sp, #176	; 0xb0
 8004586:	f7ff b9b4 	b.w	80038f2 <_vfprintf_r+0xd2>
 800458a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800458c:	b123      	cbz	r3, 8004598 <_vfprintf_r+0xd78>
 800458e:	aa1f      	add	r2, sp, #124	; 0x7c
 8004590:	4659      	mov	r1, fp
 8004592:	4650      	mov	r0, sl
 8004594:	f002 f887 	bl	80066a6 <__sprint_r>
 8004598:	f8bb 300c 	ldrh.w	r3, [fp, #12]
 800459c:	065b      	lsls	r3, r3, #25
 800459e:	f53f a98b 	bmi.w	80038b8 <_vfprintf_r+0x98>
 80045a2:	980a      	ldr	r0, [sp, #40]	; 0x28
 80045a4:	e12f      	b.n	8004806 <_vfprintf_r+0xfe6>
 80045a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80045aa:	4610      	mov	r0, r2
 80045ac:	4619      	mov	r1, r3
 80045ae:	f7fc fab9 	bl	8000b24 <__aeabi_dcmpun>
 80045b2:	b160      	cbz	r0, 80045ce <_vfprintf_r+0xdae>
 80045b4:	4b5f      	ldr	r3, [pc, #380]	; (8004734 <_vfprintf_r+0xf14>)
 80045b6:	4a60      	ldr	r2, [pc, #384]	; (8004738 <_vfprintf_r+0xf18>)
 80045b8:	9902      	ldr	r1, [sp, #8]
 80045ba:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80045be:	2947      	cmp	r1, #71	; 0x47
 80045c0:	bfcc      	ite	gt
 80045c2:	4690      	movgt	r8, r2
 80045c4:	4698      	movle	r8, r3
 80045c6:	f04f 0903 	mov.w	r9, #3
 80045ca:	2600      	movs	r6, #0
 80045cc:	e451      	b.n	8003e72 <_vfprintf_r+0x652>
 80045ce:	f1b9 3fff 	cmp.w	r9, #4294967295
 80045d2:	d00a      	beq.n	80045ea <_vfprintf_r+0xdca>
 80045d4:	9b02      	ldr	r3, [sp, #8]
 80045d6:	f023 0320 	bic.w	r3, r3, #32
 80045da:	2b47      	cmp	r3, #71	; 0x47
 80045dc:	d107      	bne.n	80045ee <_vfprintf_r+0xdce>
 80045de:	f1b9 0f00 	cmp.w	r9, #0
 80045e2:	bf08      	it	eq
 80045e4:	f04f 0901 	moveq.w	r9, #1
 80045e8:	e001      	b.n	80045ee <_vfprintf_r+0xdce>
 80045ea:	f04f 0906 	mov.w	r9, #6
 80045ee:	f445 7380 	orr.w	r3, r5, #256	; 0x100
 80045f2:	930c      	str	r3, [sp, #48]	; 0x30
 80045f4:	9b07      	ldr	r3, [sp, #28]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	da07      	bge.n	800460a <_vfprintf_r+0xdea>
 80045fa:	9b06      	ldr	r3, [sp, #24]
 80045fc:	930e      	str	r3, [sp, #56]	; 0x38
 80045fe:	9b07      	ldr	r3, [sp, #28]
 8004600:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004604:	930f      	str	r3, [sp, #60]	; 0x3c
 8004606:	232d      	movs	r3, #45	; 0x2d
 8004608:	e004      	b.n	8004614 <_vfprintf_r+0xdf4>
 800460a:	ed9d 7b06 	vldr	d7, [sp, #24]
 800460e:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004612:	2300      	movs	r3, #0
 8004614:	930b      	str	r3, [sp, #44]	; 0x2c
 8004616:	9b02      	ldr	r3, [sp, #8]
 8004618:	f023 0720 	bic.w	r7, r3, #32
 800461c:	2f46      	cmp	r7, #70	; 0x46
 800461e:	d004      	beq.n	800462a <_vfprintf_r+0xe0a>
 8004620:	2f45      	cmp	r7, #69	; 0x45
 8004622:	d105      	bne.n	8004630 <_vfprintf_r+0xe10>
 8004624:	f109 0601 	add.w	r6, r9, #1
 8004628:	e003      	b.n	8004632 <_vfprintf_r+0xe12>
 800462a:	464e      	mov	r6, r9
 800462c:	2103      	movs	r1, #3
 800462e:	e001      	b.n	8004634 <_vfprintf_r+0xe14>
 8004630:	464e      	mov	r6, r9
 8004632:	2102      	movs	r1, #2
 8004634:	ab1d      	add	r3, sp, #116	; 0x74
 8004636:	9301      	str	r3, [sp, #4]
 8004638:	ab1a      	add	r3, sp, #104	; 0x68
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	4632      	mov	r2, r6
 800463e:	ab19      	add	r3, sp, #100	; 0x64
 8004640:	ed9d 0b0e 	vldr	d0, [sp, #56]	; 0x38
 8004644:	4650      	mov	r0, sl
 8004646:	f000 fa1b 	bl	8004a80 <_dtoa_r>
 800464a:	2f47      	cmp	r7, #71	; 0x47
 800464c:	4680      	mov	r8, r0
 800464e:	d102      	bne.n	8004656 <_vfprintf_r+0xe36>
 8004650:	07eb      	lsls	r3, r5, #31
 8004652:	f140 80ce 	bpl.w	80047f2 <_vfprintf_r+0xfd2>
 8004656:	eb08 0306 	add.w	r3, r8, r6
 800465a:	2f46      	cmp	r7, #70	; 0x46
 800465c:	9304      	str	r3, [sp, #16]
 800465e:	d111      	bne.n	8004684 <_vfprintf_r+0xe64>
 8004660:	f898 3000 	ldrb.w	r3, [r8]
 8004664:	2b30      	cmp	r3, #48	; 0x30
 8004666:	d109      	bne.n	800467c <_vfprintf_r+0xe5c>
 8004668:	2200      	movs	r2, #0
 800466a:	2300      	movs	r3, #0
 800466c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004670:	f7fc fa26 	bl	8000ac0 <__aeabi_dcmpeq>
 8004674:	b910      	cbnz	r0, 800467c <_vfprintf_r+0xe5c>
 8004676:	f1c6 0601 	rsb	r6, r6, #1
 800467a:	9619      	str	r6, [sp, #100]	; 0x64
 800467c:	9a04      	ldr	r2, [sp, #16]
 800467e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004680:	441a      	add	r2, r3
 8004682:	9204      	str	r2, [sp, #16]
 8004684:	2200      	movs	r2, #0
 8004686:	2300      	movs	r3, #0
 8004688:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800468c:	f7fc fa18 	bl	8000ac0 <__aeabi_dcmpeq>
 8004690:	b908      	cbnz	r0, 8004696 <_vfprintf_r+0xe76>
 8004692:	2230      	movs	r2, #48	; 0x30
 8004694:	e002      	b.n	800469c <_vfprintf_r+0xe7c>
 8004696:	9b04      	ldr	r3, [sp, #16]
 8004698:	931d      	str	r3, [sp, #116]	; 0x74
 800469a:	e007      	b.n	80046ac <_vfprintf_r+0xe8c>
 800469c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800469e:	9904      	ldr	r1, [sp, #16]
 80046a0:	4299      	cmp	r1, r3
 80046a2:	d903      	bls.n	80046ac <_vfprintf_r+0xe8c>
 80046a4:	1c59      	adds	r1, r3, #1
 80046a6:	911d      	str	r1, [sp, #116]	; 0x74
 80046a8:	701a      	strb	r2, [r3, #0]
 80046aa:	e7f7      	b.n	800469c <_vfprintf_r+0xe7c>
 80046ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80046ae:	2f47      	cmp	r7, #71	; 0x47
 80046b0:	ebc8 0303 	rsb	r3, r8, r3
 80046b4:	9304      	str	r3, [sp, #16]
 80046b6:	d108      	bne.n	80046ca <_vfprintf_r+0xeaa>
 80046b8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046ba:	1cdf      	adds	r7, r3, #3
 80046bc:	db01      	blt.n	80046c2 <_vfprintf_r+0xea2>
 80046be:	4599      	cmp	r9, r3
 80046c0:	da69      	bge.n	8004796 <_vfprintf_r+0xf76>
 80046c2:	9b02      	ldr	r3, [sp, #8]
 80046c4:	3b02      	subs	r3, #2
 80046c6:	9302      	str	r3, [sp, #8]
 80046c8:	e002      	b.n	80046d0 <_vfprintf_r+0xeb0>
 80046ca:	9b02      	ldr	r3, [sp, #8]
 80046cc:	2b65      	cmp	r3, #101	; 0x65
 80046ce:	dc4b      	bgt.n	8004768 <_vfprintf_r+0xf48>
 80046d0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80046d2:	f89d 2008 	ldrb.w	r2, [sp, #8]
 80046d6:	f88d 206c 	strb.w	r2, [sp, #108]	; 0x6c
 80046da:	3b01      	subs	r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	9319      	str	r3, [sp, #100]	; 0x64
 80046e0:	bfba      	itte	lt
 80046e2:	425b      	neglt	r3, r3
 80046e4:	222d      	movlt	r2, #45	; 0x2d
 80046e6:	222b      	movge	r2, #43	; 0x2b
 80046e8:	2b09      	cmp	r3, #9
 80046ea:	f88d 206d 	strb.w	r2, [sp, #109]	; 0x6d
 80046ee:	dd25      	ble.n	800473c <_vfprintf_r+0xf1c>
 80046f0:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 80046f4:	200a      	movs	r0, #10
 80046f6:	fb93 f1f0 	sdiv	r1, r3, r0
 80046fa:	fb00 3311 	mls	r3, r0, r1, r3
 80046fe:	3330      	adds	r3, #48	; 0x30
 8004700:	2909      	cmp	r1, #9
 8004702:	f802 3d01 	strb.w	r3, [r2, #-1]!
 8004706:	460b      	mov	r3, r1
 8004708:	dcf5      	bgt.n	80046f6 <_vfprintf_r+0xed6>
 800470a:	3330      	adds	r3, #48	; 0x30
 800470c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8004710:	1e51      	subs	r1, r2, #1
 8004712:	f10d 036e 	add.w	r3, sp, #110	; 0x6e
 8004716:	f10d 007b 	add.w	r0, sp, #123	; 0x7b
 800471a:	4281      	cmp	r1, r0
 800471c:	461a      	mov	r2, r3
 800471e:	d214      	bcs.n	800474a <_vfprintf_r+0xf2a>
 8004720:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004724:	f803 2b01 	strb.w	r2, [r3], #1
 8004728:	e7f7      	b.n	800471a <_vfprintf_r+0xefa>
 800472a:	bf00      	nop
 800472c:	080072e2 	.word	0x080072e2
 8004730:	0800729e 	.word	0x0800729e
 8004734:	080072b6 	.word	0x080072b6
 8004738:	080072ba 	.word	0x080072ba
 800473c:	2230      	movs	r2, #48	; 0x30
 800473e:	4413      	add	r3, r2
 8004740:	f88d 206e 	strb.w	r2, [sp, #110]	; 0x6e
 8004744:	f88d 306f 	strb.w	r3, [sp, #111]	; 0x6f
 8004748:	aa1c      	add	r2, sp, #112	; 0x70
 800474a:	ab1b      	add	r3, sp, #108	; 0x6c
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	9a04      	ldr	r2, [sp, #16]
 8004750:	9310      	str	r3, [sp, #64]	; 0x40
 8004752:	2a01      	cmp	r2, #1
 8004754:	eb03 0902 	add.w	r9, r3, r2
 8004758:	dc02      	bgt.n	8004760 <_vfprintf_r+0xf40>
 800475a:	f015 0701 	ands.w	r7, r5, #1
 800475e:	d032      	beq.n	80047c6 <_vfprintf_r+0xfa6>
 8004760:	9b08      	ldr	r3, [sp, #32]
 8004762:	2700      	movs	r7, #0
 8004764:	4499      	add	r9, r3
 8004766:	e02e      	b.n	80047c6 <_vfprintf_r+0xfa6>
 8004768:	9b02      	ldr	r3, [sp, #8]
 800476a:	2b66      	cmp	r3, #102	; 0x66
 800476c:	d113      	bne.n	8004796 <_vfprintf_r+0xf76>
 800476e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004770:	2b00      	cmp	r3, #0
 8004772:	dd07      	ble.n	8004784 <_vfprintf_r+0xf64>
 8004774:	f1b9 0f00 	cmp.w	r9, #0
 8004778:	d101      	bne.n	800477e <_vfprintf_r+0xf5e>
 800477a:	07ee      	lsls	r6, r5, #31
 800477c:	d521      	bpl.n	80047c2 <_vfprintf_r+0xfa2>
 800477e:	9a08      	ldr	r2, [sp, #32]
 8004780:	4413      	add	r3, r2
 8004782:	e006      	b.n	8004792 <_vfprintf_r+0xf72>
 8004784:	f1b9 0f00 	cmp.w	r9, #0
 8004788:	d101      	bne.n	800478e <_vfprintf_r+0xf6e>
 800478a:	07ed      	lsls	r5, r5, #31
 800478c:	d514      	bpl.n	80047b8 <_vfprintf_r+0xf98>
 800478e:	9b08      	ldr	r3, [sp, #32]
 8004790:	3301      	adds	r3, #1
 8004792:	444b      	add	r3, r9
 8004794:	e015      	b.n	80047c2 <_vfprintf_r+0xfa2>
 8004796:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004798:	9a04      	ldr	r2, [sp, #16]
 800479a:	4293      	cmp	r3, r2
 800479c:	db03      	blt.n	80047a6 <_vfprintf_r+0xf86>
 800479e:	07e8      	lsls	r0, r5, #31
 80047a0:	d50d      	bpl.n	80047be <_vfprintf_r+0xf9e>
 80047a2:	9a08      	ldr	r2, [sp, #32]
 80047a4:	e006      	b.n	80047b4 <_vfprintf_r+0xf94>
 80047a6:	9a04      	ldr	r2, [sp, #16]
 80047a8:	9908      	ldr	r1, [sp, #32]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	440a      	add	r2, r1
 80047ae:	dc05      	bgt.n	80047bc <_vfprintf_r+0xf9c>
 80047b0:	f1c3 0301 	rsb	r3, r3, #1
 80047b4:	4413      	add	r3, r2
 80047b6:	e002      	b.n	80047be <_vfprintf_r+0xf9e>
 80047b8:	2301      	movs	r3, #1
 80047ba:	e002      	b.n	80047c2 <_vfprintf_r+0xfa2>
 80047bc:	4613      	mov	r3, r2
 80047be:	2267      	movs	r2, #103	; 0x67
 80047c0:	9202      	str	r2, [sp, #8]
 80047c2:	9f19      	ldr	r7, [sp, #100]	; 0x64
 80047c4:	4699      	mov	r9, r3
 80047c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80047c8:	b113      	cbz	r3, 80047d0 <_vfprintf_r+0xfb0>
 80047ca:	232d      	movs	r3, #45	; 0x2d
 80047cc:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80047d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80047d2:	2600      	movs	r6, #0
 80047d4:	f7ff bb4e 	b.w	8003e74 <_vfprintf_r+0x654>
 80047d8:	2200      	movs	r2, #0
 80047da:	2300      	movs	r3, #0
 80047dc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80047e0:	f7fc f978 	bl	8000ad4 <__aeabi_dcmplt>
 80047e4:	b110      	cbz	r0, 80047ec <_vfprintf_r+0xfcc>
 80047e6:	232d      	movs	r3, #45	; 0x2d
 80047e8:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
 80047ec:	4b07      	ldr	r3, [pc, #28]	; (800480c <_vfprintf_r+0xfec>)
 80047ee:	4a08      	ldr	r2, [pc, #32]	; (8004810 <_vfprintf_r+0xff0>)
 80047f0:	e6e2      	b.n	80045b8 <_vfprintf_r+0xd98>
 80047f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80047f4:	1a1b      	subs	r3, r3, r0
 80047f6:	9304      	str	r3, [sp, #16]
 80047f8:	e75e      	b.n	80046b8 <_vfprintf_r+0xe98>
 80047fa:	ea56 0207 	orrs.w	r2, r6, r7
 80047fe:	f47f aaac 	bne.w	8003d5a <_vfprintf_r+0x53a>
 8004802:	f7ff bab1 	b.w	8003d68 <_vfprintf_r+0x548>
 8004806:	b03d      	add	sp, #244	; 0xf4
 8004808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800480c:	080072ae 	.word	0x080072ae
 8004810:	080072b2 	.word	0x080072b2

08004814 <__sbprintf>:
 8004814:	b570      	push	{r4, r5, r6, lr}
 8004816:	460c      	mov	r4, r1
 8004818:	8989      	ldrh	r1, [r1, #12]
 800481a:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
 800481e:	f021 0102 	bic.w	r1, r1, #2
 8004822:	f8ad 100c 	strh.w	r1, [sp, #12]
 8004826:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8004828:	9119      	str	r1, [sp, #100]	; 0x64
 800482a:	89e1      	ldrh	r1, [r4, #14]
 800482c:	f8ad 100e 	strh.w	r1, [sp, #14]
 8004830:	6a21      	ldr	r1, [r4, #32]
 8004832:	9108      	str	r1, [sp, #32]
 8004834:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8004836:	910a      	str	r1, [sp, #40]	; 0x28
 8004838:	a91a      	add	r1, sp, #104	; 0x68
 800483a:	9100      	str	r1, [sp, #0]
 800483c:	9104      	str	r1, [sp, #16]
 800483e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004842:	9102      	str	r1, [sp, #8]
 8004844:	9105      	str	r1, [sp, #20]
 8004846:	2100      	movs	r1, #0
 8004848:	9106      	str	r1, [sp, #24]
 800484a:	4669      	mov	r1, sp
 800484c:	4606      	mov	r6, r0
 800484e:	f7fe ffe7 	bl	8003820 <_vfprintf_r>
 8004852:	1e05      	subs	r5, r0, #0
 8004854:	db07      	blt.n	8004866 <__sbprintf+0x52>
 8004856:	4669      	mov	r1, sp
 8004858:	4630      	mov	r0, r6
 800485a:	f000 ff41 	bl	80056e0 <_fflush_r>
 800485e:	2800      	cmp	r0, #0
 8004860:	bf18      	it	ne
 8004862:	f04f 35ff 	movne.w	r5, #4294967295
 8004866:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800486a:	065b      	lsls	r3, r3, #25
 800486c:	bf48      	it	mi
 800486e:	89a3      	ldrhmi	r3, [r4, #12]
 8004870:	4628      	mov	r0, r5
 8004872:	bf44      	itt	mi
 8004874:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 8004878:	81a3      	strhmi	r3, [r4, #12]
 800487a:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
 800487e:	bd70      	pop	{r4, r5, r6, pc}

08004880 <__swsetup_r>:
 8004880:	4b32      	ldr	r3, [pc, #200]	; (800494c <__swsetup_r+0xcc>)
 8004882:	b570      	push	{r4, r5, r6, lr}
 8004884:	681d      	ldr	r5, [r3, #0]
 8004886:	4606      	mov	r6, r0
 8004888:	460c      	mov	r4, r1
 800488a:	b125      	cbz	r5, 8004896 <__swsetup_r+0x16>
 800488c:	69ab      	ldr	r3, [r5, #24]
 800488e:	b913      	cbnz	r3, 8004896 <__swsetup_r+0x16>
 8004890:	4628      	mov	r0, r5
 8004892:	f000 ff8f 	bl	80057b4 <__sinit>
 8004896:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <__swsetup_r+0xd0>)
 8004898:	429c      	cmp	r4, r3
 800489a:	d101      	bne.n	80048a0 <__swsetup_r+0x20>
 800489c:	686c      	ldr	r4, [r5, #4]
 800489e:	e008      	b.n	80048b2 <__swsetup_r+0x32>
 80048a0:	4b2c      	ldr	r3, [pc, #176]	; (8004954 <__swsetup_r+0xd4>)
 80048a2:	429c      	cmp	r4, r3
 80048a4:	d101      	bne.n	80048aa <__swsetup_r+0x2a>
 80048a6:	68ac      	ldr	r4, [r5, #8]
 80048a8:	e003      	b.n	80048b2 <__swsetup_r+0x32>
 80048aa:	4b2b      	ldr	r3, [pc, #172]	; (8004958 <__swsetup_r+0xd8>)
 80048ac:	429c      	cmp	r4, r3
 80048ae:	bf08      	it	eq
 80048b0:	68ec      	ldreq	r4, [r5, #12]
 80048b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	0715      	lsls	r5, r2, #28
 80048ba:	d41d      	bmi.n	80048f8 <__swsetup_r+0x78>
 80048bc:	06d0      	lsls	r0, r2, #27
 80048be:	d402      	bmi.n	80048c6 <__swsetup_r+0x46>
 80048c0:	2209      	movs	r2, #9
 80048c2:	6032      	str	r2, [r6, #0]
 80048c4:	e03a      	b.n	800493c <__swsetup_r+0xbc>
 80048c6:	0751      	lsls	r1, r2, #29
 80048c8:	d512      	bpl.n	80048f0 <__swsetup_r+0x70>
 80048ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80048cc:	b141      	cbz	r1, 80048e0 <__swsetup_r+0x60>
 80048ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80048d2:	4299      	cmp	r1, r3
 80048d4:	d002      	beq.n	80048dc <__swsetup_r+0x5c>
 80048d6:	4630      	mov	r0, r6
 80048d8:	f001 f834 	bl	8005944 <_free_r>
 80048dc:	2300      	movs	r3, #0
 80048de:	6363      	str	r3, [r4, #52]	; 0x34
 80048e0:	89a3      	ldrh	r3, [r4, #12]
 80048e2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80048e6:	81a3      	strh	r3, [r4, #12]
 80048e8:	2300      	movs	r3, #0
 80048ea:	6063      	str	r3, [r4, #4]
 80048ec:	6923      	ldr	r3, [r4, #16]
 80048ee:	6023      	str	r3, [r4, #0]
 80048f0:	89a3      	ldrh	r3, [r4, #12]
 80048f2:	f043 0308 	orr.w	r3, r3, #8
 80048f6:	81a3      	strh	r3, [r4, #12]
 80048f8:	6923      	ldr	r3, [r4, #16]
 80048fa:	b94b      	cbnz	r3, 8004910 <__swsetup_r+0x90>
 80048fc:	89a3      	ldrh	r3, [r4, #12]
 80048fe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004902:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004906:	d003      	beq.n	8004910 <__swsetup_r+0x90>
 8004908:	4621      	mov	r1, r4
 800490a:	4630      	mov	r0, r6
 800490c:	f001 f930 	bl	8005b70 <__smakebuf_r>
 8004910:	89a2      	ldrh	r2, [r4, #12]
 8004912:	f012 0301 	ands.w	r3, r2, #1
 8004916:	d005      	beq.n	8004924 <__swsetup_r+0xa4>
 8004918:	2300      	movs	r3, #0
 800491a:	60a3      	str	r3, [r4, #8]
 800491c:	6963      	ldr	r3, [r4, #20]
 800491e:	425b      	negs	r3, r3
 8004920:	61a3      	str	r3, [r4, #24]
 8004922:	e003      	b.n	800492c <__swsetup_r+0xac>
 8004924:	0792      	lsls	r2, r2, #30
 8004926:	bf58      	it	pl
 8004928:	6963      	ldrpl	r3, [r4, #20]
 800492a:	60a3      	str	r3, [r4, #8]
 800492c:	6923      	ldr	r3, [r4, #16]
 800492e:	b95b      	cbnz	r3, 8004948 <__swsetup_r+0xc8>
 8004930:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004934:	f003 0080 	and.w	r0, r3, #128	; 0x80
 8004938:	b280      	uxth	r0, r0
 800493a:	b130      	cbz	r0, 800494a <__swsetup_r+0xca>
 800493c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004940:	81a3      	strh	r3, [r4, #12]
 8004942:	f04f 30ff 	mov.w	r0, #4294967295
 8004946:	bd70      	pop	{r4, r5, r6, pc}
 8004948:	2000      	movs	r0, #0
 800494a:	bd70      	pop	{r4, r5, r6, pc}
 800494c:	200000fc 	.word	0x200000fc
 8004950:	08007300 	.word	0x08007300
 8004954:	08007320 	.word	0x08007320
 8004958:	08007340 	.word	0x08007340

0800495c <quorem>:
 800495c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004960:	6903      	ldr	r3, [r0, #16]
 8004962:	690c      	ldr	r4, [r1, #16]
 8004964:	429c      	cmp	r4, r3
 8004966:	4680      	mov	r8, r0
 8004968:	f300 8083 	bgt.w	8004a72 <quorem+0x116>
 800496c:	3c01      	subs	r4, #1
 800496e:	f101 0714 	add.w	r7, r1, #20
 8004972:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 8004976:	f100 0614 	add.w	r6, r0, #20
 800497a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800497e:	eb06 030e 	add.w	r3, r6, lr
 8004982:	9301      	str	r3, [sp, #4]
 8004984:	3501      	adds	r5, #1
 8004986:	f856 3024 	ldr.w	r3, [r6, r4, lsl #2]
 800498a:	fbb3 f5f5 	udiv	r5, r3, r5
 800498e:	eb07 090e 	add.w	r9, r7, lr
 8004992:	2d00      	cmp	r5, #0
 8004994:	d039      	beq.n	8004a0a <quorem+0xae>
 8004996:	f04f 0a00 	mov.w	sl, #0
 800499a:	4638      	mov	r0, r7
 800499c:	46b4      	mov	ip, r6
 800499e:	46d3      	mov	fp, sl
 80049a0:	f850 2b04 	ldr.w	r2, [r0], #4
 80049a4:	b293      	uxth	r3, r2
 80049a6:	fb05 a303 	mla	r3, r5, r3, sl
 80049aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	ebc3 030b 	rsb	r3, r3, fp
 80049b4:	0c12      	lsrs	r2, r2, #16
 80049b6:	f8bc b000 	ldrh.w	fp, [ip]
 80049ba:	fb05 a202 	mla	r2, r5, r2, sl
 80049be:	fa13 f38b 	uxtah	r3, r3, fp
 80049c2:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 80049c6:	fa1f fb82 	uxth.w	fp, r2
 80049ca:	f8dc 2000 	ldr.w	r2, [ip]
 80049ce:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 80049d2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80049d6:	b29b      	uxth	r3, r3
 80049d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80049dc:	4581      	cmp	r9, r0
 80049de:	ea4f 4b22 	mov.w	fp, r2, asr #16
 80049e2:	f84c 3b04 	str.w	r3, [ip], #4
 80049e6:	d2db      	bcs.n	80049a0 <quorem+0x44>
 80049e8:	f856 300e 	ldr.w	r3, [r6, lr]
 80049ec:	b96b      	cbnz	r3, 8004a0a <quorem+0xae>
 80049ee:	9b01      	ldr	r3, [sp, #4]
 80049f0:	3b04      	subs	r3, #4
 80049f2:	429e      	cmp	r6, r3
 80049f4:	461a      	mov	r2, r3
 80049f6:	d302      	bcc.n	80049fe <quorem+0xa2>
 80049f8:	f8c8 4010 	str.w	r4, [r8, #16]
 80049fc:	e005      	b.n	8004a0a <quorem+0xae>
 80049fe:	6812      	ldr	r2, [r2, #0]
 8004a00:	3b04      	subs	r3, #4
 8004a02:	2a00      	cmp	r2, #0
 8004a04:	d1f8      	bne.n	80049f8 <quorem+0x9c>
 8004a06:	3c01      	subs	r4, #1
 8004a08:	e7f3      	b.n	80049f2 <quorem+0x96>
 8004a0a:	4640      	mov	r0, r8
 8004a0c:	f001 fd2f 	bl	800646e <__mcmp>
 8004a10:	2800      	cmp	r0, #0
 8004a12:	db2c      	blt.n	8004a6e <quorem+0x112>
 8004a14:	3501      	adds	r5, #1
 8004a16:	4630      	mov	r0, r6
 8004a18:	f04f 0e00 	mov.w	lr, #0
 8004a1c:	f857 1b04 	ldr.w	r1, [r7], #4
 8004a20:	f8d0 c000 	ldr.w	ip, [r0]
 8004a24:	b28a      	uxth	r2, r1
 8004a26:	ebc2 030e 	rsb	r3, r2, lr
 8004a2a:	0c09      	lsrs	r1, r1, #16
 8004a2c:	fa13 f38c 	uxtah	r3, r3, ip
 8004a30:	ebc1 421c 	rsb	r2, r1, ip, lsr #16
 8004a34:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004a3e:	45b9      	cmp	r9, r7
 8004a40:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8004a44:	f840 3b04 	str.w	r3, [r0], #4
 8004a48:	d2e8      	bcs.n	8004a1c <quorem+0xc0>
 8004a4a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8004a4e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8004a52:	b962      	cbnz	r2, 8004a6e <quorem+0x112>
 8004a54:	3b04      	subs	r3, #4
 8004a56:	429e      	cmp	r6, r3
 8004a58:	461a      	mov	r2, r3
 8004a5a:	d302      	bcc.n	8004a62 <quorem+0x106>
 8004a5c:	f8c8 4010 	str.w	r4, [r8, #16]
 8004a60:	e005      	b.n	8004a6e <quorem+0x112>
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	3b04      	subs	r3, #4
 8004a66:	2a00      	cmp	r2, #0
 8004a68:	d1f8      	bne.n	8004a5c <quorem+0x100>
 8004a6a:	3c01      	subs	r4, #1
 8004a6c:	e7f3      	b.n	8004a56 <quorem+0xfa>
 8004a6e:	4628      	mov	r0, r5
 8004a70:	e000      	b.n	8004a74 <quorem+0x118>
 8004a72:	2000      	movs	r0, #0
 8004a74:	b003      	add	sp, #12
 8004a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a7a:	0000      	movs	r0, r0
 8004a7c:	0000      	movs	r0, r0
	...

08004a80 <_dtoa_r>:
 8004a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a84:	ec59 8b10 	vmov	r8, r9, d0
 8004a88:	b097      	sub	sp, #92	; 0x5c
 8004a8a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8004a8c:	9106      	str	r1, [sp, #24]
 8004a8e:	4682      	mov	sl, r0
 8004a90:	9209      	str	r2, [sp, #36]	; 0x24
 8004a92:	9310      	str	r3, [sp, #64]	; 0x40
 8004a94:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8004a96:	e9cd 8900 	strd	r8, r9, [sp]
 8004a9a:	b945      	cbnz	r5, 8004aae <_dtoa_r+0x2e>
 8004a9c:	2010      	movs	r0, #16
 8004a9e:	f001 f8a3 	bl	8005be8 <malloc>
 8004aa2:	f8ca 0024 	str.w	r0, [sl, #36]	; 0x24
 8004aa6:	6045      	str	r5, [r0, #4]
 8004aa8:	6085      	str	r5, [r0, #8]
 8004aaa:	6005      	str	r5, [r0, #0]
 8004aac:	60c5      	str	r5, [r0, #12]
 8004aae:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	b159      	cbz	r1, 8004ace <_dtoa_r+0x4e>
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	604a      	str	r2, [r1, #4]
 8004aba:	2301      	movs	r3, #1
 8004abc:	4093      	lsls	r3, r2
 8004abe:	608b      	str	r3, [r1, #8]
 8004ac0:	4650      	mov	r0, sl
 8004ac2:	f001 fafb 	bl	80060bc <_Bfree>
 8004ac6:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004aca:	2200      	movs	r2, #0
 8004acc:	601a      	str	r2, [r3, #0]
 8004ace:	9b01      	ldr	r3, [sp, #4]
 8004ad0:	4a9f      	ldr	r2, [pc, #636]	; (8004d50 <_dtoa_r+0x2d0>)
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	bfbf      	itttt	lt
 8004ad6:	2301      	movlt	r3, #1
 8004ad8:	6023      	strlt	r3, [r4, #0]
 8004ada:	9b01      	ldrlt	r3, [sp, #4]
 8004adc:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004ae0:	bfb8      	it	lt
 8004ae2:	9301      	strlt	r3, [sp, #4]
 8004ae4:	9f01      	ldr	r7, [sp, #4]
 8004ae6:	bfa4      	itt	ge
 8004ae8:	2300      	movge	r3, #0
 8004aea:	6023      	strge	r3, [r4, #0]
 8004aec:	f027 4300 	bic.w	r3, r7, #2147483648	; 0x80000000
 8004af0:	0d1b      	lsrs	r3, r3, #20
 8004af2:	051b      	lsls	r3, r3, #20
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d11d      	bne.n	8004b34 <_dtoa_r+0xb4>
 8004af8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004afa:	f242 730f 	movw	r3, #9999	; 0x270f
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	9b00      	ldr	r3, [sp, #0]
 8004b02:	b943      	cbnz	r3, 8004b16 <_dtoa_r+0x96>
 8004b04:	4a93      	ldr	r2, [pc, #588]	; (8004d54 <_dtoa_r+0x2d4>)
 8004b06:	4b94      	ldr	r3, [pc, #592]	; (8004d58 <_dtoa_r+0x2d8>)
 8004b08:	f3c7 0013 	ubfx	r0, r7, #0, #20
 8004b0c:	2800      	cmp	r0, #0
 8004b0e:	bf14      	ite	ne
 8004b10:	4618      	movne	r0, r3
 8004b12:	4610      	moveq	r0, r2
 8004b14:	e000      	b.n	8004b18 <_dtoa_r+0x98>
 8004b16:	4890      	ldr	r0, [pc, #576]	; (8004d58 <_dtoa_r+0x2d8>)
 8004b18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 854a 	beq.w	80055b4 <_dtoa_r+0xb34>
 8004b20:	78c3      	ldrb	r3, [r0, #3]
 8004b22:	b113      	cbz	r3, 8004b2a <_dtoa_r+0xaa>
 8004b24:	f100 0308 	add.w	r3, r0, #8
 8004b28:	e000      	b.n	8004b2c <_dtoa_r+0xac>
 8004b2a:	1cc3      	adds	r3, r0, #3
 8004b2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8004b2e:	6013      	str	r3, [r2, #0]
 8004b30:	f000 bd40 	b.w	80055b4 <_dtoa_r+0xb34>
 8004b34:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	4620      	mov	r0, r4
 8004b3e:	4629      	mov	r1, r5
 8004b40:	f7fb ffbe 	bl	8000ac0 <__aeabi_dcmpeq>
 8004b44:	4680      	mov	r8, r0
 8004b46:	b158      	cbz	r0, 8004b60 <_dtoa_r+0xe0>
 8004b48:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	6013      	str	r3, [r2, #0]
 8004b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 8522 	beq.w	800559a <_dtoa_r+0xb1a>
 8004b56:	4881      	ldr	r0, [pc, #516]	; (8004d5c <_dtoa_r+0x2dc>)
 8004b58:	6018      	str	r0, [r3, #0]
 8004b5a:	3801      	subs	r0, #1
 8004b5c:	f000 bd2a 	b.w	80055b4 <_dtoa_r+0xb34>
 8004b60:	aa14      	add	r2, sp, #80	; 0x50
 8004b62:	a915      	add	r1, sp, #84	; 0x54
 8004b64:	ec45 4b10 	vmov	d0, r4, r5
 8004b68:	4650      	mov	r0, sl
 8004b6a:	f001 fcfb 	bl	8006564 <__d2b>
 8004b6e:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004b72:	9002      	str	r0, [sp, #8]
 8004b74:	b15e      	cbz	r6, 8004b8e <_dtoa_r+0x10e>
 8004b76:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004b7a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004b7e:	4620      	mov	r0, r4
 8004b80:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004b84:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
 8004b88:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
 8004b8c:	e01d      	b.n	8004bca <_dtoa_r+0x14a>
 8004b8e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8004b90:	9e14      	ldr	r6, [sp, #80]	; 0x50
 8004b92:	441e      	add	r6, r3
 8004b94:	f206 4332 	addw	r3, r6, #1074	; 0x432
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	dd0a      	ble.n	8004bb2 <_dtoa_r+0x132>
 8004b9c:	9a00      	ldr	r2, [sp, #0]
 8004b9e:	f206 4012 	addw	r0, r6, #1042	; 0x412
 8004ba2:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
 8004ba6:	fa22 f000 	lsr.w	r0, r2, r0
 8004baa:	fa07 f303 	lsl.w	r3, r7, r3
 8004bae:	4318      	orrs	r0, r3
 8004bb0:	e004      	b.n	8004bbc <_dtoa_r+0x13c>
 8004bb2:	f1c3 0020 	rsb	r0, r3, #32
 8004bb6:	9b00      	ldr	r3, [sp, #0]
 8004bb8:	fa03 f000 	lsl.w	r0, r3, r0
 8004bbc:	f7fb fca2 	bl	8000504 <__aeabi_ui2d>
 8004bc0:	2301      	movs	r3, #1
 8004bc2:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004bc6:	3e01      	subs	r6, #1
 8004bc8:	9311      	str	r3, [sp, #68]	; 0x44
 8004bca:	2200      	movs	r2, #0
 8004bcc:	4b64      	ldr	r3, [pc, #400]	; (8004d60 <_dtoa_r+0x2e0>)
 8004bce:	f7fb fb5b 	bl	8000288 <__aeabi_dsub>
 8004bd2:	a359      	add	r3, pc, #356	; (adr r3, 8004d38 <_dtoa_r+0x2b8>)
 8004bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd8:	f7fb fd0a 	bl	80005f0 <__aeabi_dmul>
 8004bdc:	a358      	add	r3, pc, #352	; (adr r3, 8004d40 <_dtoa_r+0x2c0>)
 8004bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be2:	f7fb fb53 	bl	800028c <__adddf3>
 8004be6:	4604      	mov	r4, r0
 8004be8:	4630      	mov	r0, r6
 8004bea:	460d      	mov	r5, r1
 8004bec:	f7fb fc9a 	bl	8000524 <__aeabi_i2d>
 8004bf0:	a355      	add	r3, pc, #340	; (adr r3, 8004d48 <_dtoa_r+0x2c8>)
 8004bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bf6:	f7fb fcfb 	bl	80005f0 <__aeabi_dmul>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	460b      	mov	r3, r1
 8004bfe:	4620      	mov	r0, r4
 8004c00:	4629      	mov	r1, r5
 8004c02:	f7fb fb43 	bl	800028c <__adddf3>
 8004c06:	4604      	mov	r4, r0
 8004c08:	460d      	mov	r5, r1
 8004c0a:	f7fb ffa1 	bl	8000b50 <__aeabi_d2iz>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	4683      	mov	fp, r0
 8004c12:	2300      	movs	r3, #0
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb ff5c 	bl	8000ad4 <__aeabi_dcmplt>
 8004c1c:	b158      	cbz	r0, 8004c36 <_dtoa_r+0x1b6>
 8004c1e:	4658      	mov	r0, fp
 8004c20:	f7fb fc80 	bl	8000524 <__aeabi_i2d>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4620      	mov	r0, r4
 8004c2a:	4629      	mov	r1, r5
 8004c2c:	f7fb ff48 	bl	8000ac0 <__aeabi_dcmpeq>
 8004c30:	b908      	cbnz	r0, 8004c36 <_dtoa_r+0x1b6>
 8004c32:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c36:	f1bb 0f16 	cmp.w	fp, #22
 8004c3a:	d80d      	bhi.n	8004c58 <_dtoa_r+0x1d8>
 8004c3c:	4949      	ldr	r1, [pc, #292]	; (8004d64 <_dtoa_r+0x2e4>)
 8004c3e:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004c4a:	f7fb ff61 	bl	8000b10 <__aeabi_dcmpgt>
 8004c4e:	b130      	cbz	r0, 8004c5e <_dtoa_r+0x1de>
 8004c50:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004c54:	2300      	movs	r3, #0
 8004c56:	e000      	b.n	8004c5a <_dtoa_r+0x1da>
 8004c58:	2301      	movs	r3, #1
 8004c5a:	930d      	str	r3, [sp, #52]	; 0x34
 8004c5c:	e000      	b.n	8004c60 <_dtoa_r+0x1e0>
 8004c5e:	900d      	str	r0, [sp, #52]	; 0x34
 8004c60:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c62:	1b9e      	subs	r6, r3, r6
 8004c64:	1e73      	subs	r3, r6, #1
 8004c66:	9305      	str	r3, [sp, #20]
 8004c68:	bf43      	ittte	mi
 8004c6a:	f1c3 0900 	rsbmi	r9, r3, #0
 8004c6e:	2300      	movmi	r3, #0
 8004c70:	9305      	strmi	r3, [sp, #20]
 8004c72:	f04f 0900 	movpl.w	r9, #0
 8004c76:	f1bb 0f00 	cmp.w	fp, #0
 8004c7a:	db07      	blt.n	8004c8c <_dtoa_r+0x20c>
 8004c7c:	9b05      	ldr	r3, [sp, #20]
 8004c7e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8004c82:	445b      	add	r3, fp
 8004c84:	9305      	str	r3, [sp, #20]
 8004c86:	2300      	movs	r3, #0
 8004c88:	9307      	str	r3, [sp, #28]
 8004c8a:	e006      	b.n	8004c9a <_dtoa_r+0x21a>
 8004c8c:	f1cb 0300 	rsb	r3, fp, #0
 8004c90:	9307      	str	r3, [sp, #28]
 8004c92:	2300      	movs	r3, #0
 8004c94:	ebcb 0909 	rsb	r9, fp, r9
 8004c98:	930c      	str	r3, [sp, #48]	; 0x30
 8004c9a:	9b06      	ldr	r3, [sp, #24]
 8004c9c:	2b09      	cmp	r3, #9
 8004c9e:	d827      	bhi.n	8004cf0 <_dtoa_r+0x270>
 8004ca0:	2b05      	cmp	r3, #5
 8004ca2:	bfc4      	itt	gt
 8004ca4:	3b04      	subgt	r3, #4
 8004ca6:	9306      	strgt	r3, [sp, #24]
 8004ca8:	9b06      	ldr	r3, [sp, #24]
 8004caa:	f1a3 0302 	sub.w	r3, r3, #2
 8004cae:	bfcc      	ite	gt
 8004cb0:	2500      	movgt	r5, #0
 8004cb2:	2501      	movle	r5, #1
 8004cb4:	2b03      	cmp	r3, #3
 8004cb6:	d820      	bhi.n	8004cfa <_dtoa_r+0x27a>
 8004cb8:	e8df f003 	tbb	[pc, r3]
 8004cbc:	04020e06 	.word	0x04020e06
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	e002      	b.n	8004cca <_dtoa_r+0x24a>
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	e008      	b.n	8004cda <_dtoa_r+0x25a>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	9308      	str	r3, [sp, #32]
 8004ccc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	dd1c      	ble.n	8004d0c <_dtoa_r+0x28c>
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	4698      	mov	r8, r3
 8004cd6:	e01e      	b.n	8004d16 <_dtoa_r+0x296>
 8004cd8:	2300      	movs	r3, #0
 8004cda:	9308      	str	r3, [sp, #32]
 8004cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cde:	445b      	add	r3, fp
 8004ce0:	f103 0801 	add.w	r8, r3, #1
 8004ce4:	9303      	str	r3, [sp, #12]
 8004ce6:	4643      	mov	r3, r8
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	bfb8      	it	lt
 8004cec:	2301      	movlt	r3, #1
 8004cee:	e012      	b.n	8004d16 <_dtoa_r+0x296>
 8004cf0:	2501      	movs	r5, #1
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	9306      	str	r3, [sp, #24]
 8004cf6:	9508      	str	r5, [sp, #32]
 8004cf8:	e001      	b.n	8004cfe <_dtoa_r+0x27e>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	9308      	str	r3, [sp, #32]
 8004cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8004d02:	9303      	str	r3, [sp, #12]
 8004d04:	4698      	mov	r8, r3
 8004d06:	2200      	movs	r2, #0
 8004d08:	2312      	movs	r3, #18
 8004d0a:	e003      	b.n	8004d14 <_dtoa_r+0x294>
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	9303      	str	r3, [sp, #12]
 8004d10:	4698      	mov	r8, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	9209      	str	r2, [sp, #36]	; 0x24
 8004d16:	f8da 4024 	ldr.w	r4, [sl, #36]	; 0x24
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	6062      	str	r2, [r4, #4]
 8004d1e:	2104      	movs	r1, #4
 8004d20:	f101 0214 	add.w	r2, r1, #20
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d81f      	bhi.n	8004d68 <_dtoa_r+0x2e8>
 8004d28:	6862      	ldr	r2, [r4, #4]
 8004d2a:	3201      	adds	r2, #1
 8004d2c:	6062      	str	r2, [r4, #4]
 8004d2e:	0049      	lsls	r1, r1, #1
 8004d30:	e7f6      	b.n	8004d20 <_dtoa_r+0x2a0>
 8004d32:	bf00      	nop
 8004d34:	f3af 8000 	nop.w
 8004d38:	636f4361 	.word	0x636f4361
 8004d3c:	3fd287a7 	.word	0x3fd287a7
 8004d40:	8b60c8b3 	.word	0x8b60c8b3
 8004d44:	3fc68a28 	.word	0x3fc68a28
 8004d48:	509f79fb 	.word	0x509f79fb
 8004d4c:	3fd34413 	.word	0x3fd34413
 8004d50:	7ff00000 	.word	0x7ff00000
 8004d54:	080072f2 	.word	0x080072f2
 8004d58:	080072fb 	.word	0x080072fb
 8004d5c:	080072e1 	.word	0x080072e1
 8004d60:	3ff80000 	.word	0x3ff80000
 8004d64:	08007370 	.word	0x08007370
 8004d68:	6861      	ldr	r1, [r4, #4]
 8004d6a:	4650      	mov	r0, sl
 8004d6c:	f001 f971 	bl	8006052 <_Balloc>
 8004d70:	f8da 3024 	ldr.w	r3, [sl, #36]	; 0x24
 8004d74:	6020      	str	r0, [r4, #0]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	9304      	str	r3, [sp, #16]
 8004d7a:	f1b8 0f0e 	cmp.w	r8, #14
 8004d7e:	f200 815d 	bhi.w	800503c <_dtoa_r+0x5bc>
 8004d82:	2d00      	cmp	r5, #0
 8004d84:	f000 815a 	beq.w	800503c <_dtoa_r+0x5bc>
 8004d88:	ed9d 7b00 	vldr	d7, [sp]
 8004d8c:	f1bb 0f00 	cmp.w	fp, #0
 8004d90:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d94:	dd31      	ble.n	8004dfa <_dtoa_r+0x37a>
 8004d96:	4aa0      	ldr	r2, [pc, #640]	; (8005018 <_dtoa_r+0x598>)
 8004d98:	f00b 030f 	and.w	r3, fp, #15
 8004d9c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8004da0:	ed93 7b00 	vldr	d7, [r3]
 8004da4:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004da8:	06e2      	lsls	r2, r4, #27
 8004daa:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004dae:	d50c      	bpl.n	8004dca <_dtoa_r+0x34a>
 8004db0:	4b9a      	ldr	r3, [pc, #616]	; (800501c <_dtoa_r+0x59c>)
 8004db2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004db6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004dba:	f7fb fd43 	bl	8000844 <__aeabi_ddiv>
 8004dbe:	f004 040f 	and.w	r4, r4, #15
 8004dc2:	e9cd 0100 	strd	r0, r1, [sp]
 8004dc6:	2603      	movs	r6, #3
 8004dc8:	e000      	b.n	8004dcc <_dtoa_r+0x34c>
 8004dca:	2602      	movs	r6, #2
 8004dcc:	4d93      	ldr	r5, [pc, #588]	; (800501c <_dtoa_r+0x59c>)
 8004dce:	b16c      	cbz	r4, 8004dec <_dtoa_r+0x36c>
 8004dd0:	07e3      	lsls	r3, r4, #31
 8004dd2:	d508      	bpl.n	8004de6 <_dtoa_r+0x366>
 8004dd4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dd8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004ddc:	f7fb fc08 	bl	80005f0 <__aeabi_dmul>
 8004de0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004de4:	3601      	adds	r6, #1
 8004de6:	1064      	asrs	r4, r4, #1
 8004de8:	3508      	adds	r5, #8
 8004dea:	e7f0      	b.n	8004dce <_dtoa_r+0x34e>
 8004dec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004df4:	f7fb fd26 	bl	8000844 <__aeabi_ddiv>
 8004df8:	e020      	b.n	8004e3c <_dtoa_r+0x3bc>
 8004dfa:	f1cb 0400 	rsb	r4, fp, #0
 8004dfe:	b304      	cbz	r4, 8004e42 <_dtoa_r+0x3c2>
 8004e00:	4b85      	ldr	r3, [pc, #532]	; (8005018 <_dtoa_r+0x598>)
 8004e02:	4d86      	ldr	r5, [pc, #536]	; (800501c <_dtoa_r+0x59c>)
 8004e04:	f004 020f 	and.w	r2, r4, #15
 8004e08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e10:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004e14:	f7fb fbec 	bl	80005f0 <__aeabi_dmul>
 8004e18:	e9cd 0100 	strd	r0, r1, [sp]
 8004e1c:	1124      	asrs	r4, r4, #4
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2602      	movs	r6, #2
 8004e22:	b154      	cbz	r4, 8004e3a <_dtoa_r+0x3ba>
 8004e24:	07e7      	lsls	r7, r4, #31
 8004e26:	d505      	bpl.n	8004e34 <_dtoa_r+0x3b4>
 8004e28:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004e2c:	f7fb fbe0 	bl	80005f0 <__aeabi_dmul>
 8004e30:	3601      	adds	r6, #1
 8004e32:	2301      	movs	r3, #1
 8004e34:	1064      	asrs	r4, r4, #1
 8004e36:	3508      	adds	r5, #8
 8004e38:	e7f3      	b.n	8004e22 <_dtoa_r+0x3a2>
 8004e3a:	b11b      	cbz	r3, 8004e44 <_dtoa_r+0x3c4>
 8004e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e40:	e000      	b.n	8004e44 <_dtoa_r+0x3c4>
 8004e42:	2602      	movs	r6, #2
 8004e44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e46:	b1eb      	cbz	r3, 8004e84 <_dtoa_r+0x404>
 8004e48:	e9dd 4500 	ldrd	r4, r5, [sp]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	4b74      	ldr	r3, [pc, #464]	; (8005020 <_dtoa_r+0x5a0>)
 8004e50:	4620      	mov	r0, r4
 8004e52:	4629      	mov	r1, r5
 8004e54:	f7fb fe3e 	bl	8000ad4 <__aeabi_dcmplt>
 8004e58:	b1a0      	cbz	r0, 8004e84 <_dtoa_r+0x404>
 8004e5a:	f1b8 0f00 	cmp.w	r8, #0
 8004e5e:	d011      	beq.n	8004e84 <_dtoa_r+0x404>
 8004e60:	9b03      	ldr	r3, [sp, #12]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	f340 80e6 	ble.w	8005034 <_dtoa_r+0x5b4>
 8004e68:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004e6c:	930a      	str	r3, [sp, #40]	; 0x28
 8004e6e:	2200      	movs	r2, #0
 8004e70:	4b6c      	ldr	r3, [pc, #432]	; (8005024 <_dtoa_r+0x5a4>)
 8004e72:	4620      	mov	r0, r4
 8004e74:	4629      	mov	r1, r5
 8004e76:	f7fb fbbb 	bl	80005f0 <__aeabi_dmul>
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e80:	9f03      	ldr	r7, [sp, #12]
 8004e82:	e002      	b.n	8004e8a <_dtoa_r+0x40a>
 8004e84:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004e88:	4647      	mov	r7, r8
 8004e8a:	4630      	mov	r0, r6
 8004e8c:	f7fb fb4a 	bl	8000524 <__aeabi_i2d>
 8004e90:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e94:	f7fb fbac 	bl	80005f0 <__aeabi_dmul>
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4b63      	ldr	r3, [pc, #396]	; (8005028 <_dtoa_r+0x5a8>)
 8004e9c:	f7fb f9f6 	bl	800028c <__adddf3>
 8004ea0:	4604      	mov	r4, r0
 8004ea2:	f1a1 7550 	sub.w	r5, r1, #54525952	; 0x3400000
 8004ea6:	b9cf      	cbnz	r7, 8004edc <_dtoa_r+0x45c>
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	4b60      	ldr	r3, [pc, #384]	; (800502c <_dtoa_r+0x5ac>)
 8004eac:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004eb0:	f7fb f9ea 	bl	8000288 <__aeabi_dsub>
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	462b      	mov	r3, r5
 8004eb8:	e9cd 0100 	strd	r0, r1, [sp]
 8004ebc:	f7fb fe28 	bl	8000b10 <__aeabi_dcmpgt>
 8004ec0:	2800      	cmp	r0, #0
 8004ec2:	f040 8241 	bne.w	8005348 <_dtoa_r+0x8c8>
 8004ec6:	4622      	mov	r2, r4
 8004ec8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004ecc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ed0:	f7fb fe00 	bl	8000ad4 <__aeabi_dcmplt>
 8004ed4:	2800      	cmp	r0, #0
 8004ed6:	f040 822e 	bne.w	8005336 <_dtoa_r+0x8b6>
 8004eda:	e0ab      	b.n	8005034 <_dtoa_r+0x5b4>
 8004edc:	9a08      	ldr	r2, [sp, #32]
 8004ede:	4b4e      	ldr	r3, [pc, #312]	; (8005018 <_dtoa_r+0x598>)
 8004ee0:	1e79      	subs	r1, r7, #1
 8004ee2:	2a00      	cmp	r2, #0
 8004ee4:	d04a      	beq.n	8004f7c <_dtoa_r+0x4fc>
 8004ee6:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8004eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eee:	2000      	movs	r0, #0
 8004ef0:	494f      	ldr	r1, [pc, #316]	; (8005030 <_dtoa_r+0x5b0>)
 8004ef2:	f7fb fca7 	bl	8000844 <__aeabi_ddiv>
 8004ef6:	4622      	mov	r2, r4
 8004ef8:	462b      	mov	r3, r5
 8004efa:	f7fb f9c5 	bl	8000288 <__aeabi_dsub>
 8004efe:	9c04      	ldr	r4, [sp, #16]
 8004f00:	4605      	mov	r5, r0
 8004f02:	460e      	mov	r6, r1
 8004f04:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f08:	f7fb fe22 	bl	8000b50 <__aeabi_d2iz>
 8004f0c:	9012      	str	r0, [sp, #72]	; 0x48
 8004f0e:	f7fb fb09 	bl	8000524 <__aeabi_i2d>
 8004f12:	4602      	mov	r2, r0
 8004f14:	460b      	mov	r3, r1
 8004f16:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f1a:	f7fb f9b5 	bl	8000288 <__aeabi_dsub>
 8004f1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004f20:	3330      	adds	r3, #48	; 0x30
 8004f22:	f804 3b01 	strb.w	r3, [r4], #1
 8004f26:	462a      	mov	r2, r5
 8004f28:	4633      	mov	r3, r6
 8004f2a:	e9cd 0100 	strd	r0, r1, [sp]
 8004f2e:	f7fb fdd1 	bl	8000ad4 <__aeabi_dcmplt>
 8004f32:	2800      	cmp	r0, #0
 8004f34:	f040 8321 	bne.w	800557a <_dtoa_r+0xafa>
 8004f38:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	4938      	ldr	r1, [pc, #224]	; (8005020 <_dtoa_r+0x5a0>)
 8004f40:	f7fb f9a2 	bl	8000288 <__aeabi_dsub>
 8004f44:	462a      	mov	r2, r5
 8004f46:	4633      	mov	r3, r6
 8004f48:	f7fb fdc4 	bl	8000ad4 <__aeabi_dcmplt>
 8004f4c:	2800      	cmp	r0, #0
 8004f4e:	f040 80d2 	bne.w	80050f6 <_dtoa_r+0x676>
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	1ae3      	subs	r3, r4, r3
 8004f56:	42bb      	cmp	r3, r7
 8004f58:	da6c      	bge.n	8005034 <_dtoa_r+0x5b4>
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4b31      	ldr	r3, [pc, #196]	; (8005024 <_dtoa_r+0x5a4>)
 8004f5e:	4628      	mov	r0, r5
 8004f60:	4631      	mov	r1, r6
 8004f62:	f7fb fb45 	bl	80005f0 <__aeabi_dmul>
 8004f66:	2200      	movs	r2, #0
 8004f68:	4605      	mov	r5, r0
 8004f6a:	460e      	mov	r6, r1
 8004f6c:	4b2d      	ldr	r3, [pc, #180]	; (8005024 <_dtoa_r+0x5a4>)
 8004f6e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f72:	f7fb fb3d 	bl	80005f0 <__aeabi_dmul>
 8004f76:	e9cd 0100 	strd	r0, r1, [sp]
 8004f7a:	e7c3      	b.n	8004f04 <_dtoa_r+0x484>
 8004f7c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 8004f80:	4622      	mov	r2, r4
 8004f82:	462b      	mov	r3, r5
 8004f84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004f88:	f7fb fb32 	bl	80005f0 <__aeabi_dmul>
 8004f8c:	9b04      	ldr	r3, [sp, #16]
 8004f8e:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
 8004f92:	19dc      	adds	r4, r3, r7
 8004f94:	461d      	mov	r5, r3
 8004f96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f9a:	f7fb fdd9 	bl	8000b50 <__aeabi_d2iz>
 8004f9e:	4606      	mov	r6, r0
 8004fa0:	f7fb fac0 	bl	8000524 <__aeabi_i2d>
 8004fa4:	3630      	adds	r6, #48	; 0x30
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fae:	f7fb f96b 	bl	8000288 <__aeabi_dsub>
 8004fb2:	f805 6b01 	strb.w	r6, [r5], #1
 8004fb6:	42ac      	cmp	r4, r5
 8004fb8:	e9cd 0100 	strd	r0, r1, [sp]
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	d123      	bne.n	800500a <_dtoa_r+0x58a>
 8004fc2:	4b1b      	ldr	r3, [pc, #108]	; (8005030 <_dtoa_r+0x5b0>)
 8004fc4:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
 8004fc8:	f7fb f960 	bl	800028c <__adddf3>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fd4:	f7fb fd9c 	bl	8000b10 <__aeabi_dcmpgt>
 8004fd8:	2800      	cmp	r0, #0
 8004fda:	f040 808c 	bne.w	80050f6 <_dtoa_r+0x676>
 8004fde:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8004fe2:	2000      	movs	r0, #0
 8004fe4:	4912      	ldr	r1, [pc, #72]	; (8005030 <_dtoa_r+0x5b0>)
 8004fe6:	f7fb f94f 	bl	8000288 <__aeabi_dsub>
 8004fea:	4602      	mov	r2, r0
 8004fec:	460b      	mov	r3, r1
 8004fee:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ff2:	f7fb fd6f 	bl	8000ad4 <__aeabi_dcmplt>
 8004ff6:	b1e8      	cbz	r0, 8005034 <_dtoa_r+0x5b4>
 8004ff8:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8004ffc:	2b30      	cmp	r3, #48	; 0x30
 8004ffe:	f104 32ff 	add.w	r2, r4, #4294967295
 8005002:	f040 82ba 	bne.w	800557a <_dtoa_r+0xafa>
 8005006:	4614      	mov	r4, r2
 8005008:	e7f6      	b.n	8004ff8 <_dtoa_r+0x578>
 800500a:	4b06      	ldr	r3, [pc, #24]	; (8005024 <_dtoa_r+0x5a4>)
 800500c:	f7fb faf0 	bl	80005f0 <__aeabi_dmul>
 8005010:	e9cd 0100 	strd	r0, r1, [sp]
 8005014:	e7bf      	b.n	8004f96 <_dtoa_r+0x516>
 8005016:	bf00      	nop
 8005018:	08007370 	.word	0x08007370
 800501c:	08007438 	.word	0x08007438
 8005020:	3ff00000 	.word	0x3ff00000
 8005024:	40240000 	.word	0x40240000
 8005028:	401c0000 	.word	0x401c0000
 800502c:	40140000 	.word	0x40140000
 8005030:	3fe00000 	.word	0x3fe00000
 8005034:	e9dd 340e 	ldrd	r3, r4, [sp, #56]	; 0x38
 8005038:	e88d 0018 	stmia.w	sp, {r3, r4}
 800503c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800503e:	2b00      	cmp	r3, #0
 8005040:	db7c      	blt.n	800513c <_dtoa_r+0x6bc>
 8005042:	f1bb 0f0e 	cmp.w	fp, #14
 8005046:	dc79      	bgt.n	800513c <_dtoa_r+0x6bc>
 8005048:	4b8f      	ldr	r3, [pc, #572]	; (8005288 <_dtoa_r+0x808>)
 800504a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800504e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	da14      	bge.n	8005082 <_dtoa_r+0x602>
 8005058:	f1b8 0f00 	cmp.w	r8, #0
 800505c:	dc11      	bgt.n	8005082 <_dtoa_r+0x602>
 800505e:	f040 816c 	bne.w	800533a <_dtoa_r+0x8ba>
 8005062:	2200      	movs	r2, #0
 8005064:	4b89      	ldr	r3, [pc, #548]	; (800528c <_dtoa_r+0x80c>)
 8005066:	4630      	mov	r0, r6
 8005068:	4639      	mov	r1, r7
 800506a:	f7fb fac1 	bl	80005f0 <__aeabi_dmul>
 800506e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005072:	f7fb fd43 	bl	8000afc <__aeabi_dcmpge>
 8005076:	4645      	mov	r5, r8
 8005078:	4646      	mov	r6, r8
 800507a:	2800      	cmp	r0, #0
 800507c:	f040 815f 	bne.w	800533e <_dtoa_r+0x8be>
 8005080:	e166      	b.n	8005350 <_dtoa_r+0x8d0>
 8005082:	9c04      	ldr	r4, [sp, #16]
 8005084:	4632      	mov	r2, r6
 8005086:	463b      	mov	r3, r7
 8005088:	e9dd 0100 	ldrd	r0, r1, [sp]
 800508c:	f7fb fbda 	bl	8000844 <__aeabi_ddiv>
 8005090:	f7fb fd5e 	bl	8000b50 <__aeabi_d2iz>
 8005094:	4605      	mov	r5, r0
 8005096:	f7fb fa45 	bl	8000524 <__aeabi_i2d>
 800509a:	4632      	mov	r2, r6
 800509c:	463b      	mov	r3, r7
 800509e:	f7fb faa7 	bl	80005f0 <__aeabi_dmul>
 80050a2:	460b      	mov	r3, r1
 80050a4:	4602      	mov	r2, r0
 80050a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050aa:	f7fb f8ed 	bl	8000288 <__aeabi_dsub>
 80050ae:	f105 0e30 	add.w	lr, r5, #48	; 0x30
 80050b2:	f804 eb01 	strb.w	lr, [r4], #1
 80050b6:	9b04      	ldr	r3, [sp, #16]
 80050b8:	ebc3 0e04 	rsb	lr, r3, r4
 80050bc:	45f0      	cmp	r8, lr
 80050be:	e9cd 0100 	strd	r0, r1, [sp]
 80050c2:	d12e      	bne.n	8005122 <_dtoa_r+0x6a2>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	f7fb f8e0 	bl	800028c <__adddf3>
 80050cc:	4680      	mov	r8, r0
 80050ce:	4689      	mov	r9, r1
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4630      	mov	r0, r6
 80050d6:	4639      	mov	r1, r7
 80050d8:	f7fb fcfc 	bl	8000ad4 <__aeabi_dcmplt>
 80050dc:	b978      	cbnz	r0, 80050fe <_dtoa_r+0x67e>
 80050de:	4642      	mov	r2, r8
 80050e0:	464b      	mov	r3, r9
 80050e2:	4630      	mov	r0, r6
 80050e4:	4639      	mov	r1, r7
 80050e6:	f7fb fceb 	bl	8000ac0 <__aeabi_dcmpeq>
 80050ea:	2800      	cmp	r0, #0
 80050ec:	f000 8247 	beq.w	800557e <_dtoa_r+0xafe>
 80050f0:	07e9      	lsls	r1, r5, #31
 80050f2:	d404      	bmi.n	80050fe <_dtoa_r+0x67e>
 80050f4:	e243      	b.n	800557e <_dtoa_r+0xafe>
 80050f6:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 80050fa:	e000      	b.n	80050fe <_dtoa_r+0x67e>
 80050fc:	461c      	mov	r4, r3
 80050fe:	f814 2c01 	ldrb.w	r2, [r4, #-1]
 8005102:	2a39      	cmp	r2, #57	; 0x39
 8005104:	f104 33ff 	add.w	r3, r4, #4294967295
 8005108:	d107      	bne.n	800511a <_dtoa_r+0x69a>
 800510a:	9a04      	ldr	r2, [sp, #16]
 800510c:	429a      	cmp	r2, r3
 800510e:	d1f5      	bne.n	80050fc <_dtoa_r+0x67c>
 8005110:	9904      	ldr	r1, [sp, #16]
 8005112:	2230      	movs	r2, #48	; 0x30
 8005114:	f10b 0b01 	add.w	fp, fp, #1
 8005118:	700a      	strb	r2, [r1, #0]
 800511a:	781a      	ldrb	r2, [r3, #0]
 800511c:	3201      	adds	r2, #1
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	e22d      	b.n	800557e <_dtoa_r+0xafe>
 8005122:	2200      	movs	r2, #0
 8005124:	4b5a      	ldr	r3, [pc, #360]	; (8005290 <_dtoa_r+0x810>)
 8005126:	f7fb fa63 	bl	80005f0 <__aeabi_dmul>
 800512a:	2200      	movs	r2, #0
 800512c:	2300      	movs	r3, #0
 800512e:	e9cd 0100 	strd	r0, r1, [sp]
 8005132:	f7fb fcc5 	bl	8000ac0 <__aeabi_dcmpeq>
 8005136:	2800      	cmp	r0, #0
 8005138:	d0a4      	beq.n	8005084 <_dtoa_r+0x604>
 800513a:	e220      	b.n	800557e <_dtoa_r+0xafe>
 800513c:	9a08      	ldr	r2, [sp, #32]
 800513e:	2a00      	cmp	r2, #0
 8005140:	d02d      	beq.n	800519e <_dtoa_r+0x71e>
 8005142:	9a06      	ldr	r2, [sp, #24]
 8005144:	2a01      	cmp	r2, #1
 8005146:	dc0a      	bgt.n	800515e <_dtoa_r+0x6de>
 8005148:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800514a:	b112      	cbz	r2, 8005152 <_dtoa_r+0x6d2>
 800514c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005150:	e002      	b.n	8005158 <_dtoa_r+0x6d8>
 8005152:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005154:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005158:	9d07      	ldr	r5, [sp, #28]
 800515a:	464c      	mov	r4, r9
 800515c:	e015      	b.n	800518a <_dtoa_r+0x70a>
 800515e:	9b07      	ldr	r3, [sp, #28]
 8005160:	f108 35ff 	add.w	r5, r8, #4294967295
 8005164:	42ab      	cmp	r3, r5
 8005166:	bfbf      	itttt	lt
 8005168:	9b07      	ldrlt	r3, [sp, #28]
 800516a:	9507      	strlt	r5, [sp, #28]
 800516c:	1aea      	sublt	r2, r5, r3
 800516e:	9b0c      	ldrlt	r3, [sp, #48]	; 0x30
 8005170:	bfb7      	itett	lt
 8005172:	189b      	addlt	r3, r3, r2
 8005174:	1b5d      	subge	r5, r3, r5
 8005176:	930c      	strlt	r3, [sp, #48]	; 0x30
 8005178:	2500      	movlt	r5, #0
 800517a:	f1b8 0f00 	cmp.w	r8, #0
 800517e:	bfb9      	ittee	lt
 8005180:	ebc8 0409 	rsblt	r4, r8, r9
 8005184:	2300      	movlt	r3, #0
 8005186:	464c      	movge	r4, r9
 8005188:	4643      	movge	r3, r8
 800518a:	9a05      	ldr	r2, [sp, #20]
 800518c:	2101      	movs	r1, #1
 800518e:	441a      	add	r2, r3
 8005190:	4650      	mov	r0, sl
 8005192:	4499      	add	r9, r3
 8005194:	9205      	str	r2, [sp, #20]
 8005196:	f001 f830 	bl	80061fa <__i2b>
 800519a:	4606      	mov	r6, r0
 800519c:	e002      	b.n	80051a4 <_dtoa_r+0x724>
 800519e:	9d07      	ldr	r5, [sp, #28]
 80051a0:	9e08      	ldr	r6, [sp, #32]
 80051a2:	464c      	mov	r4, r9
 80051a4:	b15c      	cbz	r4, 80051be <_dtoa_r+0x73e>
 80051a6:	9b05      	ldr	r3, [sp, #20]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	dd08      	ble.n	80051be <_dtoa_r+0x73e>
 80051ac:	42a3      	cmp	r3, r4
 80051ae:	9a05      	ldr	r2, [sp, #20]
 80051b0:	bfa8      	it	ge
 80051b2:	4623      	movge	r3, r4
 80051b4:	ebc3 0909 	rsb	r9, r3, r9
 80051b8:	1ae4      	subs	r4, r4, r3
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	9305      	str	r3, [sp, #20]
 80051be:	9b07      	ldr	r3, [sp, #28]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	dd1d      	ble.n	8005200 <_dtoa_r+0x780>
 80051c4:	9b08      	ldr	r3, [sp, #32]
 80051c6:	b1ab      	cbz	r3, 80051f4 <_dtoa_r+0x774>
 80051c8:	b185      	cbz	r5, 80051ec <_dtoa_r+0x76c>
 80051ca:	4631      	mov	r1, r6
 80051cc:	462a      	mov	r2, r5
 80051ce:	4650      	mov	r0, sl
 80051d0:	f001 f8ae 	bl	8006330 <__pow5mult>
 80051d4:	9a02      	ldr	r2, [sp, #8]
 80051d6:	4601      	mov	r1, r0
 80051d8:	4606      	mov	r6, r0
 80051da:	4650      	mov	r0, sl
 80051dc:	f001 f816 	bl	800620c <__multiply>
 80051e0:	9902      	ldr	r1, [sp, #8]
 80051e2:	4607      	mov	r7, r0
 80051e4:	4650      	mov	r0, sl
 80051e6:	f000 ff69 	bl	80060bc <_Bfree>
 80051ea:	9702      	str	r7, [sp, #8]
 80051ec:	9b07      	ldr	r3, [sp, #28]
 80051ee:	1b5a      	subs	r2, r3, r5
 80051f0:	d006      	beq.n	8005200 <_dtoa_r+0x780>
 80051f2:	e000      	b.n	80051f6 <_dtoa_r+0x776>
 80051f4:	9a07      	ldr	r2, [sp, #28]
 80051f6:	9902      	ldr	r1, [sp, #8]
 80051f8:	4650      	mov	r0, sl
 80051fa:	f001 f899 	bl	8006330 <__pow5mult>
 80051fe:	9002      	str	r0, [sp, #8]
 8005200:	2101      	movs	r1, #1
 8005202:	4650      	mov	r0, sl
 8005204:	f000 fff9 	bl	80061fa <__i2b>
 8005208:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800520a:	4605      	mov	r5, r0
 800520c:	b35b      	cbz	r3, 8005266 <_dtoa_r+0x7e6>
 800520e:	461a      	mov	r2, r3
 8005210:	4601      	mov	r1, r0
 8005212:	4650      	mov	r0, sl
 8005214:	f001 f88c 	bl	8006330 <__pow5mult>
 8005218:	9b06      	ldr	r3, [sp, #24]
 800521a:	2b01      	cmp	r3, #1
 800521c:	4605      	mov	r5, r0
 800521e:	dc18      	bgt.n	8005252 <_dtoa_r+0x7d2>
 8005220:	9b00      	ldr	r3, [sp, #0]
 8005222:	b983      	cbnz	r3, 8005246 <_dtoa_r+0x7c6>
 8005224:	9b01      	ldr	r3, [sp, #4]
 8005226:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800522a:	b973      	cbnz	r3, 800524a <_dtoa_r+0x7ca>
 800522c:	9b01      	ldr	r3, [sp, #4]
 800522e:	f023 4700 	bic.w	r7, r3, #2147483648	; 0x80000000
 8005232:	0d3f      	lsrs	r7, r7, #20
 8005234:	053f      	lsls	r7, r7, #20
 8005236:	b14f      	cbz	r7, 800524c <_dtoa_r+0x7cc>
 8005238:	9b05      	ldr	r3, [sp, #20]
 800523a:	3301      	adds	r3, #1
 800523c:	f109 0901 	add.w	r9, r9, #1
 8005240:	9305      	str	r3, [sp, #20]
 8005242:	2701      	movs	r7, #1
 8005244:	e002      	b.n	800524c <_dtoa_r+0x7cc>
 8005246:	2700      	movs	r7, #0
 8005248:	e000      	b.n	800524c <_dtoa_r+0x7cc>
 800524a:	9f00      	ldr	r7, [sp, #0]
 800524c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800524e:	b173      	cbz	r3, 800526e <_dtoa_r+0x7ee>
 8005250:	e000      	b.n	8005254 <_dtoa_r+0x7d4>
 8005252:	2700      	movs	r7, #0
 8005254:	692b      	ldr	r3, [r5, #16]
 8005256:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800525a:	6918      	ldr	r0, [r3, #16]
 800525c:	f000 ff80 	bl	8006160 <__hi0bits>
 8005260:	f1c0 0020 	rsb	r0, r0, #32
 8005264:	e004      	b.n	8005270 <_dtoa_r+0x7f0>
 8005266:	9b06      	ldr	r3, [sp, #24]
 8005268:	2b01      	cmp	r3, #1
 800526a:	ddd9      	ble.n	8005220 <_dtoa_r+0x7a0>
 800526c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 800526e:	2001      	movs	r0, #1
 8005270:	9b05      	ldr	r3, [sp, #20]
 8005272:	4418      	add	r0, r3
 8005274:	f010 001f 	ands.w	r0, r0, #31
 8005278:	d00e      	beq.n	8005298 <_dtoa_r+0x818>
 800527a:	f1c0 0320 	rsb	r3, r0, #32
 800527e:	2b04      	cmp	r3, #4
 8005280:	dd08      	ble.n	8005294 <_dtoa_r+0x814>
 8005282:	f1c0 001c 	rsb	r0, r0, #28
 8005286:	e008      	b.n	800529a <_dtoa_r+0x81a>
 8005288:	08007370 	.word	0x08007370
 800528c:	40140000 	.word	0x40140000
 8005290:	40240000 	.word	0x40240000
 8005294:	d006      	beq.n	80052a4 <_dtoa_r+0x824>
 8005296:	4618      	mov	r0, r3
 8005298:	301c      	adds	r0, #28
 800529a:	9b05      	ldr	r3, [sp, #20]
 800529c:	4403      	add	r3, r0
 800529e:	4481      	add	r9, r0
 80052a0:	4404      	add	r4, r0
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	f1b9 0f00 	cmp.w	r9, #0
 80052a8:	dd05      	ble.n	80052b6 <_dtoa_r+0x836>
 80052aa:	464a      	mov	r2, r9
 80052ac:	9902      	ldr	r1, [sp, #8]
 80052ae:	4650      	mov	r0, sl
 80052b0:	f001 f88c 	bl	80063cc <__lshift>
 80052b4:	9002      	str	r0, [sp, #8]
 80052b6:	9b05      	ldr	r3, [sp, #20]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	dd05      	ble.n	80052c8 <_dtoa_r+0x848>
 80052bc:	4629      	mov	r1, r5
 80052be:	461a      	mov	r2, r3
 80052c0:	4650      	mov	r0, sl
 80052c2:	f001 f883 	bl	80063cc <__lshift>
 80052c6:	4605      	mov	r5, r0
 80052c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80052ca:	b1eb      	cbz	r3, 8005308 <_dtoa_r+0x888>
 80052cc:	4629      	mov	r1, r5
 80052ce:	9802      	ldr	r0, [sp, #8]
 80052d0:	f001 f8cd 	bl	800646e <__mcmp>
 80052d4:	2800      	cmp	r0, #0
 80052d6:	da17      	bge.n	8005308 <_dtoa_r+0x888>
 80052d8:	2300      	movs	r3, #0
 80052da:	220a      	movs	r2, #10
 80052dc:	9902      	ldr	r1, [sp, #8]
 80052de:	4650      	mov	r0, sl
 80052e0:	f000 ff03 	bl	80060ea <__multadd>
 80052e4:	9b08      	ldr	r3, [sp, #32]
 80052e6:	9002      	str	r0, [sp, #8]
 80052e8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	f000 8158 	beq.w	80055a2 <_dtoa_r+0xb22>
 80052f2:	2300      	movs	r3, #0
 80052f4:	4631      	mov	r1, r6
 80052f6:	220a      	movs	r2, #10
 80052f8:	4650      	mov	r0, sl
 80052fa:	f000 fef6 	bl	80060ea <__multadd>
 80052fe:	9b03      	ldr	r3, [sp, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	4606      	mov	r6, r0
 8005304:	dc37      	bgt.n	8005376 <_dtoa_r+0x8f6>
 8005306:	e033      	b.n	8005370 <_dtoa_r+0x8f0>
 8005308:	f1b8 0f00 	cmp.w	r8, #0
 800530c:	dc2a      	bgt.n	8005364 <_dtoa_r+0x8e4>
 800530e:	9b06      	ldr	r3, [sp, #24]
 8005310:	2b02      	cmp	r3, #2
 8005312:	dd27      	ble.n	8005364 <_dtoa_r+0x8e4>
 8005314:	f8cd 800c 	str.w	r8, [sp, #12]
 8005318:	9b03      	ldr	r3, [sp, #12]
 800531a:	b983      	cbnz	r3, 800533e <_dtoa_r+0x8be>
 800531c:	4629      	mov	r1, r5
 800531e:	2205      	movs	r2, #5
 8005320:	4650      	mov	r0, sl
 8005322:	f000 fee2 	bl	80060ea <__multadd>
 8005326:	4601      	mov	r1, r0
 8005328:	4605      	mov	r5, r0
 800532a:	9802      	ldr	r0, [sp, #8]
 800532c:	f001 f89f 	bl	800646e <__mcmp>
 8005330:	2800      	cmp	r0, #0
 8005332:	dc0d      	bgt.n	8005350 <_dtoa_r+0x8d0>
 8005334:	e003      	b.n	800533e <_dtoa_r+0x8be>
 8005336:	463d      	mov	r5, r7
 8005338:	e000      	b.n	800533c <_dtoa_r+0x8bc>
 800533a:	2500      	movs	r5, #0
 800533c:	462e      	mov	r6, r5
 800533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005340:	9c04      	ldr	r4, [sp, #16]
 8005342:	ea6f 0b03 	mvn.w	fp, r3
 8005346:	e00a      	b.n	800535e <_dtoa_r+0x8de>
 8005348:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800534c:	463d      	mov	r5, r7
 800534e:	463e      	mov	r6, r7
 8005350:	9b04      	ldr	r3, [sp, #16]
 8005352:	9a04      	ldr	r2, [sp, #16]
 8005354:	1c5c      	adds	r4, r3, #1
 8005356:	2331      	movs	r3, #49	; 0x31
 8005358:	7013      	strb	r3, [r2, #0]
 800535a:	f10b 0b01 	add.w	fp, fp, #1
 800535e:	46b0      	mov	r8, r6
 8005360:	2600      	movs	r6, #0
 8005362:	e0f7      	b.n	8005554 <_dtoa_r+0xad4>
 8005364:	9b08      	ldr	r3, [sp, #32]
 8005366:	f8cd 800c 	str.w	r8, [sp, #12]
 800536a:	b923      	cbnz	r3, 8005376 <_dtoa_r+0x8f6>
 800536c:	9c04      	ldr	r4, [sp, #16]
 800536e:	e0b1      	b.n	80054d4 <_dtoa_r+0xa54>
 8005370:	9b06      	ldr	r3, [sp, #24]
 8005372:	2b02      	cmp	r3, #2
 8005374:	dcd0      	bgt.n	8005318 <_dtoa_r+0x898>
 8005376:	2c00      	cmp	r4, #0
 8005378:	dd05      	ble.n	8005386 <_dtoa_r+0x906>
 800537a:	4631      	mov	r1, r6
 800537c:	4622      	mov	r2, r4
 800537e:	4650      	mov	r0, sl
 8005380:	f001 f824 	bl	80063cc <__lshift>
 8005384:	4606      	mov	r6, r0
 8005386:	b19f      	cbz	r7, 80053b0 <_dtoa_r+0x930>
 8005388:	6871      	ldr	r1, [r6, #4]
 800538a:	4650      	mov	r0, sl
 800538c:	f000 fe61 	bl	8006052 <_Balloc>
 8005390:	6932      	ldr	r2, [r6, #16]
 8005392:	3202      	adds	r2, #2
 8005394:	4604      	mov	r4, r0
 8005396:	0092      	lsls	r2, r2, #2
 8005398:	f106 010c 	add.w	r1, r6, #12
 800539c:	300c      	adds	r0, #12
 800539e:	f000 fe4b 	bl	8006038 <memcpy>
 80053a2:	2201      	movs	r2, #1
 80053a4:	4621      	mov	r1, r4
 80053a6:	4650      	mov	r0, sl
 80053a8:	f001 f810 	bl	80063cc <__lshift>
 80053ac:	4680      	mov	r8, r0
 80053ae:	e000      	b.n	80053b2 <_dtoa_r+0x932>
 80053b0:	46b0      	mov	r8, r6
 80053b2:	9b00      	ldr	r3, [sp, #0]
 80053b4:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	9305      	str	r3, [sp, #20]
 80053be:	4629      	mov	r1, r5
 80053c0:	9802      	ldr	r0, [sp, #8]
 80053c2:	f7ff facb 	bl	800495c <quorem>
 80053c6:	4631      	mov	r1, r6
 80053c8:	4604      	mov	r4, r0
 80053ca:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80053ce:	9802      	ldr	r0, [sp, #8]
 80053d0:	f001 f84d 	bl	800646e <__mcmp>
 80053d4:	4642      	mov	r2, r8
 80053d6:	9000      	str	r0, [sp, #0]
 80053d8:	4629      	mov	r1, r5
 80053da:	4650      	mov	r0, sl
 80053dc:	f001 f863 	bl	80064a6 <__mdiff>
 80053e0:	68c3      	ldr	r3, [r0, #12]
 80053e2:	4602      	mov	r2, r0
 80053e4:	b93b      	cbnz	r3, 80053f6 <_dtoa_r+0x976>
 80053e6:	4601      	mov	r1, r0
 80053e8:	9007      	str	r0, [sp, #28]
 80053ea:	9802      	ldr	r0, [sp, #8]
 80053ec:	f001 f83f 	bl	800646e <__mcmp>
 80053f0:	9a07      	ldr	r2, [sp, #28]
 80053f2:	4603      	mov	r3, r0
 80053f4:	e000      	b.n	80053f8 <_dtoa_r+0x978>
 80053f6:	2301      	movs	r3, #1
 80053f8:	4611      	mov	r1, r2
 80053fa:	4650      	mov	r0, sl
 80053fc:	9307      	str	r3, [sp, #28]
 80053fe:	f000 fe5d 	bl	80060bc <_Bfree>
 8005402:	9b07      	ldr	r3, [sp, #28]
 8005404:	b94b      	cbnz	r3, 800541a <_dtoa_r+0x99a>
 8005406:	9a06      	ldr	r2, [sp, #24]
 8005408:	b93a      	cbnz	r2, 800541a <_dtoa_r+0x99a>
 800540a:	9a05      	ldr	r2, [sp, #20]
 800540c:	b92a      	cbnz	r2, 800541a <_dtoa_r+0x99a>
 800540e:	2f39      	cmp	r7, #57	; 0x39
 8005410:	d028      	beq.n	8005464 <_dtoa_r+0x9e4>
 8005412:	9b00      	ldr	r3, [sp, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	dc1a      	bgt.n	800544e <_dtoa_r+0x9ce>
 8005418:	e01b      	b.n	8005452 <_dtoa_r+0x9d2>
 800541a:	9a00      	ldr	r2, [sp, #0]
 800541c:	2a00      	cmp	r2, #0
 800541e:	db04      	blt.n	800542a <_dtoa_r+0x9aa>
 8005420:	d11a      	bne.n	8005458 <_dtoa_r+0x9d8>
 8005422:	9a06      	ldr	r2, [sp, #24]
 8005424:	b9c2      	cbnz	r2, 8005458 <_dtoa_r+0x9d8>
 8005426:	9a05      	ldr	r2, [sp, #20]
 8005428:	b9b2      	cbnz	r2, 8005458 <_dtoa_r+0x9d8>
 800542a:	2b00      	cmp	r3, #0
 800542c:	dd11      	ble.n	8005452 <_dtoa_r+0x9d2>
 800542e:	2201      	movs	r2, #1
 8005430:	9902      	ldr	r1, [sp, #8]
 8005432:	4650      	mov	r0, sl
 8005434:	f000 ffca 	bl	80063cc <__lshift>
 8005438:	4629      	mov	r1, r5
 800543a:	9002      	str	r0, [sp, #8]
 800543c:	f001 f817 	bl	800646e <__mcmp>
 8005440:	2800      	cmp	r0, #0
 8005442:	dc02      	bgt.n	800544a <_dtoa_r+0x9ca>
 8005444:	d105      	bne.n	8005452 <_dtoa_r+0x9d2>
 8005446:	07fa      	lsls	r2, r7, #31
 8005448:	d503      	bpl.n	8005452 <_dtoa_r+0x9d2>
 800544a:	2f39      	cmp	r7, #57	; 0x39
 800544c:	d00a      	beq.n	8005464 <_dtoa_r+0x9e4>
 800544e:	f104 0731 	add.w	r7, r4, #49	; 0x31
 8005452:	f109 0401 	add.w	r4, r9, #1
 8005456:	e00c      	b.n	8005472 <_dtoa_r+0x9f2>
 8005458:	2b00      	cmp	r3, #0
 800545a:	f109 0401 	add.w	r4, r9, #1
 800545e:	dd0b      	ble.n	8005478 <_dtoa_r+0x9f8>
 8005460:	2f39      	cmp	r7, #57	; 0x39
 8005462:	d105      	bne.n	8005470 <_dtoa_r+0x9f0>
 8005464:	2339      	movs	r3, #57	; 0x39
 8005466:	f889 3000 	strb.w	r3, [r9]
 800546a:	f109 0901 	add.w	r9, r9, #1
 800546e:	e054      	b.n	800551a <_dtoa_r+0xa9a>
 8005470:	3701      	adds	r7, #1
 8005472:	f889 7000 	strb.w	r7, [r9]
 8005476:	e06d      	b.n	8005554 <_dtoa_r+0xad4>
 8005478:	9b04      	ldr	r3, [sp, #16]
 800547a:	9a03      	ldr	r2, [sp, #12]
 800547c:	f804 7c01 	strb.w	r7, [r4, #-1]
 8005480:	1ae3      	subs	r3, r4, r3
 8005482:	4293      	cmp	r3, r2
 8005484:	46a1      	mov	r9, r4
 8005486:	d03a      	beq.n	80054fe <_dtoa_r+0xa7e>
 8005488:	2300      	movs	r3, #0
 800548a:	220a      	movs	r2, #10
 800548c:	9902      	ldr	r1, [sp, #8]
 800548e:	4650      	mov	r0, sl
 8005490:	f000 fe2b 	bl	80060ea <__multadd>
 8005494:	4546      	cmp	r6, r8
 8005496:	9002      	str	r0, [sp, #8]
 8005498:	f04f 0300 	mov.w	r3, #0
 800549c:	f04f 020a 	mov.w	r2, #10
 80054a0:	4631      	mov	r1, r6
 80054a2:	4650      	mov	r0, sl
 80054a4:	d104      	bne.n	80054b0 <_dtoa_r+0xa30>
 80054a6:	f000 fe20 	bl	80060ea <__multadd>
 80054aa:	4606      	mov	r6, r0
 80054ac:	4680      	mov	r8, r0
 80054ae:	e786      	b.n	80053be <_dtoa_r+0x93e>
 80054b0:	f000 fe1b 	bl	80060ea <__multadd>
 80054b4:	4641      	mov	r1, r8
 80054b6:	4606      	mov	r6, r0
 80054b8:	2300      	movs	r3, #0
 80054ba:	220a      	movs	r2, #10
 80054bc:	4650      	mov	r0, sl
 80054be:	f000 fe14 	bl	80060ea <__multadd>
 80054c2:	4680      	mov	r8, r0
 80054c4:	e77b      	b.n	80053be <_dtoa_r+0x93e>
 80054c6:	2300      	movs	r3, #0
 80054c8:	220a      	movs	r2, #10
 80054ca:	9902      	ldr	r1, [sp, #8]
 80054cc:	4650      	mov	r0, sl
 80054ce:	f000 fe0c 	bl	80060ea <__multadd>
 80054d2:	9002      	str	r0, [sp, #8]
 80054d4:	4629      	mov	r1, r5
 80054d6:	9802      	ldr	r0, [sp, #8]
 80054d8:	f7ff fa40 	bl	800495c <quorem>
 80054dc:	f100 0730 	add.w	r7, r0, #48	; 0x30
 80054e0:	f804 7b01 	strb.w	r7, [r4], #1
 80054e4:	9b04      	ldr	r3, [sp, #16]
 80054e6:	9a03      	ldr	r2, [sp, #12]
 80054e8:	1ae3      	subs	r3, r4, r3
 80054ea:	4293      	cmp	r3, r2
 80054ec:	dbeb      	blt.n	80054c6 <_dtoa_r+0xa46>
 80054ee:	9b04      	ldr	r3, [sp, #16]
 80054f0:	2a01      	cmp	r2, #1
 80054f2:	bfac      	ite	ge
 80054f4:	189b      	addge	r3, r3, r2
 80054f6:	3301      	addlt	r3, #1
 80054f8:	46b0      	mov	r8, r6
 80054fa:	4699      	mov	r9, r3
 80054fc:	2600      	movs	r6, #0
 80054fe:	2201      	movs	r2, #1
 8005500:	9902      	ldr	r1, [sp, #8]
 8005502:	4650      	mov	r0, sl
 8005504:	f000 ff62 	bl	80063cc <__lshift>
 8005508:	4629      	mov	r1, r5
 800550a:	9002      	str	r0, [sp, #8]
 800550c:	f000 ffaf 	bl	800646e <__mcmp>
 8005510:	2800      	cmp	r0, #0
 8005512:	dc02      	bgt.n	800551a <_dtoa_r+0xa9a>
 8005514:	d115      	bne.n	8005542 <_dtoa_r+0xac2>
 8005516:	07fb      	lsls	r3, r7, #31
 8005518:	d513      	bpl.n	8005542 <_dtoa_r+0xac2>
 800551a:	464c      	mov	r4, r9
 800551c:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005520:	2b39      	cmp	r3, #57	; 0x39
 8005522:	f104 32ff 	add.w	r2, r4, #4294967295
 8005526:	d109      	bne.n	800553c <_dtoa_r+0xabc>
 8005528:	9b04      	ldr	r3, [sp, #16]
 800552a:	4293      	cmp	r3, r2
 800552c:	d104      	bne.n	8005538 <_dtoa_r+0xab8>
 800552e:	f10b 0b01 	add.w	fp, fp, #1
 8005532:	2331      	movs	r3, #49	; 0x31
 8005534:	9a04      	ldr	r2, [sp, #16]
 8005536:	e002      	b.n	800553e <_dtoa_r+0xabe>
 8005538:	4614      	mov	r4, r2
 800553a:	e7ef      	b.n	800551c <_dtoa_r+0xa9c>
 800553c:	3301      	adds	r3, #1
 800553e:	7013      	strb	r3, [r2, #0]
 8005540:	e008      	b.n	8005554 <_dtoa_r+0xad4>
 8005542:	464c      	mov	r4, r9
 8005544:	f814 3c01 	ldrb.w	r3, [r4, #-1]
 8005548:	2b30      	cmp	r3, #48	; 0x30
 800554a:	f104 32ff 	add.w	r2, r4, #4294967295
 800554e:	d101      	bne.n	8005554 <_dtoa_r+0xad4>
 8005550:	4614      	mov	r4, r2
 8005552:	e7f7      	b.n	8005544 <_dtoa_r+0xac4>
 8005554:	4629      	mov	r1, r5
 8005556:	4650      	mov	r0, sl
 8005558:	f000 fdb0 	bl	80060bc <_Bfree>
 800555c:	f1b8 0f00 	cmp.w	r8, #0
 8005560:	d00d      	beq.n	800557e <_dtoa_r+0xafe>
 8005562:	b12e      	cbz	r6, 8005570 <_dtoa_r+0xaf0>
 8005564:	4546      	cmp	r6, r8
 8005566:	d003      	beq.n	8005570 <_dtoa_r+0xaf0>
 8005568:	4631      	mov	r1, r6
 800556a:	4650      	mov	r0, sl
 800556c:	f000 fda6 	bl	80060bc <_Bfree>
 8005570:	4641      	mov	r1, r8
 8005572:	4650      	mov	r0, sl
 8005574:	f000 fda2 	bl	80060bc <_Bfree>
 8005578:	e001      	b.n	800557e <_dtoa_r+0xafe>
 800557a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
 800557e:	9902      	ldr	r1, [sp, #8]
 8005580:	4650      	mov	r0, sl
 8005582:	f000 fd9b 	bl	80060bc <_Bfree>
 8005586:	2300      	movs	r3, #0
 8005588:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800558a:	7023      	strb	r3, [r4, #0]
 800558c:	f10b 0301 	add.w	r3, fp, #1
 8005590:	6013      	str	r3, [r2, #0]
 8005592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005594:	b11b      	cbz	r3, 800559e <_dtoa_r+0xb1e>
 8005596:	601c      	str	r4, [r3, #0]
 8005598:	e001      	b.n	800559e <_dtoa_r+0xb1e>
 800559a:	4808      	ldr	r0, [pc, #32]	; (80055bc <_dtoa_r+0xb3c>)
 800559c:	e00a      	b.n	80055b4 <_dtoa_r+0xb34>
 800559e:	9804      	ldr	r0, [sp, #16]
 80055a0:	e008      	b.n	80055b4 <_dtoa_r+0xb34>
 80055a2:	9b03      	ldr	r3, [sp, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f73f aee1 	bgt.w	800536c <_dtoa_r+0x8ec>
 80055aa:	9b06      	ldr	r3, [sp, #24]
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	f77f aedd 	ble.w	800536c <_dtoa_r+0x8ec>
 80055b2:	e6b1      	b.n	8005318 <_dtoa_r+0x898>
 80055b4:	b017      	add	sp, #92	; 0x5c
 80055b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ba:	bf00      	nop
 80055bc:	080072e0 	.word	0x080072e0

080055c0 <__sflush_r>:
 80055c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055c4:	b293      	uxth	r3, r2
 80055c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055ca:	4605      	mov	r5, r0
 80055cc:	0718      	lsls	r0, r3, #28
 80055ce:	460c      	mov	r4, r1
 80055d0:	d460      	bmi.n	8005694 <__sflush_r+0xd4>
 80055d2:	684b      	ldr	r3, [r1, #4]
 80055d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055d8:	2b00      	cmp	r3, #0
 80055da:	818a      	strh	r2, [r1, #12]
 80055dc:	dc02      	bgt.n	80055e4 <__sflush_r+0x24>
 80055de:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dd17      	ble.n	8005614 <__sflush_r+0x54>
 80055e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80055e6:	b1ae      	cbz	r6, 8005614 <__sflush_r+0x54>
 80055e8:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80055ec:	2300      	movs	r3, #0
 80055ee:	b292      	uxth	r2, r2
 80055f0:	682f      	ldr	r7, [r5, #0]
 80055f2:	602b      	str	r3, [r5, #0]
 80055f4:	b10a      	cbz	r2, 80055fa <__sflush_r+0x3a>
 80055f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80055f8:	e015      	b.n	8005626 <__sflush_r+0x66>
 80055fa:	6a21      	ldr	r1, [r4, #32]
 80055fc:	2301      	movs	r3, #1
 80055fe:	4628      	mov	r0, r5
 8005600:	47b0      	blx	r6
 8005602:	1c41      	adds	r1, r0, #1
 8005604:	d10f      	bne.n	8005626 <__sflush_r+0x66>
 8005606:	682b      	ldr	r3, [r5, #0]
 8005608:	b16b      	cbz	r3, 8005626 <__sflush_r+0x66>
 800560a:	2b1d      	cmp	r3, #29
 800560c:	d001      	beq.n	8005612 <__sflush_r+0x52>
 800560e:	2b16      	cmp	r3, #22
 8005610:	d103      	bne.n	800561a <__sflush_r+0x5a>
 8005612:	602f      	str	r7, [r5, #0]
 8005614:	2000      	movs	r0, #0
 8005616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800561a:	89a3      	ldrh	r3, [r4, #12]
 800561c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005620:	81a3      	strh	r3, [r4, #12]
 8005622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005626:	89a3      	ldrh	r3, [r4, #12]
 8005628:	075a      	lsls	r2, r3, #29
 800562a:	d505      	bpl.n	8005638 <__sflush_r+0x78>
 800562c:	6863      	ldr	r3, [r4, #4]
 800562e:	1ac0      	subs	r0, r0, r3
 8005630:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005632:	b10b      	cbz	r3, 8005638 <__sflush_r+0x78>
 8005634:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005636:	1ac0      	subs	r0, r0, r3
 8005638:	2300      	movs	r3, #0
 800563a:	4602      	mov	r2, r0
 800563c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800563e:	6a21      	ldr	r1, [r4, #32]
 8005640:	4628      	mov	r0, r5
 8005642:	47b0      	blx	r6
 8005644:	1c43      	adds	r3, r0, #1
 8005646:	89a3      	ldrh	r3, [r4, #12]
 8005648:	d106      	bne.n	8005658 <__sflush_r+0x98>
 800564a:	6829      	ldr	r1, [r5, #0]
 800564c:	291d      	cmp	r1, #29
 800564e:	d83e      	bhi.n	80056ce <__sflush_r+0x10e>
 8005650:	4a22      	ldr	r2, [pc, #136]	; (80056dc <__sflush_r+0x11c>)
 8005652:	40ca      	lsrs	r2, r1
 8005654:	07d6      	lsls	r6, r2, #31
 8005656:	d53a      	bpl.n	80056ce <__sflush_r+0x10e>
 8005658:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800565c:	b21b      	sxth	r3, r3
 800565e:	2200      	movs	r2, #0
 8005660:	6062      	str	r2, [r4, #4]
 8005662:	04d9      	lsls	r1, r3, #19
 8005664:	6922      	ldr	r2, [r4, #16]
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	6022      	str	r2, [r4, #0]
 800566a:	d504      	bpl.n	8005676 <__sflush_r+0xb6>
 800566c:	1c42      	adds	r2, r0, #1
 800566e:	d101      	bne.n	8005674 <__sflush_r+0xb4>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b903      	cbnz	r3, 8005676 <__sflush_r+0xb6>
 8005674:	6560      	str	r0, [r4, #84]	; 0x54
 8005676:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005678:	602f      	str	r7, [r5, #0]
 800567a:	2900      	cmp	r1, #0
 800567c:	d0ca      	beq.n	8005614 <__sflush_r+0x54>
 800567e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005682:	4299      	cmp	r1, r3
 8005684:	d002      	beq.n	800568c <__sflush_r+0xcc>
 8005686:	4628      	mov	r0, r5
 8005688:	f000 f95c 	bl	8005944 <_free_r>
 800568c:	2000      	movs	r0, #0
 800568e:	6360      	str	r0, [r4, #52]	; 0x34
 8005690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005694:	690f      	ldr	r7, [r1, #16]
 8005696:	2f00      	cmp	r7, #0
 8005698:	d0bc      	beq.n	8005614 <__sflush_r+0x54>
 800569a:	079b      	lsls	r3, r3, #30
 800569c:	680e      	ldr	r6, [r1, #0]
 800569e:	bf08      	it	eq
 80056a0:	694b      	ldreq	r3, [r1, #20]
 80056a2:	600f      	str	r7, [r1, #0]
 80056a4:	bf18      	it	ne
 80056a6:	2300      	movne	r3, #0
 80056a8:	ebc7 0806 	rsb	r8, r7, r6
 80056ac:	608b      	str	r3, [r1, #8]
 80056ae:	e002      	b.n	80056b6 <__sflush_r+0xf6>
 80056b0:	4407      	add	r7, r0
 80056b2:	ebc0 0808 	rsb	r8, r0, r8
 80056b6:	f1b8 0f00 	cmp.w	r8, #0
 80056ba:	ddab      	ble.n	8005614 <__sflush_r+0x54>
 80056bc:	4643      	mov	r3, r8
 80056be:	463a      	mov	r2, r7
 80056c0:	6a21      	ldr	r1, [r4, #32]
 80056c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80056c4:	4628      	mov	r0, r5
 80056c6:	47b0      	blx	r6
 80056c8:	2800      	cmp	r0, #0
 80056ca:	dcf1      	bgt.n	80056b0 <__sflush_r+0xf0>
 80056cc:	89a3      	ldrh	r3, [r4, #12]
 80056ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80056d2:	81a3      	strh	r3, [r4, #12]
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056dc:	20400001 	.word	0x20400001

080056e0 <_fflush_r>:
 80056e0:	b538      	push	{r3, r4, r5, lr}
 80056e2:	690b      	ldr	r3, [r1, #16]
 80056e4:	4605      	mov	r5, r0
 80056e6:	460c      	mov	r4, r1
 80056e8:	b1db      	cbz	r3, 8005722 <_fflush_r+0x42>
 80056ea:	b118      	cbz	r0, 80056f4 <_fflush_r+0x14>
 80056ec:	6983      	ldr	r3, [r0, #24]
 80056ee:	b90b      	cbnz	r3, 80056f4 <_fflush_r+0x14>
 80056f0:	f000 f860 	bl	80057b4 <__sinit>
 80056f4:	4b0c      	ldr	r3, [pc, #48]	; (8005728 <_fflush_r+0x48>)
 80056f6:	429c      	cmp	r4, r3
 80056f8:	d101      	bne.n	80056fe <_fflush_r+0x1e>
 80056fa:	686c      	ldr	r4, [r5, #4]
 80056fc:	e008      	b.n	8005710 <_fflush_r+0x30>
 80056fe:	4b0b      	ldr	r3, [pc, #44]	; (800572c <_fflush_r+0x4c>)
 8005700:	429c      	cmp	r4, r3
 8005702:	d101      	bne.n	8005708 <_fflush_r+0x28>
 8005704:	68ac      	ldr	r4, [r5, #8]
 8005706:	e003      	b.n	8005710 <_fflush_r+0x30>
 8005708:	4b09      	ldr	r3, [pc, #36]	; (8005730 <_fflush_r+0x50>)
 800570a:	429c      	cmp	r4, r3
 800570c:	bf08      	it	eq
 800570e:	68ec      	ldreq	r4, [r5, #12]
 8005710:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005714:	b12b      	cbz	r3, 8005722 <_fflush_r+0x42>
 8005716:	4621      	mov	r1, r4
 8005718:	4628      	mov	r0, r5
 800571a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800571e:	f7ff bf4f 	b.w	80055c0 <__sflush_r>
 8005722:	2000      	movs	r0, #0
 8005724:	bd38      	pop	{r3, r4, r5, pc}
 8005726:	bf00      	nop
 8005728:	08007300 	.word	0x08007300
 800572c:	08007320 	.word	0x08007320
 8005730:	08007340 	.word	0x08007340

08005734 <_cleanup_r>:
 8005734:	4901      	ldr	r1, [pc, #4]	; (800573c <_cleanup_r+0x8>)
 8005736:	f000 b9c3 	b.w	8005ac0 <_fwalk_reent>
 800573a:	bf00      	nop
 800573c:	080067ad 	.word	0x080067ad

08005740 <std.isra.0>:
 8005740:	2300      	movs	r3, #0
 8005742:	b510      	push	{r4, lr}
 8005744:	4604      	mov	r4, r0
 8005746:	6003      	str	r3, [r0, #0]
 8005748:	6043      	str	r3, [r0, #4]
 800574a:	6083      	str	r3, [r0, #8]
 800574c:	8181      	strh	r1, [r0, #12]
 800574e:	6643      	str	r3, [r0, #100]	; 0x64
 8005750:	81c2      	strh	r2, [r0, #14]
 8005752:	6103      	str	r3, [r0, #16]
 8005754:	6143      	str	r3, [r0, #20]
 8005756:	6183      	str	r3, [r0, #24]
 8005758:	4619      	mov	r1, r3
 800575a:	2208      	movs	r2, #8
 800575c:	305c      	adds	r0, #92	; 0x5c
 800575e:	f7fe f800 	bl	8003762 <memset>
 8005762:	4b05      	ldr	r3, [pc, #20]	; (8005778 <std.isra.0+0x38>)
 8005764:	6263      	str	r3, [r4, #36]	; 0x24
 8005766:	4b05      	ldr	r3, [pc, #20]	; (800577c <std.isra.0+0x3c>)
 8005768:	62a3      	str	r3, [r4, #40]	; 0x28
 800576a:	4b05      	ldr	r3, [pc, #20]	; (8005780 <std.isra.0+0x40>)
 800576c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800576e:	4b05      	ldr	r3, [pc, #20]	; (8005784 <std.isra.0+0x44>)
 8005770:	6224      	str	r4, [r4, #32]
 8005772:	6323      	str	r3, [r4, #48]	; 0x30
 8005774:	bd10      	pop	{r4, pc}
 8005776:	bf00      	nop
 8005778:	08006621 	.word	0x08006621
 800577c:	08006643 	.word	0x08006643
 8005780:	0800667b 	.word	0x0800667b
 8005784:	0800669f 	.word	0x0800669f

08005788 <__sfmoreglue>:
 8005788:	b570      	push	{r4, r5, r6, lr}
 800578a:	2368      	movs	r3, #104	; 0x68
 800578c:	1e4d      	subs	r5, r1, #1
 800578e:	435d      	muls	r5, r3
 8005790:	460e      	mov	r6, r1
 8005792:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005796:	f000 fa2f 	bl	8005bf8 <_malloc_r>
 800579a:	4604      	mov	r4, r0
 800579c:	b140      	cbz	r0, 80057b0 <__sfmoreglue+0x28>
 800579e:	2100      	movs	r1, #0
 80057a0:	e880 0042 	stmia.w	r0, {r1, r6}
 80057a4:	300c      	adds	r0, #12
 80057a6:	60a0      	str	r0, [r4, #8]
 80057a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80057ac:	f7fd ffd9 	bl	8003762 <memset>
 80057b0:	4620      	mov	r0, r4
 80057b2:	bd70      	pop	{r4, r5, r6, pc}

080057b4 <__sinit>:
 80057b4:	6983      	ldr	r3, [r0, #24]
 80057b6:	b510      	push	{r4, lr}
 80057b8:	4604      	mov	r4, r0
 80057ba:	bb4b      	cbnz	r3, 8005810 <__sinit+0x5c>
 80057bc:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
 80057c0:	f8c0 30dc 	str.w	r3, [r0, #220]	; 0xdc
 80057c4:	f8c0 30e0 	str.w	r3, [r0, #224]	; 0xe0
 80057c8:	4b12      	ldr	r3, [pc, #72]	; (8005814 <__sinit+0x60>)
 80057ca:	4a13      	ldr	r2, [pc, #76]	; (8005818 <__sinit+0x64>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6282      	str	r2, [r0, #40]	; 0x28
 80057d0:	4298      	cmp	r0, r3
 80057d2:	bf04      	itt	eq
 80057d4:	2301      	moveq	r3, #1
 80057d6:	6183      	streq	r3, [r0, #24]
 80057d8:	f000 f820 	bl	800581c <__sfp>
 80057dc:	6060      	str	r0, [r4, #4]
 80057de:	4620      	mov	r0, r4
 80057e0:	f000 f81c 	bl	800581c <__sfp>
 80057e4:	60a0      	str	r0, [r4, #8]
 80057e6:	4620      	mov	r0, r4
 80057e8:	f000 f818 	bl	800581c <__sfp>
 80057ec:	2200      	movs	r2, #0
 80057ee:	60e0      	str	r0, [r4, #12]
 80057f0:	2104      	movs	r1, #4
 80057f2:	6860      	ldr	r0, [r4, #4]
 80057f4:	f7ff ffa4 	bl	8005740 <std.isra.0>
 80057f8:	2201      	movs	r2, #1
 80057fa:	2109      	movs	r1, #9
 80057fc:	68a0      	ldr	r0, [r4, #8]
 80057fe:	f7ff ff9f 	bl	8005740 <std.isra.0>
 8005802:	2202      	movs	r2, #2
 8005804:	2112      	movs	r1, #18
 8005806:	68e0      	ldr	r0, [r4, #12]
 8005808:	f7ff ff9a 	bl	8005740 <std.isra.0>
 800580c:	2301      	movs	r3, #1
 800580e:	61a3      	str	r3, [r4, #24]
 8005810:	bd10      	pop	{r4, pc}
 8005812:	bf00      	nop
 8005814:	08007364 	.word	0x08007364
 8005818:	08005735 	.word	0x08005735

0800581c <__sfp>:
 800581c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800581e:	4b1c      	ldr	r3, [pc, #112]	; (8005890 <__sfp+0x74>)
 8005820:	681e      	ldr	r6, [r3, #0]
 8005822:	69b3      	ldr	r3, [r6, #24]
 8005824:	4607      	mov	r7, r0
 8005826:	b913      	cbnz	r3, 800582e <__sfp+0x12>
 8005828:	4630      	mov	r0, r6
 800582a:	f7ff ffc3 	bl	80057b4 <__sinit>
 800582e:	36d8      	adds	r6, #216	; 0xd8
 8005830:	68b4      	ldr	r4, [r6, #8]
 8005832:	6873      	ldr	r3, [r6, #4]
 8005834:	3b01      	subs	r3, #1
 8005836:	d404      	bmi.n	8005842 <__sfp+0x26>
 8005838:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800583c:	b17d      	cbz	r5, 800585e <__sfp+0x42>
 800583e:	3468      	adds	r4, #104	; 0x68
 8005840:	e7f8      	b.n	8005834 <__sfp+0x18>
 8005842:	6833      	ldr	r3, [r6, #0]
 8005844:	b10b      	cbz	r3, 800584a <__sfp+0x2e>
 8005846:	6836      	ldr	r6, [r6, #0]
 8005848:	e7f2      	b.n	8005830 <__sfp+0x14>
 800584a:	2104      	movs	r1, #4
 800584c:	4638      	mov	r0, r7
 800584e:	f7ff ff9b 	bl	8005788 <__sfmoreglue>
 8005852:	6030      	str	r0, [r6, #0]
 8005854:	2800      	cmp	r0, #0
 8005856:	d1f6      	bne.n	8005846 <__sfp+0x2a>
 8005858:	230c      	movs	r3, #12
 800585a:	603b      	str	r3, [r7, #0]
 800585c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800585e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005862:	81e3      	strh	r3, [r4, #14]
 8005864:	2301      	movs	r3, #1
 8005866:	81a3      	strh	r3, [r4, #12]
 8005868:	6665      	str	r5, [r4, #100]	; 0x64
 800586a:	6025      	str	r5, [r4, #0]
 800586c:	60a5      	str	r5, [r4, #8]
 800586e:	6065      	str	r5, [r4, #4]
 8005870:	6125      	str	r5, [r4, #16]
 8005872:	6165      	str	r5, [r4, #20]
 8005874:	61a5      	str	r5, [r4, #24]
 8005876:	2208      	movs	r2, #8
 8005878:	4629      	mov	r1, r5
 800587a:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800587e:	f7fd ff70 	bl	8003762 <memset>
 8005882:	6365      	str	r5, [r4, #52]	; 0x34
 8005884:	63a5      	str	r5, [r4, #56]	; 0x38
 8005886:	64a5      	str	r5, [r4, #72]	; 0x48
 8005888:	64e5      	str	r5, [r4, #76]	; 0x4c
 800588a:	4620      	mov	r0, r4
 800588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800588e:	bf00      	nop
 8005890:	08007364 	.word	0x08007364

08005894 <__sfp_lock_acquire>:
 8005894:	4770      	bx	lr

08005896 <__sfp_lock_release>:
 8005896:	4770      	bx	lr

08005898 <_malloc_trim_r>:
 8005898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800589c:	4f25      	ldr	r7, [pc, #148]	; (8005934 <_malloc_trim_r+0x9c>)
 800589e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8005940 <_malloc_trim_r+0xa8>
 80058a2:	4689      	mov	r9, r1
 80058a4:	4606      	mov	r6, r0
 80058a6:	f000 fbd2 	bl	800604e <__malloc_lock>
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	685d      	ldr	r5, [r3, #4]
 80058ae:	f1a8 0411 	sub.w	r4, r8, #17
 80058b2:	f025 0503 	bic.w	r5, r5, #3
 80058b6:	442c      	add	r4, r5
 80058b8:	ebc9 0404 	rsb	r4, r9, r4
 80058bc:	fbb4 f4f8 	udiv	r4, r4, r8
 80058c0:	3c01      	subs	r4, #1
 80058c2:	fb08 f404 	mul.w	r4, r8, r4
 80058c6:	4544      	cmp	r4, r8
 80058c8:	da05      	bge.n	80058d6 <_malloc_trim_r+0x3e>
 80058ca:	4630      	mov	r0, r6
 80058cc:	f000 fbc0 	bl	8006050 <__malloc_unlock>
 80058d0:	2000      	movs	r0, #0
 80058d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d6:	2100      	movs	r1, #0
 80058d8:	4630      	mov	r0, r6
 80058da:	f000 fe91 	bl	8006600 <_sbrk_r>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	442b      	add	r3, r5
 80058e2:	4298      	cmp	r0, r3
 80058e4:	d1f1      	bne.n	80058ca <_malloc_trim_r+0x32>
 80058e6:	4261      	negs	r1, r4
 80058e8:	4630      	mov	r0, r6
 80058ea:	f000 fe89 	bl	8006600 <_sbrk_r>
 80058ee:	3001      	adds	r0, #1
 80058f0:	d110      	bne.n	8005914 <_malloc_trim_r+0x7c>
 80058f2:	2100      	movs	r1, #0
 80058f4:	4630      	mov	r0, r6
 80058f6:	f000 fe83 	bl	8006600 <_sbrk_r>
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	1a83      	subs	r3, r0, r2
 80058fe:	2b0f      	cmp	r3, #15
 8005900:	dde3      	ble.n	80058ca <_malloc_trim_r+0x32>
 8005902:	490d      	ldr	r1, [pc, #52]	; (8005938 <_malloc_trim_r+0xa0>)
 8005904:	6809      	ldr	r1, [r1, #0]
 8005906:	1a40      	subs	r0, r0, r1
 8005908:	490c      	ldr	r1, [pc, #48]	; (800593c <_malloc_trim_r+0xa4>)
 800590a:	f043 0301 	orr.w	r3, r3, #1
 800590e:	6008      	str	r0, [r1, #0]
 8005910:	6053      	str	r3, [r2, #4]
 8005912:	e7da      	b.n	80058ca <_malloc_trim_r+0x32>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	4a09      	ldr	r2, [pc, #36]	; (800593c <_malloc_trim_r+0xa4>)
 8005918:	1b2d      	subs	r5, r5, r4
 800591a:	f045 0501 	orr.w	r5, r5, #1
 800591e:	605d      	str	r5, [r3, #4]
 8005920:	6813      	ldr	r3, [r2, #0]
 8005922:	4630      	mov	r0, r6
 8005924:	1b1c      	subs	r4, r3, r4
 8005926:	6014      	str	r4, [r2, #0]
 8005928:	f000 fb92 	bl	8006050 <__malloc_unlock>
 800592c:	2001      	movs	r0, #1
 800592e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005932:	bf00      	nop
 8005934:	2000015c 	.word	0x2000015c
 8005938:	20000568 	.word	0x20000568
 800593c:	200005a4 	.word	0x200005a4
 8005940:	00000080 	.word	0x00000080

08005944 <_free_r>:
 8005944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005948:	4604      	mov	r4, r0
 800594a:	4688      	mov	r8, r1
 800594c:	2900      	cmp	r1, #0
 800594e:	f000 80ad 	beq.w	8005aac <_free_r+0x168>
 8005952:	f000 fb7c 	bl	800604e <__malloc_lock>
 8005956:	f858 2c04 	ldr.w	r2, [r8, #-4]
 800595a:	4d55      	ldr	r5, [pc, #340]	; (8005ab0 <_free_r+0x16c>)
 800595c:	f022 0001 	bic.w	r0, r2, #1
 8005960:	f1a8 0308 	sub.w	r3, r8, #8
 8005964:	181f      	adds	r7, r3, r0
 8005966:	68a9      	ldr	r1, [r5, #8]
 8005968:	687e      	ldr	r6, [r7, #4]
 800596a:	428f      	cmp	r7, r1
 800596c:	f026 0603 	bic.w	r6, r6, #3
 8005970:	f002 0201 	and.w	r2, r2, #1
 8005974:	d11b      	bne.n	80059ae <_free_r+0x6a>
 8005976:	4430      	add	r0, r6
 8005978:	b93a      	cbnz	r2, 800598a <_free_r+0x46>
 800597a:	f858 2c08 	ldr.w	r2, [r8, #-8]
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	4410      	add	r0, r2
 8005982:	6899      	ldr	r1, [r3, #8]
 8005984:	68da      	ldr	r2, [r3, #12]
 8005986:	60ca      	str	r2, [r1, #12]
 8005988:	6091      	str	r1, [r2, #8]
 800598a:	f040 0201 	orr.w	r2, r0, #1
 800598e:	605a      	str	r2, [r3, #4]
 8005990:	60ab      	str	r3, [r5, #8]
 8005992:	4b48      	ldr	r3, [pc, #288]	; (8005ab4 <_free_r+0x170>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	4298      	cmp	r0, r3
 8005998:	d304      	bcc.n	80059a4 <_free_r+0x60>
 800599a:	4b47      	ldr	r3, [pc, #284]	; (8005ab8 <_free_r+0x174>)
 800599c:	4620      	mov	r0, r4
 800599e:	6819      	ldr	r1, [r3, #0]
 80059a0:	f7ff ff7a 	bl	8005898 <_malloc_trim_r>
 80059a4:	4620      	mov	r0, r4
 80059a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80059aa:	f000 bb51 	b.w	8006050 <__malloc_unlock>
 80059ae:	607e      	str	r6, [r7, #4]
 80059b0:	b97a      	cbnz	r2, 80059d2 <_free_r+0x8e>
 80059b2:	f858 1c08 	ldr.w	r1, [r8, #-8]
 80059b6:	1a5b      	subs	r3, r3, r1
 80059b8:	4408      	add	r0, r1
 80059ba:	6899      	ldr	r1, [r3, #8]
 80059bc:	f105 0e08 	add.w	lr, r5, #8
 80059c0:	4571      	cmp	r1, lr
 80059c2:	d008      	beq.n	80059d6 <_free_r+0x92>
 80059c4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80059c8:	f8c1 e00c 	str.w	lr, [r1, #12]
 80059cc:	f8ce 1008 	str.w	r1, [lr, #8]
 80059d0:	e002      	b.n	80059d8 <_free_r+0x94>
 80059d2:	2200      	movs	r2, #0
 80059d4:	e000      	b.n	80059d8 <_free_r+0x94>
 80059d6:	2201      	movs	r2, #1
 80059d8:	19b9      	adds	r1, r7, r6
 80059da:	6849      	ldr	r1, [r1, #4]
 80059dc:	07c9      	lsls	r1, r1, #31
 80059de:	d40e      	bmi.n	80059fe <_free_r+0xba>
 80059e0:	4430      	add	r0, r6
 80059e2:	68b9      	ldr	r1, [r7, #8]
 80059e4:	b942      	cbnz	r2, 80059f8 <_free_r+0xb4>
 80059e6:	4e35      	ldr	r6, [pc, #212]	; (8005abc <_free_r+0x178>)
 80059e8:	42b1      	cmp	r1, r6
 80059ea:	d105      	bne.n	80059f8 <_free_r+0xb4>
 80059ec:	616b      	str	r3, [r5, #20]
 80059ee:	612b      	str	r3, [r5, #16]
 80059f0:	2201      	movs	r2, #1
 80059f2:	60d9      	str	r1, [r3, #12]
 80059f4:	6099      	str	r1, [r3, #8]
 80059f6:	e002      	b.n	80059fe <_free_r+0xba>
 80059f8:	68fe      	ldr	r6, [r7, #12]
 80059fa:	60ce      	str	r6, [r1, #12]
 80059fc:	60b1      	str	r1, [r6, #8]
 80059fe:	f040 0101 	orr.w	r1, r0, #1
 8005a02:	6059      	str	r1, [r3, #4]
 8005a04:	5018      	str	r0, [r3, r0]
 8005a06:	2a00      	cmp	r2, #0
 8005a08:	d1cc      	bne.n	80059a4 <_free_r+0x60>
 8005a0a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005a0e:	d212      	bcs.n	8005a36 <_free_r+0xf2>
 8005a10:	08c0      	lsrs	r0, r0, #3
 8005a12:	1081      	asrs	r1, r0, #2
 8005a14:	2201      	movs	r2, #1
 8005a16:	fa02 f101 	lsl.w	r1, r2, r1
 8005a1a:	686a      	ldr	r2, [r5, #4]
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	430a      	orrs	r2, r1
 8005a20:	606a      	str	r2, [r5, #4]
 8005a22:	eb05 02c0 	add.w	r2, r5, r0, lsl #3
 8005a26:	f855 1030 	ldr.w	r1, [r5, r0, lsl #3]
 8005a2a:	6099      	str	r1, [r3, #8]
 8005a2c:	3a08      	subs	r2, #8
 8005a2e:	60da      	str	r2, [r3, #12]
 8005a30:	f845 3030 	str.w	r3, [r5, r0, lsl #3]
 8005a34:	e038      	b.n	8005aa8 <_free_r+0x164>
 8005a36:	0a42      	lsrs	r2, r0, #9
 8005a38:	2a04      	cmp	r2, #4
 8005a3a:	d802      	bhi.n	8005a42 <_free_r+0xfe>
 8005a3c:	0982      	lsrs	r2, r0, #6
 8005a3e:	3238      	adds	r2, #56	; 0x38
 8005a40:	e015      	b.n	8005a6e <_free_r+0x12a>
 8005a42:	2a14      	cmp	r2, #20
 8005a44:	d801      	bhi.n	8005a4a <_free_r+0x106>
 8005a46:	325b      	adds	r2, #91	; 0x5b
 8005a48:	e011      	b.n	8005a6e <_free_r+0x12a>
 8005a4a:	2a54      	cmp	r2, #84	; 0x54
 8005a4c:	d802      	bhi.n	8005a54 <_free_r+0x110>
 8005a4e:	0b02      	lsrs	r2, r0, #12
 8005a50:	326e      	adds	r2, #110	; 0x6e
 8005a52:	e00c      	b.n	8005a6e <_free_r+0x12a>
 8005a54:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005a58:	d802      	bhi.n	8005a60 <_free_r+0x11c>
 8005a5a:	0bc2      	lsrs	r2, r0, #15
 8005a5c:	3277      	adds	r2, #119	; 0x77
 8005a5e:	e006      	b.n	8005a6e <_free_r+0x12a>
 8005a60:	f240 5154 	movw	r1, #1364	; 0x554
 8005a64:	428a      	cmp	r2, r1
 8005a66:	bf9a      	itte	ls
 8005a68:	0c82      	lsrls	r2, r0, #18
 8005a6a:	327c      	addls	r2, #124	; 0x7c
 8005a6c:	227e      	movhi	r2, #126	; 0x7e
 8005a6e:	1c51      	adds	r1, r2, #1
 8005a70:	eb05 06c2 	add.w	r6, r5, r2, lsl #3
 8005a74:	f855 1031 	ldr.w	r1, [r5, r1, lsl #3]
 8005a78:	4f0d      	ldr	r7, [pc, #52]	; (8005ab0 <_free_r+0x16c>)
 8005a7a:	428e      	cmp	r6, r1
 8005a7c:	d10b      	bne.n	8005a96 <_free_r+0x152>
 8005a7e:	2101      	movs	r1, #1
 8005a80:	1092      	asrs	r2, r2, #2
 8005a82:	fa01 f202 	lsl.w	r2, r1, r2
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	4311      	orrs	r1, r2
 8005a8a:	6079      	str	r1, [r7, #4]
 8005a8c:	4631      	mov	r1, r6
 8005a8e:	e008      	b.n	8005aa2 <_free_r+0x15e>
 8005a90:	6889      	ldr	r1, [r1, #8]
 8005a92:	428e      	cmp	r6, r1
 8005a94:	d004      	beq.n	8005aa0 <_free_r+0x15c>
 8005a96:	684a      	ldr	r2, [r1, #4]
 8005a98:	f022 0203 	bic.w	r2, r2, #3
 8005a9c:	4290      	cmp	r0, r2
 8005a9e:	d3f7      	bcc.n	8005a90 <_free_r+0x14c>
 8005aa0:	68ce      	ldr	r6, [r1, #12]
 8005aa2:	60de      	str	r6, [r3, #12]
 8005aa4:	6099      	str	r1, [r3, #8]
 8005aa6:	60b3      	str	r3, [r6, #8]
 8005aa8:	60cb      	str	r3, [r1, #12]
 8005aaa:	e77b      	b.n	80059a4 <_free_r+0x60>
 8005aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ab0:	2000015c 	.word	0x2000015c
 8005ab4:	20000564 	.word	0x20000564
 8005ab8:	200005a0 	.word	0x200005a0
 8005abc:	20000164 	.word	0x20000164

08005ac0 <_fwalk_reent>:
 8005ac0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ac4:	4680      	mov	r8, r0
 8005ac6:	4689      	mov	r9, r1
 8005ac8:	f100 04d8 	add.w	r4, r0, #216	; 0xd8
 8005acc:	2600      	movs	r6, #0
 8005ace:	b194      	cbz	r4, 8005af6 <_fwalk_reent+0x36>
 8005ad0:	68a5      	ldr	r5, [r4, #8]
 8005ad2:	6867      	ldr	r7, [r4, #4]
 8005ad4:	3f01      	subs	r7, #1
 8005ad6:	d40c      	bmi.n	8005af2 <_fwalk_reent+0x32>
 8005ad8:	89ab      	ldrh	r3, [r5, #12]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d907      	bls.n	8005aee <_fwalk_reent+0x2e>
 8005ade:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	d003      	beq.n	8005aee <_fwalk_reent+0x2e>
 8005ae6:	4629      	mov	r1, r5
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47c8      	blx	r9
 8005aec:	4306      	orrs	r6, r0
 8005aee:	3568      	adds	r5, #104	; 0x68
 8005af0:	e7f0      	b.n	8005ad4 <_fwalk_reent+0x14>
 8005af2:	6824      	ldr	r4, [r4, #0]
 8005af4:	e7eb      	b.n	8005ace <_fwalk_reent+0xe>
 8005af6:	4630      	mov	r0, r6
 8005af8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005afc <__locale_charset>:
 8005afc:	4800      	ldr	r0, [pc, #0]	; (8005b00 <__locale_charset+0x4>)
 8005afe:	4770      	bx	lr
 8005b00:	20000138 	.word	0x20000138

08005b04 <__locale_mb_cur_max>:
 8005b04:	4b01      	ldr	r3, [pc, #4]	; (8005b0c <__locale_mb_cur_max+0x8>)
 8005b06:	6818      	ldr	r0, [r3, #0]
 8005b08:	4770      	bx	lr
 8005b0a:	bf00      	nop
 8005b0c:	20000158 	.word	0x20000158

08005b10 <_localeconv_r>:
 8005b10:	4800      	ldr	r0, [pc, #0]	; (8005b14 <_localeconv_r+0x4>)
 8005b12:	4770      	bx	lr
 8005b14:	20000100 	.word	0x20000100

08005b18 <__swhatbuf_r>:
 8005b18:	b570      	push	{r4, r5, r6, lr}
 8005b1a:	460e      	mov	r6, r1
 8005b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b20:	2900      	cmp	r1, #0
 8005b22:	b090      	sub	sp, #64	; 0x40
 8005b24:	4614      	mov	r4, r2
 8005b26:	461d      	mov	r5, r3
 8005b28:	da0a      	bge.n	8005b40 <__swhatbuf_r+0x28>
 8005b2a:	89b3      	ldrh	r3, [r6, #12]
 8005b2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b30:	2200      	movs	r2, #0
 8005b32:	b298      	uxth	r0, r3
 8005b34:	602a      	str	r2, [r5, #0]
 8005b36:	b1b0      	cbz	r0, 8005b66 <__swhatbuf_r+0x4e>
 8005b38:	2340      	movs	r3, #64	; 0x40
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	e015      	b.n	8005b6c <__swhatbuf_r+0x54>
 8005b40:	aa01      	add	r2, sp, #4
 8005b42:	f000 fed5 	bl	80068f0 <_fstat_r>
 8005b46:	2800      	cmp	r0, #0
 8005b48:	dbef      	blt.n	8005b2a <__swhatbuf_r+0x12>
 8005b4a:	9a02      	ldr	r2, [sp, #8]
 8005b4c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005b50:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005b54:	425a      	negs	r2, r3
 8005b56:	415a      	adcs	r2, r3
 8005b58:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005b62:	6023      	str	r3, [r4, #0]
 8005b64:	e002      	b.n	8005b6c <__swhatbuf_r+0x54>
 8005b66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b6a:	6023      	str	r3, [r4, #0]
 8005b6c:	b010      	add	sp, #64	; 0x40
 8005b6e:	bd70      	pop	{r4, r5, r6, pc}

08005b70 <__smakebuf_r>:
 8005b70:	898b      	ldrh	r3, [r1, #12]
 8005b72:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b74:	079e      	lsls	r6, r3, #30
 8005b76:	4605      	mov	r5, r0
 8005b78:	460c      	mov	r4, r1
 8005b7a:	d410      	bmi.n	8005b9e <__smakebuf_r+0x2e>
 8005b7c:	ab01      	add	r3, sp, #4
 8005b7e:	466a      	mov	r2, sp
 8005b80:	f7ff ffca 	bl	8005b18 <__swhatbuf_r>
 8005b84:	9900      	ldr	r1, [sp, #0]
 8005b86:	4606      	mov	r6, r0
 8005b88:	4628      	mov	r0, r5
 8005b8a:	f000 f835 	bl	8005bf8 <_malloc_r>
 8005b8e:	b968      	cbnz	r0, 8005bac <__smakebuf_r+0x3c>
 8005b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b94:	059a      	lsls	r2, r3, #22
 8005b96:	d422      	bmi.n	8005bde <__smakebuf_r+0x6e>
 8005b98:	f043 0302 	orr.w	r3, r3, #2
 8005b9c:	81a3      	strh	r3, [r4, #12]
 8005b9e:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005ba2:	6023      	str	r3, [r4, #0]
 8005ba4:	6123      	str	r3, [r4, #16]
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	6163      	str	r3, [r4, #20]
 8005baa:	e018      	b.n	8005bde <__smakebuf_r+0x6e>
 8005bac:	4b0d      	ldr	r3, [pc, #52]	; (8005be4 <__smakebuf_r+0x74>)
 8005bae:	62ab      	str	r3, [r5, #40]	; 0x28
 8005bb0:	89a3      	ldrh	r3, [r4, #12]
 8005bb2:	6020      	str	r0, [r4, #0]
 8005bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bb8:	81a3      	strh	r3, [r4, #12]
 8005bba:	9b00      	ldr	r3, [sp, #0]
 8005bbc:	6163      	str	r3, [r4, #20]
 8005bbe:	9b01      	ldr	r3, [sp, #4]
 8005bc0:	6120      	str	r0, [r4, #16]
 8005bc2:	b14b      	cbz	r3, 8005bd8 <__smakebuf_r+0x68>
 8005bc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005bc8:	4628      	mov	r0, r5
 8005bca:	f000 ffed 	bl	8006ba8 <_isatty_r>
 8005bce:	b118      	cbz	r0, 8005bd8 <__smakebuf_r+0x68>
 8005bd0:	89a3      	ldrh	r3, [r4, #12]
 8005bd2:	f043 0301 	orr.w	r3, r3, #1
 8005bd6:	81a3      	strh	r3, [r4, #12]
 8005bd8:	89a0      	ldrh	r0, [r4, #12]
 8005bda:	4330      	orrs	r0, r6
 8005bdc:	81a0      	strh	r0, [r4, #12]
 8005bde:	b002      	add	sp, #8
 8005be0:	bd70      	pop	{r4, r5, r6, pc}
 8005be2:	bf00      	nop
 8005be4:	08005735 	.word	0x08005735

08005be8 <malloc>:
 8005be8:	4b02      	ldr	r3, [pc, #8]	; (8005bf4 <malloc+0xc>)
 8005bea:	4601      	mov	r1, r0
 8005bec:	6818      	ldr	r0, [r3, #0]
 8005bee:	f000 b803 	b.w	8005bf8 <_malloc_r>
 8005bf2:	bf00      	nop
 8005bf4:	200000fc 	.word	0x200000fc

08005bf8 <_malloc_r>:
 8005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bfc:	f101 040b 	add.w	r4, r1, #11
 8005c00:	2c16      	cmp	r4, #22
 8005c02:	b085      	sub	sp, #20
 8005c04:	4681      	mov	r9, r0
 8005c06:	d903      	bls.n	8005c10 <_malloc_r+0x18>
 8005c08:	f034 0407 	bics.w	r4, r4, #7
 8005c0c:	d501      	bpl.n	8005c12 <_malloc_r+0x1a>
 8005c0e:	e002      	b.n	8005c16 <_malloc_r+0x1e>
 8005c10:	2410      	movs	r4, #16
 8005c12:	428c      	cmp	r4, r1
 8005c14:	d203      	bcs.n	8005c1e <_malloc_r+0x26>
 8005c16:	230c      	movs	r3, #12
 8005c18:	f8c9 3000 	str.w	r3, [r9]
 8005c1c:	e1ea      	b.n	8005ff4 <_malloc_r+0x3fc>
 8005c1e:	4648      	mov	r0, r9
 8005c20:	f000 fa15 	bl	800604e <__malloc_lock>
 8005c24:	f5b4 7ffc 	cmp.w	r4, #504	; 0x1f8
 8005c28:	4d9e      	ldr	r5, [pc, #632]	; (8005ea4 <_malloc_r+0x2ac>)
 8005c2a:	d217      	bcs.n	8005c5c <_malloc_r+0x64>
 8005c2c:	f104 0208 	add.w	r2, r4, #8
 8005c30:	442a      	add	r2, r5
 8005c32:	f1a2 0108 	sub.w	r1, r2, #8
 8005c36:	6856      	ldr	r6, [r2, #4]
 8005c38:	428e      	cmp	r6, r1
 8005c3a:	ea4f 03d4 	mov.w	r3, r4, lsr #3
 8005c3e:	d102      	bne.n	8005c46 <_malloc_r+0x4e>
 8005c40:	68d6      	ldr	r6, [r2, #12]
 8005c42:	42b2      	cmp	r2, r6
 8005c44:	d008      	beq.n	8005c58 <_malloc_r+0x60>
 8005c46:	6873      	ldr	r3, [r6, #4]
 8005c48:	68f2      	ldr	r2, [r6, #12]
 8005c4a:	68b1      	ldr	r1, [r6, #8]
 8005c4c:	f023 0303 	bic.w	r3, r3, #3
 8005c50:	60ca      	str	r2, [r1, #12]
 8005c52:	4433      	add	r3, r6
 8005c54:	6091      	str	r1, [r2, #8]
 8005c56:	e02f      	b.n	8005cb8 <_malloc_r+0xc0>
 8005c58:	3302      	adds	r3, #2
 8005c5a:	e03d      	b.n	8005cd8 <_malloc_r+0xe0>
 8005c5c:	0a63      	lsrs	r3, r4, #9
 8005c5e:	d01a      	beq.n	8005c96 <_malloc_r+0x9e>
 8005c60:	2b04      	cmp	r3, #4
 8005c62:	d802      	bhi.n	8005c6a <_malloc_r+0x72>
 8005c64:	09a3      	lsrs	r3, r4, #6
 8005c66:	3338      	adds	r3, #56	; 0x38
 8005c68:	e018      	b.n	8005c9c <_malloc_r+0xa4>
 8005c6a:	2b14      	cmp	r3, #20
 8005c6c:	d801      	bhi.n	8005c72 <_malloc_r+0x7a>
 8005c6e:	335b      	adds	r3, #91	; 0x5b
 8005c70:	e014      	b.n	8005c9c <_malloc_r+0xa4>
 8005c72:	2b54      	cmp	r3, #84	; 0x54
 8005c74:	d802      	bhi.n	8005c7c <_malloc_r+0x84>
 8005c76:	0b23      	lsrs	r3, r4, #12
 8005c78:	336e      	adds	r3, #110	; 0x6e
 8005c7a:	e00f      	b.n	8005c9c <_malloc_r+0xa4>
 8005c7c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8005c80:	d802      	bhi.n	8005c88 <_malloc_r+0x90>
 8005c82:	0be3      	lsrs	r3, r4, #15
 8005c84:	3377      	adds	r3, #119	; 0x77
 8005c86:	e009      	b.n	8005c9c <_malloc_r+0xa4>
 8005c88:	f240 5254 	movw	r2, #1364	; 0x554
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d804      	bhi.n	8005c9a <_malloc_r+0xa2>
 8005c90:	0ca3      	lsrs	r3, r4, #18
 8005c92:	337c      	adds	r3, #124	; 0x7c
 8005c94:	e002      	b.n	8005c9c <_malloc_r+0xa4>
 8005c96:	233f      	movs	r3, #63	; 0x3f
 8005c98:	e000      	b.n	8005c9c <_malloc_r+0xa4>
 8005c9a:	237e      	movs	r3, #126	; 0x7e
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
 8005ca2:	f1a2 0008 	sub.w	r0, r2, #8
 8005ca6:	6856      	ldr	r6, [r2, #4]
 8005ca8:	e00c      	b.n	8005cc4 <_malloc_r+0xcc>
 8005caa:	2900      	cmp	r1, #0
 8005cac:	68f1      	ldr	r1, [r6, #12]
 8005cae:	db08      	blt.n	8005cc2 <_malloc_r+0xca>
 8005cb0:	68b3      	ldr	r3, [r6, #8]
 8005cb2:	60d9      	str	r1, [r3, #12]
 8005cb4:	608b      	str	r3, [r1, #8]
 8005cb6:	18b3      	adds	r3, r6, r2
 8005cb8:	685a      	ldr	r2, [r3, #4]
 8005cba:	f042 0201 	orr.w	r2, r2, #1
 8005cbe:	605a      	str	r2, [r3, #4]
 8005cc0:	e1a3      	b.n	800600a <_malloc_r+0x412>
 8005cc2:	460e      	mov	r6, r1
 8005cc4:	4286      	cmp	r6, r0
 8005cc6:	d006      	beq.n	8005cd6 <_malloc_r+0xde>
 8005cc8:	6872      	ldr	r2, [r6, #4]
 8005cca:	f022 0203 	bic.w	r2, r2, #3
 8005cce:	1b11      	subs	r1, r2, r4
 8005cd0:	290f      	cmp	r1, #15
 8005cd2:	ddea      	ble.n	8005caa <_malloc_r+0xb2>
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	4a72      	ldr	r2, [pc, #456]	; (8005ea4 <_malloc_r+0x2ac>)
 8005cda:	692e      	ldr	r6, [r5, #16]
 8005cdc:	f102 0708 	add.w	r7, r2, #8
 8005ce0:	42be      	cmp	r6, r7
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	d079      	beq.n	8005dda <_malloc_r+0x1e2>
 8005ce6:	6870      	ldr	r0, [r6, #4]
 8005ce8:	f020 0003 	bic.w	r0, r0, #3
 8005cec:	ebc4 0e00 	rsb	lr, r4, r0
 8005cf0:	f1be 0f0f 	cmp.w	lr, #15
 8005cf4:	dd0d      	ble.n	8005d12 <_malloc_r+0x11a>
 8005cf6:	1933      	adds	r3, r6, r4
 8005cf8:	f044 0401 	orr.w	r4, r4, #1
 8005cfc:	6074      	str	r4, [r6, #4]
 8005cfe:	6153      	str	r3, [r2, #20]
 8005d00:	6113      	str	r3, [r2, #16]
 8005d02:	f04e 0201 	orr.w	r2, lr, #1
 8005d06:	60df      	str	r7, [r3, #12]
 8005d08:	609f      	str	r7, [r3, #8]
 8005d0a:	605a      	str	r2, [r3, #4]
 8005d0c:	f843 e00e 	str.w	lr, [r3, lr]
 8005d10:	e17b      	b.n	800600a <_malloc_r+0x412>
 8005d12:	f1be 0f00 	cmp.w	lr, #0
 8005d16:	6157      	str	r7, [r2, #20]
 8005d18:	6117      	str	r7, [r2, #16]
 8005d1a:	db05      	blt.n	8005d28 <_malloc_r+0x130>
 8005d1c:	4430      	add	r0, r6
 8005d1e:	6843      	ldr	r3, [r0, #4]
 8005d20:	f043 0301 	orr.w	r3, r3, #1
 8005d24:	6043      	str	r3, [r0, #4]
 8005d26:	e170      	b.n	800600a <_malloc_r+0x412>
 8005d28:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005d2c:	d215      	bcs.n	8005d5a <_malloc_r+0x162>
 8005d2e:	08c0      	lsrs	r0, r0, #3
 8005d30:	ea4f 0ea0 	mov.w	lr, r0, asr #2
 8005d34:	2701      	movs	r7, #1
 8005d36:	fa07 fe0e 	lsl.w	lr, r7, lr
 8005d3a:	6857      	ldr	r7, [r2, #4]
 8005d3c:	3001      	adds	r0, #1
 8005d3e:	ea4e 0707 	orr.w	r7, lr, r7
 8005d42:	6057      	str	r7, [r2, #4]
 8005d44:	eb02 07c0 	add.w	r7, r2, r0, lsl #3
 8005d48:	f852 e030 	ldr.w	lr, [r2, r0, lsl #3]
 8005d4c:	f8c6 e008 	str.w	lr, [r6, #8]
 8005d50:	3f08      	subs	r7, #8
 8005d52:	60f7      	str	r7, [r6, #12]
 8005d54:	f842 6030 	str.w	r6, [r2, r0, lsl #3]
 8005d58:	e03d      	b.n	8005dd6 <_malloc_r+0x1de>
 8005d5a:	0a42      	lsrs	r2, r0, #9
 8005d5c:	2a04      	cmp	r2, #4
 8005d5e:	d802      	bhi.n	8005d66 <_malloc_r+0x16e>
 8005d60:	0982      	lsrs	r2, r0, #6
 8005d62:	3238      	adds	r2, #56	; 0x38
 8005d64:	e015      	b.n	8005d92 <_malloc_r+0x19a>
 8005d66:	2a14      	cmp	r2, #20
 8005d68:	d801      	bhi.n	8005d6e <_malloc_r+0x176>
 8005d6a:	325b      	adds	r2, #91	; 0x5b
 8005d6c:	e011      	b.n	8005d92 <_malloc_r+0x19a>
 8005d6e:	2a54      	cmp	r2, #84	; 0x54
 8005d70:	d802      	bhi.n	8005d78 <_malloc_r+0x180>
 8005d72:	0b02      	lsrs	r2, r0, #12
 8005d74:	326e      	adds	r2, #110	; 0x6e
 8005d76:	e00c      	b.n	8005d92 <_malloc_r+0x19a>
 8005d78:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8005d7c:	d802      	bhi.n	8005d84 <_malloc_r+0x18c>
 8005d7e:	0bc2      	lsrs	r2, r0, #15
 8005d80:	3277      	adds	r2, #119	; 0x77
 8005d82:	e006      	b.n	8005d92 <_malloc_r+0x19a>
 8005d84:	f240 5754 	movw	r7, #1364	; 0x554
 8005d88:	42ba      	cmp	r2, r7
 8005d8a:	bf9a      	itte	ls
 8005d8c:	0c82      	lsrls	r2, r0, #18
 8005d8e:	327c      	addls	r2, #124	; 0x7c
 8005d90:	227e      	movhi	r2, #126	; 0x7e
 8005d92:	1c57      	adds	r7, r2, #1
 8005d94:	eb05 0ec2 	add.w	lr, r5, r2, lsl #3
 8005d98:	f855 7037 	ldr.w	r7, [r5, r7, lsl #3]
 8005d9c:	f8df c104 	ldr.w	ip, [pc, #260]	; 8005ea4 <_malloc_r+0x2ac>
 8005da0:	45be      	cmp	lr, r7
 8005da2:	d10d      	bne.n	8005dc0 <_malloc_r+0x1c8>
 8005da4:	2001      	movs	r0, #1
 8005da6:	1092      	asrs	r2, r2, #2
 8005da8:	fa00 f202 	lsl.w	r2, r0, r2
 8005dac:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8005db0:	4310      	orrs	r0, r2
 8005db2:	f8cc 0004 	str.w	r0, [ip, #4]
 8005db6:	4672      	mov	r2, lr
 8005db8:	e009      	b.n	8005dce <_malloc_r+0x1d6>
 8005dba:	68bf      	ldr	r7, [r7, #8]
 8005dbc:	45be      	cmp	lr, r7
 8005dbe:	d004      	beq.n	8005dca <_malloc_r+0x1d2>
 8005dc0:	687a      	ldr	r2, [r7, #4]
 8005dc2:	f022 0203 	bic.w	r2, r2, #3
 8005dc6:	4290      	cmp	r0, r2
 8005dc8:	d3f7      	bcc.n	8005dba <_malloc_r+0x1c2>
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	46be      	mov	lr, r7
 8005dce:	60f2      	str	r2, [r6, #12]
 8005dd0:	f8c6 e008 	str.w	lr, [r6, #8]
 8005dd4:	6096      	str	r6, [r2, #8]
 8005dd6:	f8ce 600c 	str.w	r6, [lr, #12]
 8005dda:	2001      	movs	r0, #1
 8005ddc:	109a      	asrs	r2, r3, #2
 8005dde:	fa00 f202 	lsl.w	r2, r0, r2
 8005de2:	6868      	ldr	r0, [r5, #4]
 8005de4:	4282      	cmp	r2, r0
 8005de6:	d85f      	bhi.n	8005ea8 <_malloc_r+0x2b0>
 8005de8:	4202      	tst	r2, r0
 8005dea:	d106      	bne.n	8005dfa <_malloc_r+0x202>
 8005dec:	f023 0303 	bic.w	r3, r3, #3
 8005df0:	0052      	lsls	r2, r2, #1
 8005df2:	4202      	tst	r2, r0
 8005df4:	f103 0304 	add.w	r3, r3, #4
 8005df8:	d0fa      	beq.n	8005df0 <_malloc_r+0x1f8>
 8005dfa:	eb05 08c3 	add.w	r8, r5, r3, lsl #3
 8005dfe:	46c2      	mov	sl, r8
 8005e00:	469c      	mov	ip, r3
 8005e02:	f8da 600c 	ldr.w	r6, [sl, #12]
 8005e06:	4556      	cmp	r6, sl
 8005e08:	d02c      	beq.n	8005e64 <_malloc_r+0x26c>
 8005e0a:	6870      	ldr	r0, [r6, #4]
 8005e0c:	68f7      	ldr	r7, [r6, #12]
 8005e0e:	f020 0003 	bic.w	r0, r0, #3
 8005e12:	ebc4 0e00 	rsb	lr, r4, r0
 8005e16:	f1be 0f0f 	cmp.w	lr, #15
 8005e1a:	dd11      	ble.n	8005e40 <_malloc_r+0x248>
 8005e1c:	1933      	adds	r3, r6, r4
 8005e1e:	f044 0401 	orr.w	r4, r4, #1
 8005e22:	6074      	str	r4, [r6, #4]
 8005e24:	f856 2f08 	ldr.w	r2, [r6, #8]!
 8005e28:	60d7      	str	r7, [r2, #12]
 8005e2a:	60ba      	str	r2, [r7, #8]
 8005e2c:	f04e 0201 	orr.w	r2, lr, #1
 8005e30:	616b      	str	r3, [r5, #20]
 8005e32:	612b      	str	r3, [r5, #16]
 8005e34:	60d9      	str	r1, [r3, #12]
 8005e36:	6099      	str	r1, [r3, #8]
 8005e38:	605a      	str	r2, [r3, #4]
 8005e3a:	f843 e00e 	str.w	lr, [r3, lr]
 8005e3e:	e00b      	b.n	8005e58 <_malloc_r+0x260>
 8005e40:	f1be 0f00 	cmp.w	lr, #0
 8005e44:	db0c      	blt.n	8005e60 <_malloc_r+0x268>
 8005e46:	1833      	adds	r3, r6, r0
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	f042 0201 	orr.w	r2, r2, #1
 8005e4e:	605a      	str	r2, [r3, #4]
 8005e50:	f856 3f08 	ldr.w	r3, [r6, #8]!
 8005e54:	60df      	str	r7, [r3, #12]
 8005e56:	60bb      	str	r3, [r7, #8]
 8005e58:	4648      	mov	r0, r9
 8005e5a:	f000 f8f9 	bl	8006050 <__malloc_unlock>
 8005e5e:	e0d8      	b.n	8006012 <_malloc_r+0x41a>
 8005e60:	463e      	mov	r6, r7
 8005e62:	e7d0      	b.n	8005e06 <_malloc_r+0x20e>
 8005e64:	f10c 0c01 	add.w	ip, ip, #1
 8005e68:	f01c 0f03 	tst.w	ip, #3
 8005e6c:	f10a 0a08 	add.w	sl, sl, #8
 8005e70:	d1c7      	bne.n	8005e02 <_malloc_r+0x20a>
 8005e72:	0798      	lsls	r0, r3, #30
 8005e74:	d104      	bne.n	8005e80 <_malloc_r+0x288>
 8005e76:	686b      	ldr	r3, [r5, #4]
 8005e78:	ea23 0302 	bic.w	r3, r3, r2
 8005e7c:	606b      	str	r3, [r5, #4]
 8005e7e:	e005      	b.n	8005e8c <_malloc_r+0x294>
 8005e80:	f858 0908 	ldr.w	r0, [r8], #-8
 8005e84:	4580      	cmp	r8, r0
 8005e86:	f103 33ff 	add.w	r3, r3, #4294967295
 8005e8a:	d0f2      	beq.n	8005e72 <_malloc_r+0x27a>
 8005e8c:	6868      	ldr	r0, [r5, #4]
 8005e8e:	0052      	lsls	r2, r2, #1
 8005e90:	4282      	cmp	r2, r0
 8005e92:	d809      	bhi.n	8005ea8 <_malloc_r+0x2b0>
 8005e94:	b142      	cbz	r2, 8005ea8 <_malloc_r+0x2b0>
 8005e96:	4663      	mov	r3, ip
 8005e98:	4202      	tst	r2, r0
 8005e9a:	d1ae      	bne.n	8005dfa <_malloc_r+0x202>
 8005e9c:	3304      	adds	r3, #4
 8005e9e:	0052      	lsls	r2, r2, #1
 8005ea0:	e7fa      	b.n	8005e98 <_malloc_r+0x2a0>
 8005ea2:	bf00      	nop
 8005ea4:	2000015c 	.word	0x2000015c
 8005ea8:	f8d5 b008 	ldr.w	fp, [r5, #8]
 8005eac:	f8db 6004 	ldr.w	r6, [fp, #4]
 8005eb0:	f026 0603 	bic.w	r6, r6, #3
 8005eb4:	42b4      	cmp	r4, r6
 8005eb6:	d803      	bhi.n	8005ec0 <_malloc_r+0x2c8>
 8005eb8:	1b33      	subs	r3, r6, r4
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	f300 809c 	bgt.w	8005ff8 <_malloc_r+0x400>
 8005ec0:	4a56      	ldr	r2, [pc, #344]	; (800601c <_malloc_r+0x424>)
 8005ec2:	4957      	ldr	r1, [pc, #348]	; (8006020 <_malloc_r+0x428>)
 8005ec4:	6812      	ldr	r2, [r2, #0]
 8005ec6:	6808      	ldr	r0, [r1, #0]
 8005ec8:	9101      	str	r1, [sp, #4]
 8005eca:	f102 0810 	add.w	r8, r2, #16
 8005ece:	4a55      	ldr	r2, [pc, #340]	; (8006024 <_malloc_r+0x42c>)
 8005ed0:	9203      	str	r2, [sp, #12]
 8005ed2:	3001      	adds	r0, #1
 8005ed4:	bf18      	it	ne
 8005ed6:	f102 31ff 	addne.w	r1, r2, #4294967295
 8005eda:	44a0      	add	r8, r4
 8005edc:	bf1e      	ittt	ne
 8005ede:	4488      	addne	r8, r1
 8005ee0:	4251      	negne	r1, r2
 8005ee2:	ea01 0808 	andne.w	r8, r1, r8
 8005ee6:	eb0b 0306 	add.w	r3, fp, r6
 8005eea:	4641      	mov	r1, r8
 8005eec:	4648      	mov	r0, r9
 8005eee:	9302      	str	r3, [sp, #8]
 8005ef0:	f000 fb86 	bl	8006600 <_sbrk_r>
 8005ef4:	1c42      	adds	r2, r0, #1
 8005ef6:	4607      	mov	r7, r0
 8005ef8:	d06f      	beq.n	8005fda <_malloc_r+0x3e2>
 8005efa:	9b02      	ldr	r3, [sp, #8]
 8005efc:	9a03      	ldr	r2, [sp, #12]
 8005efe:	4283      	cmp	r3, r0
 8005f00:	d901      	bls.n	8005f06 <_malloc_r+0x30e>
 8005f02:	45ab      	cmp	fp, r5
 8005f04:	d169      	bne.n	8005fda <_malloc_r+0x3e2>
 8005f06:	f8df a128 	ldr.w	sl, [pc, #296]	; 8006030 <_malloc_r+0x438>
 8005f0a:	f8df c128 	ldr.w	ip, [pc, #296]	; 8006034 <_malloc_r+0x43c>
 8005f0e:	f8da 0000 	ldr.w	r0, [sl]
 8005f12:	42bb      	cmp	r3, r7
 8005f14:	4440      	add	r0, r8
 8005f16:	f8ca 0000 	str.w	r0, [sl]
 8005f1a:	d108      	bne.n	8005f2e <_malloc_r+0x336>
 8005f1c:	ea13 0f0c 	tst.w	r3, ip
 8005f20:	d105      	bne.n	8005f2e <_malloc_r+0x336>
 8005f22:	68ab      	ldr	r3, [r5, #8]
 8005f24:	4446      	add	r6, r8
 8005f26:	f046 0601 	orr.w	r6, r6, #1
 8005f2a:	605e      	str	r6, [r3, #4]
 8005f2c:	e049      	b.n	8005fc2 <_malloc_r+0x3ca>
 8005f2e:	9901      	ldr	r1, [sp, #4]
 8005f30:	f8d1 e000 	ldr.w	lr, [r1]
 8005f34:	f1be 3fff 	cmp.w	lr, #4294967295
 8005f38:	bf15      	itete	ne
 8005f3a:	1afb      	subne	r3, r7, r3
 8005f3c:	4b38      	ldreq	r3, [pc, #224]	; (8006020 <_malloc_r+0x428>)
 8005f3e:	181b      	addne	r3, r3, r0
 8005f40:	601f      	streq	r7, [r3, #0]
 8005f42:	bf18      	it	ne
 8005f44:	f8ca 3000 	strne.w	r3, [sl]
 8005f48:	f017 0307 	ands.w	r3, r7, #7
 8005f4c:	bf1c      	itt	ne
 8005f4e:	f1c3 0308 	rsbne	r3, r3, #8
 8005f52:	18ff      	addne	r7, r7, r3
 8005f54:	44b8      	add	r8, r7
 8005f56:	441a      	add	r2, r3
 8005f58:	ea08 080c 	and.w	r8, r8, ip
 8005f5c:	ebc8 0802 	rsb	r8, r8, r2
 8005f60:	4641      	mov	r1, r8
 8005f62:	4648      	mov	r0, r9
 8005f64:	f000 fb4c 	bl	8006600 <_sbrk_r>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	bf04      	itt	eq
 8005f6c:	4638      	moveq	r0, r7
 8005f6e:	f04f 0800 	moveq.w	r8, #0
 8005f72:	f8da 3000 	ldr.w	r3, [sl]
 8005f76:	60af      	str	r7, [r5, #8]
 8005f78:	1bc2      	subs	r2, r0, r7
 8005f7a:	4442      	add	r2, r8
 8005f7c:	4443      	add	r3, r8
 8005f7e:	f042 0201 	orr.w	r2, r2, #1
 8005f82:	45ab      	cmp	fp, r5
 8005f84:	f8ca 3000 	str.w	r3, [sl]
 8005f88:	607a      	str	r2, [r7, #4]
 8005f8a:	d01a      	beq.n	8005fc2 <_malloc_r+0x3ca>
 8005f8c:	2e0f      	cmp	r6, #15
 8005f8e:	d802      	bhi.n	8005f96 <_malloc_r+0x39e>
 8005f90:	2301      	movs	r3, #1
 8005f92:	607b      	str	r3, [r7, #4]
 8005f94:	e021      	b.n	8005fda <_malloc_r+0x3e2>
 8005f96:	f8db 3004 	ldr.w	r3, [fp, #4]
 8005f9a:	3e0c      	subs	r6, #12
 8005f9c:	f026 0607 	bic.w	r6, r6, #7
 8005fa0:	f003 0301 	and.w	r3, r3, #1
 8005fa4:	4333      	orrs	r3, r6
 8005fa6:	f8cb 3004 	str.w	r3, [fp, #4]
 8005faa:	eb0b 0306 	add.w	r3, fp, r6
 8005fae:	2205      	movs	r2, #5
 8005fb0:	2e0f      	cmp	r6, #15
 8005fb2:	605a      	str	r2, [r3, #4]
 8005fb4:	609a      	str	r2, [r3, #8]
 8005fb6:	d904      	bls.n	8005fc2 <_malloc_r+0x3ca>
 8005fb8:	f10b 0108 	add.w	r1, fp, #8
 8005fbc:	4648      	mov	r0, r9
 8005fbe:	f7ff fcc1 	bl	8005944 <_free_r>
 8005fc2:	4a19      	ldr	r2, [pc, #100]	; (8006028 <_malloc_r+0x430>)
 8005fc4:	f8da 3000 	ldr.w	r3, [sl]
 8005fc8:	6811      	ldr	r1, [r2, #0]
 8005fca:	428b      	cmp	r3, r1
 8005fcc:	bf88      	it	hi
 8005fce:	6013      	strhi	r3, [r2, #0]
 8005fd0:	4a16      	ldr	r2, [pc, #88]	; (800602c <_malloc_r+0x434>)
 8005fd2:	6811      	ldr	r1, [r2, #0]
 8005fd4:	428b      	cmp	r3, r1
 8005fd6:	bf88      	it	hi
 8005fd8:	6013      	strhi	r3, [r2, #0]
 8005fda:	68ab      	ldr	r3, [r5, #8]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	f022 0203 	bic.w	r2, r2, #3
 8005fe2:	4294      	cmp	r4, r2
 8005fe4:	eba2 0304 	sub.w	r3, r2, r4
 8005fe8:	d801      	bhi.n	8005fee <_malloc_r+0x3f6>
 8005fea:	2b0f      	cmp	r3, #15
 8005fec:	dc04      	bgt.n	8005ff8 <_malloc_r+0x400>
 8005fee:	4648      	mov	r0, r9
 8005ff0:	f000 f82e 	bl	8006050 <__malloc_unlock>
 8005ff4:	2600      	movs	r6, #0
 8005ff6:	e00c      	b.n	8006012 <_malloc_r+0x41a>
 8005ff8:	68ae      	ldr	r6, [r5, #8]
 8005ffa:	f044 0201 	orr.w	r2, r4, #1
 8005ffe:	4434      	add	r4, r6
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	6072      	str	r2, [r6, #4]
 8006006:	60ac      	str	r4, [r5, #8]
 8006008:	6063      	str	r3, [r4, #4]
 800600a:	4648      	mov	r0, r9
 800600c:	f000 f820 	bl	8006050 <__malloc_unlock>
 8006010:	3608      	adds	r6, #8
 8006012:	4630      	mov	r0, r6
 8006014:	b005      	add	sp, #20
 8006016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800601a:	bf00      	nop
 800601c:	200005a0 	.word	0x200005a0
 8006020:	20000568 	.word	0x20000568
 8006024:	00000080 	.word	0x00000080
 8006028:	2000059c 	.word	0x2000059c
 800602c:	20000598 	.word	0x20000598
 8006030:	200005a4 	.word	0x200005a4
 8006034:	0000007f 	.word	0x0000007f

08006038 <memcpy>:
 8006038:	b510      	push	{r4, lr}
 800603a:	1e43      	subs	r3, r0, #1
 800603c:	440a      	add	r2, r1
 800603e:	4291      	cmp	r1, r2
 8006040:	d004      	beq.n	800604c <memcpy+0x14>
 8006042:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006046:	f803 4f01 	strb.w	r4, [r3, #1]!
 800604a:	e7f8      	b.n	800603e <memcpy+0x6>
 800604c:	bd10      	pop	{r4, pc}

0800604e <__malloc_lock>:
 800604e:	4770      	bx	lr

08006050 <__malloc_unlock>:
 8006050:	4770      	bx	lr

08006052 <_Balloc>:
 8006052:	b570      	push	{r4, r5, r6, lr}
 8006054:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006056:	4604      	mov	r4, r0
 8006058:	460e      	mov	r6, r1
 800605a:	b93d      	cbnz	r5, 800606c <_Balloc+0x1a>
 800605c:	2010      	movs	r0, #16
 800605e:	f7ff fdc3 	bl	8005be8 <malloc>
 8006062:	6260      	str	r0, [r4, #36]	; 0x24
 8006064:	6045      	str	r5, [r0, #4]
 8006066:	6085      	str	r5, [r0, #8]
 8006068:	6005      	str	r5, [r0, #0]
 800606a:	60c5      	str	r5, [r0, #12]
 800606c:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800606e:	68eb      	ldr	r3, [r5, #12]
 8006070:	b143      	cbz	r3, 8006084 <_Balloc+0x32>
 8006072:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800607a:	b178      	cbz	r0, 800609c <_Balloc+0x4a>
 800607c:	6802      	ldr	r2, [r0, #0]
 800607e:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8006082:	e017      	b.n	80060b4 <_Balloc+0x62>
 8006084:	2221      	movs	r2, #33	; 0x21
 8006086:	2104      	movs	r1, #4
 8006088:	4620      	mov	r0, r4
 800608a:	f000 fb51 	bl	8006730 <_calloc_r>
 800608e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006090:	60e8      	str	r0, [r5, #12]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d1ec      	bne.n	8006072 <_Balloc+0x20>
 8006098:	2000      	movs	r0, #0
 800609a:	bd70      	pop	{r4, r5, r6, pc}
 800609c:	2101      	movs	r1, #1
 800609e:	fa01 f506 	lsl.w	r5, r1, r6
 80060a2:	1d6a      	adds	r2, r5, #5
 80060a4:	0092      	lsls	r2, r2, #2
 80060a6:	4620      	mov	r0, r4
 80060a8:	f000 fb42 	bl	8006730 <_calloc_r>
 80060ac:	2800      	cmp	r0, #0
 80060ae:	d0f3      	beq.n	8006098 <_Balloc+0x46>
 80060b0:	6046      	str	r6, [r0, #4]
 80060b2:	6085      	str	r5, [r0, #8]
 80060b4:	2300      	movs	r3, #0
 80060b6:	6103      	str	r3, [r0, #16]
 80060b8:	60c3      	str	r3, [r0, #12]
 80060ba:	bd70      	pop	{r4, r5, r6, pc}

080060bc <_Bfree>:
 80060bc:	b570      	push	{r4, r5, r6, lr}
 80060be:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80060c0:	4606      	mov	r6, r0
 80060c2:	460d      	mov	r5, r1
 80060c4:	b93c      	cbnz	r4, 80060d6 <_Bfree+0x1a>
 80060c6:	2010      	movs	r0, #16
 80060c8:	f7ff fd8e 	bl	8005be8 <malloc>
 80060cc:	6270      	str	r0, [r6, #36]	; 0x24
 80060ce:	6044      	str	r4, [r0, #4]
 80060d0:	6084      	str	r4, [r0, #8]
 80060d2:	6004      	str	r4, [r0, #0]
 80060d4:	60c4      	str	r4, [r0, #12]
 80060d6:	b13d      	cbz	r5, 80060e8 <_Bfree+0x2c>
 80060d8:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80060da:	686a      	ldr	r2, [r5, #4]
 80060dc:	68db      	ldr	r3, [r3, #12]
 80060de:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060e2:	6029      	str	r1, [r5, #0]
 80060e4:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80060e8:	bd70      	pop	{r4, r5, r6, pc}

080060ea <__multadd>:
 80060ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ee:	690d      	ldr	r5, [r1, #16]
 80060f0:	461f      	mov	r7, r3
 80060f2:	4606      	mov	r6, r0
 80060f4:	460c      	mov	r4, r1
 80060f6:	f101 0e14 	add.w	lr, r1, #20
 80060fa:	2300      	movs	r3, #0
 80060fc:	f8de 0000 	ldr.w	r0, [lr]
 8006100:	b281      	uxth	r1, r0
 8006102:	fb02 7101 	mla	r1, r2, r1, r7
 8006106:	0c0f      	lsrs	r7, r1, #16
 8006108:	0c00      	lsrs	r0, r0, #16
 800610a:	fb02 7000 	mla	r0, r2, r0, r7
 800610e:	b289      	uxth	r1, r1
 8006110:	3301      	adds	r3, #1
 8006112:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8006116:	429d      	cmp	r5, r3
 8006118:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800611c:	f84e 1b04 	str.w	r1, [lr], #4
 8006120:	dcec      	bgt.n	80060fc <__multadd+0x12>
 8006122:	b1d7      	cbz	r7, 800615a <__multadd+0x70>
 8006124:	68a3      	ldr	r3, [r4, #8]
 8006126:	429d      	cmp	r5, r3
 8006128:	db12      	blt.n	8006150 <__multadd+0x66>
 800612a:	6861      	ldr	r1, [r4, #4]
 800612c:	4630      	mov	r0, r6
 800612e:	3101      	adds	r1, #1
 8006130:	f7ff ff8f 	bl	8006052 <_Balloc>
 8006134:	6922      	ldr	r2, [r4, #16]
 8006136:	3202      	adds	r2, #2
 8006138:	f104 010c 	add.w	r1, r4, #12
 800613c:	4680      	mov	r8, r0
 800613e:	0092      	lsls	r2, r2, #2
 8006140:	300c      	adds	r0, #12
 8006142:	f7ff ff79 	bl	8006038 <memcpy>
 8006146:	4621      	mov	r1, r4
 8006148:	4630      	mov	r0, r6
 800614a:	f7ff ffb7 	bl	80060bc <_Bfree>
 800614e:	4644      	mov	r4, r8
 8006150:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006154:	3501      	adds	r5, #1
 8006156:	615f      	str	r7, [r3, #20]
 8006158:	6125      	str	r5, [r4, #16]
 800615a:	4620      	mov	r0, r4
 800615c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006160 <__hi0bits>:
 8006160:	0c03      	lsrs	r3, r0, #16
 8006162:	041b      	lsls	r3, r3, #16
 8006164:	b913      	cbnz	r3, 800616c <__hi0bits+0xc>
 8006166:	0400      	lsls	r0, r0, #16
 8006168:	2310      	movs	r3, #16
 800616a:	e000      	b.n	800616e <__hi0bits+0xe>
 800616c:	2300      	movs	r3, #0
 800616e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006172:	bf04      	itt	eq
 8006174:	0200      	lsleq	r0, r0, #8
 8006176:	3308      	addeq	r3, #8
 8006178:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800617c:	bf04      	itt	eq
 800617e:	0100      	lsleq	r0, r0, #4
 8006180:	3304      	addeq	r3, #4
 8006182:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006186:	bf04      	itt	eq
 8006188:	0080      	lsleq	r0, r0, #2
 800618a:	3302      	addeq	r3, #2
 800618c:	2800      	cmp	r0, #0
 800618e:	db03      	blt.n	8006198 <__hi0bits+0x38>
 8006190:	0042      	lsls	r2, r0, #1
 8006192:	d503      	bpl.n	800619c <__hi0bits+0x3c>
 8006194:	1c58      	adds	r0, r3, #1
 8006196:	4770      	bx	lr
 8006198:	4618      	mov	r0, r3
 800619a:	4770      	bx	lr
 800619c:	2020      	movs	r0, #32
 800619e:	4770      	bx	lr

080061a0 <__lo0bits>:
 80061a0:	6803      	ldr	r3, [r0, #0]
 80061a2:	f013 0207 	ands.w	r2, r3, #7
 80061a6:	d00b      	beq.n	80061c0 <__lo0bits+0x20>
 80061a8:	07d9      	lsls	r1, r3, #31
 80061aa:	d422      	bmi.n	80061f2 <__lo0bits+0x52>
 80061ac:	079a      	lsls	r2, r3, #30
 80061ae:	bf4b      	itete	mi
 80061b0:	085b      	lsrmi	r3, r3, #1
 80061b2:	089b      	lsrpl	r3, r3, #2
 80061b4:	6003      	strmi	r3, [r0, #0]
 80061b6:	6003      	strpl	r3, [r0, #0]
 80061b8:	bf4c      	ite	mi
 80061ba:	2001      	movmi	r0, #1
 80061bc:	2002      	movpl	r0, #2
 80061be:	4770      	bx	lr
 80061c0:	b299      	uxth	r1, r3
 80061c2:	b909      	cbnz	r1, 80061c8 <__lo0bits+0x28>
 80061c4:	0c1b      	lsrs	r3, r3, #16
 80061c6:	2210      	movs	r2, #16
 80061c8:	f013 0fff 	tst.w	r3, #255	; 0xff
 80061cc:	bf04      	itt	eq
 80061ce:	0a1b      	lsreq	r3, r3, #8
 80061d0:	3208      	addeq	r2, #8
 80061d2:	0719      	lsls	r1, r3, #28
 80061d4:	bf04      	itt	eq
 80061d6:	091b      	lsreq	r3, r3, #4
 80061d8:	3204      	addeq	r2, #4
 80061da:	0799      	lsls	r1, r3, #30
 80061dc:	bf04      	itt	eq
 80061de:	089b      	lsreq	r3, r3, #2
 80061e0:	3202      	addeq	r2, #2
 80061e2:	07d9      	lsls	r1, r3, #31
 80061e4:	d402      	bmi.n	80061ec <__lo0bits+0x4c>
 80061e6:	085b      	lsrs	r3, r3, #1
 80061e8:	d005      	beq.n	80061f6 <__lo0bits+0x56>
 80061ea:	3201      	adds	r2, #1
 80061ec:	6003      	str	r3, [r0, #0]
 80061ee:	4610      	mov	r0, r2
 80061f0:	4770      	bx	lr
 80061f2:	2000      	movs	r0, #0
 80061f4:	4770      	bx	lr
 80061f6:	2020      	movs	r0, #32
 80061f8:	4770      	bx	lr

080061fa <__i2b>:
 80061fa:	b510      	push	{r4, lr}
 80061fc:	460c      	mov	r4, r1
 80061fe:	2101      	movs	r1, #1
 8006200:	f7ff ff27 	bl	8006052 <_Balloc>
 8006204:	2201      	movs	r2, #1
 8006206:	6144      	str	r4, [r0, #20]
 8006208:	6102      	str	r2, [r0, #16]
 800620a:	bd10      	pop	{r4, pc}

0800620c <__multiply>:
 800620c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006210:	4614      	mov	r4, r2
 8006212:	690a      	ldr	r2, [r1, #16]
 8006214:	6923      	ldr	r3, [r4, #16]
 8006216:	429a      	cmp	r2, r3
 8006218:	bfb8      	it	lt
 800621a:	460b      	movlt	r3, r1
 800621c:	4688      	mov	r8, r1
 800621e:	bfbc      	itt	lt
 8006220:	46a0      	movlt	r8, r4
 8006222:	461c      	movlt	r4, r3
 8006224:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006228:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800622c:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006230:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006234:	eb07 0609 	add.w	r6, r7, r9
 8006238:	429e      	cmp	r6, r3
 800623a:	bfc8      	it	gt
 800623c:	3101      	addgt	r1, #1
 800623e:	f7ff ff08 	bl	8006052 <_Balloc>
 8006242:	f100 0514 	add.w	r5, r0, #20
 8006246:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 800624a:	462b      	mov	r3, r5
 800624c:	2200      	movs	r2, #0
 800624e:	4563      	cmp	r3, ip
 8006250:	d202      	bcs.n	8006258 <__multiply+0x4c>
 8006252:	f843 2b04 	str.w	r2, [r3], #4
 8006256:	e7fa      	b.n	800624e <__multiply+0x42>
 8006258:	f104 0214 	add.w	r2, r4, #20
 800625c:	f108 0114 	add.w	r1, r8, #20
 8006260:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8006264:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8006268:	9300      	str	r3, [sp, #0]
 800626a:	9b00      	ldr	r3, [sp, #0]
 800626c:	9201      	str	r2, [sp, #4]
 800626e:	4293      	cmp	r3, r2
 8006270:	d957      	bls.n	8006322 <__multiply+0x116>
 8006272:	f8b2 b000 	ldrh.w	fp, [r2]
 8006276:	f1bb 0f00 	cmp.w	fp, #0
 800627a:	d023      	beq.n	80062c4 <__multiply+0xb8>
 800627c:	4689      	mov	r9, r1
 800627e:	46ae      	mov	lr, r5
 8006280:	f04f 0800 	mov.w	r8, #0
 8006284:	f859 4b04 	ldr.w	r4, [r9], #4
 8006288:	f8be a000 	ldrh.w	sl, [lr]
 800628c:	b2a3      	uxth	r3, r4
 800628e:	fb0b a303 	mla	r3, fp, r3, sl
 8006292:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8006296:	f8de 4000 	ldr.w	r4, [lr]
 800629a:	4443      	add	r3, r8
 800629c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80062a0:	fb0b 840a 	mla	r4, fp, sl, r8
 80062a4:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80062a8:	46f2      	mov	sl, lr
 80062aa:	b29b      	uxth	r3, r3
 80062ac:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80062b0:	454f      	cmp	r7, r9
 80062b2:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80062b6:	f84a 3b04 	str.w	r3, [sl], #4
 80062ba:	d901      	bls.n	80062c0 <__multiply+0xb4>
 80062bc:	46d6      	mov	lr, sl
 80062be:	e7e1      	b.n	8006284 <__multiply+0x78>
 80062c0:	f8ce 8004 	str.w	r8, [lr, #4]
 80062c4:	9b01      	ldr	r3, [sp, #4]
 80062c6:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80062ca:	3204      	adds	r2, #4
 80062cc:	f1ba 0f00 	cmp.w	sl, #0
 80062d0:	d021      	beq.n	8006316 <__multiply+0x10a>
 80062d2:	682b      	ldr	r3, [r5, #0]
 80062d4:	462c      	mov	r4, r5
 80062d6:	4689      	mov	r9, r1
 80062d8:	f04f 0800 	mov.w	r8, #0
 80062dc:	f8b9 e000 	ldrh.w	lr, [r9]
 80062e0:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 80062e4:	fb0a be0e 	mla	lr, sl, lr, fp
 80062e8:	44f0      	add	r8, lr
 80062ea:	46a3      	mov	fp, r4
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80062f2:	f84b 3b04 	str.w	r3, [fp], #4
 80062f6:	f859 3b04 	ldr.w	r3, [r9], #4
 80062fa:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 80062fe:	0c1b      	lsrs	r3, r3, #16
 8006300:	fb0a e303 	mla	r3, sl, r3, lr
 8006304:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8006308:	454f      	cmp	r7, r9
 800630a:	ea4f 4813 	mov.w	r8, r3, lsr #16
 800630e:	d901      	bls.n	8006314 <__multiply+0x108>
 8006310:	465c      	mov	r4, fp
 8006312:	e7e3      	b.n	80062dc <__multiply+0xd0>
 8006314:	6063      	str	r3, [r4, #4]
 8006316:	3504      	adds	r5, #4
 8006318:	e7a7      	b.n	800626a <__multiply+0x5e>
 800631a:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 800631e:	b913      	cbnz	r3, 8006326 <__multiply+0x11a>
 8006320:	3e01      	subs	r6, #1
 8006322:	2e00      	cmp	r6, #0
 8006324:	dcf9      	bgt.n	800631a <__multiply+0x10e>
 8006326:	6106      	str	r6, [r0, #16]
 8006328:	b003      	add	sp, #12
 800632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08006330 <__pow5mult>:
 8006330:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006334:	4615      	mov	r5, r2
 8006336:	f012 0203 	ands.w	r2, r2, #3
 800633a:	4606      	mov	r6, r0
 800633c:	460f      	mov	r7, r1
 800633e:	d007      	beq.n	8006350 <__pow5mult+0x20>
 8006340:	3a01      	subs	r2, #1
 8006342:	4c21      	ldr	r4, [pc, #132]	; (80063c8 <__pow5mult+0x98>)
 8006344:	2300      	movs	r3, #0
 8006346:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800634a:	f7ff fece 	bl	80060ea <__multadd>
 800634e:	4607      	mov	r7, r0
 8006350:	10ad      	asrs	r5, r5, #2
 8006352:	d036      	beq.n	80063c2 <__pow5mult+0x92>
 8006354:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006356:	b93c      	cbnz	r4, 8006368 <__pow5mult+0x38>
 8006358:	2010      	movs	r0, #16
 800635a:	f7ff fc45 	bl	8005be8 <malloc>
 800635e:	6270      	str	r0, [r6, #36]	; 0x24
 8006360:	6044      	str	r4, [r0, #4]
 8006362:	6084      	str	r4, [r0, #8]
 8006364:	6004      	str	r4, [r0, #0]
 8006366:	60c4      	str	r4, [r0, #12]
 8006368:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800636c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006370:	b94c      	cbnz	r4, 8006386 <__pow5mult+0x56>
 8006372:	f240 2171 	movw	r1, #625	; 0x271
 8006376:	4630      	mov	r0, r6
 8006378:	f7ff ff3f 	bl	80061fa <__i2b>
 800637c:	2300      	movs	r3, #0
 800637e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006382:	4604      	mov	r4, r0
 8006384:	6003      	str	r3, [r0, #0]
 8006386:	f04f 0800 	mov.w	r8, #0
 800638a:	07eb      	lsls	r3, r5, #31
 800638c:	d50a      	bpl.n	80063a4 <__pow5mult+0x74>
 800638e:	4639      	mov	r1, r7
 8006390:	4622      	mov	r2, r4
 8006392:	4630      	mov	r0, r6
 8006394:	f7ff ff3a 	bl	800620c <__multiply>
 8006398:	4639      	mov	r1, r7
 800639a:	4681      	mov	r9, r0
 800639c:	4630      	mov	r0, r6
 800639e:	f7ff fe8d 	bl	80060bc <_Bfree>
 80063a2:	464f      	mov	r7, r9
 80063a4:	106d      	asrs	r5, r5, #1
 80063a6:	d00c      	beq.n	80063c2 <__pow5mult+0x92>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	b108      	cbz	r0, 80063b0 <__pow5mult+0x80>
 80063ac:	4604      	mov	r4, r0
 80063ae:	e7ec      	b.n	800638a <__pow5mult+0x5a>
 80063b0:	4622      	mov	r2, r4
 80063b2:	4621      	mov	r1, r4
 80063b4:	4630      	mov	r0, r6
 80063b6:	f7ff ff29 	bl	800620c <__multiply>
 80063ba:	6020      	str	r0, [r4, #0]
 80063bc:	f8c0 8000 	str.w	r8, [r0]
 80063c0:	e7f4      	b.n	80063ac <__pow5mult+0x7c>
 80063c2:	4638      	mov	r0, r7
 80063c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063c8:	08007460 	.word	0x08007460

080063cc <__lshift>:
 80063cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	460c      	mov	r4, r1
 80063d2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80063d6:	6926      	ldr	r6, [r4, #16]
 80063d8:	6849      	ldr	r1, [r1, #4]
 80063da:	68a3      	ldr	r3, [r4, #8]
 80063dc:	4456      	add	r6, sl
 80063de:	4607      	mov	r7, r0
 80063e0:	4691      	mov	r9, r2
 80063e2:	1c75      	adds	r5, r6, #1
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	da02      	bge.n	80063ee <__lshift+0x22>
 80063e8:	3101      	adds	r1, #1
 80063ea:	005b      	lsls	r3, r3, #1
 80063ec:	e7fa      	b.n	80063e4 <__lshift+0x18>
 80063ee:	4638      	mov	r0, r7
 80063f0:	f7ff fe2f 	bl	8006052 <_Balloc>
 80063f4:	2300      	movs	r3, #0
 80063f6:	4680      	mov	r8, r0
 80063f8:	f100 0114 	add.w	r1, r0, #20
 80063fc:	461a      	mov	r2, r3
 80063fe:	4553      	cmp	r3, sl
 8006400:	da03      	bge.n	800640a <__lshift+0x3e>
 8006402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8006406:	3301      	adds	r3, #1
 8006408:	e7f9      	b.n	80063fe <__lshift+0x32>
 800640a:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 800640e:	6920      	ldr	r0, [r4, #16]
 8006410:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8006414:	f019 091f 	ands.w	r9, r9, #31
 8006418:	f104 0114 	add.w	r1, r4, #20
 800641c:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 8006420:	d014      	beq.n	800644c <__lshift+0x80>
 8006422:	f1c9 0c20 	rsb	ip, r9, #32
 8006426:	2200      	movs	r2, #0
 8006428:	6808      	ldr	r0, [r1, #0]
 800642a:	fa00 f009 	lsl.w	r0, r0, r9
 800642e:	4302      	orrs	r2, r0
 8006430:	469a      	mov	sl, r3
 8006432:	f843 2b04 	str.w	r2, [r3], #4
 8006436:	f851 2b04 	ldr.w	r2, [r1], #4
 800643a:	458e      	cmp	lr, r1
 800643c:	fa22 f20c 	lsr.w	r2, r2, ip
 8006440:	d8f2      	bhi.n	8006428 <__lshift+0x5c>
 8006442:	f8ca 2004 	str.w	r2, [sl, #4]
 8006446:	b142      	cbz	r2, 800645a <__lshift+0x8e>
 8006448:	1cb5      	adds	r5, r6, #2
 800644a:	e006      	b.n	800645a <__lshift+0x8e>
 800644c:	3b04      	subs	r3, #4
 800644e:	f851 2b04 	ldr.w	r2, [r1], #4
 8006452:	f843 2f04 	str.w	r2, [r3, #4]!
 8006456:	458e      	cmp	lr, r1
 8006458:	d8f9      	bhi.n	800644e <__lshift+0x82>
 800645a:	3d01      	subs	r5, #1
 800645c:	4638      	mov	r0, r7
 800645e:	f8c8 5010 	str.w	r5, [r8, #16]
 8006462:	4621      	mov	r1, r4
 8006464:	f7ff fe2a 	bl	80060bc <_Bfree>
 8006468:	4640      	mov	r0, r8
 800646a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800646e <__mcmp>:
 800646e:	6903      	ldr	r3, [r0, #16]
 8006470:	690a      	ldr	r2, [r1, #16]
 8006472:	1a9b      	subs	r3, r3, r2
 8006474:	b510      	push	{r4, lr}
 8006476:	d111      	bne.n	800649c <__mcmp+0x2e>
 8006478:	0092      	lsls	r2, r2, #2
 800647a:	3014      	adds	r0, #20
 800647c:	3114      	adds	r1, #20
 800647e:	1883      	adds	r3, r0, r2
 8006480:	440a      	add	r2, r1
 8006482:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8006486:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800648a:	428c      	cmp	r4, r1
 800648c:	d002      	beq.n	8006494 <__mcmp+0x26>
 800648e:	d307      	bcc.n	80064a0 <__mcmp+0x32>
 8006490:	2001      	movs	r0, #1
 8006492:	bd10      	pop	{r4, pc}
 8006494:	4298      	cmp	r0, r3
 8006496:	d3f4      	bcc.n	8006482 <__mcmp+0x14>
 8006498:	2000      	movs	r0, #0
 800649a:	bd10      	pop	{r4, pc}
 800649c:	4618      	mov	r0, r3
 800649e:	bd10      	pop	{r4, pc}
 80064a0:	f04f 30ff 	mov.w	r0, #4294967295
 80064a4:	bd10      	pop	{r4, pc}

080064a6 <__mdiff>:
 80064a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064aa:	460c      	mov	r4, r1
 80064ac:	4607      	mov	r7, r0
 80064ae:	4611      	mov	r1, r2
 80064b0:	4620      	mov	r0, r4
 80064b2:	4615      	mov	r5, r2
 80064b4:	f7ff ffdb 	bl	800646e <__mcmp>
 80064b8:	1e06      	subs	r6, r0, #0
 80064ba:	d108      	bne.n	80064ce <__mdiff+0x28>
 80064bc:	4631      	mov	r1, r6
 80064be:	4638      	mov	r0, r7
 80064c0:	f7ff fdc7 	bl	8006052 <_Balloc>
 80064c4:	2301      	movs	r3, #1
 80064c6:	6103      	str	r3, [r0, #16]
 80064c8:	6146      	str	r6, [r0, #20]
 80064ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064ce:	bfbc      	itt	lt
 80064d0:	4623      	movlt	r3, r4
 80064d2:	462c      	movlt	r4, r5
 80064d4:	4638      	mov	r0, r7
 80064d6:	6861      	ldr	r1, [r4, #4]
 80064d8:	bfba      	itte	lt
 80064da:	461d      	movlt	r5, r3
 80064dc:	2601      	movlt	r6, #1
 80064de:	2600      	movge	r6, #0
 80064e0:	f7ff fdb7 	bl	8006052 <_Balloc>
 80064e4:	692b      	ldr	r3, [r5, #16]
 80064e6:	60c6      	str	r6, [r0, #12]
 80064e8:	6926      	ldr	r6, [r4, #16]
 80064ea:	f105 0914 	add.w	r9, r5, #20
 80064ee:	3414      	adds	r4, #20
 80064f0:	eb04 0786 	add.w	r7, r4, r6, lsl #2
 80064f4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80064f8:	f100 0514 	add.w	r5, r0, #20
 80064fc:	f04f 0c00 	mov.w	ip, #0
 8006500:	f854 3b04 	ldr.w	r3, [r4], #4
 8006504:	f859 2b04 	ldr.w	r2, [r9], #4
 8006508:	fa1c f183 	uxtah	r1, ip, r3
 800650c:	fa1f fe82 	uxth.w	lr, r2
 8006510:	0c12      	lsrs	r2, r2, #16
 8006512:	ebce 0101 	rsb	r1, lr, r1
 8006516:	ebc2 4313 	rsb	r3, r2, r3, lsr #16
 800651a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800651e:	b289      	uxth	r1, r1
 8006520:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8006524:	45c8      	cmp	r8, r9
 8006526:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800652a:	46a6      	mov	lr, r4
 800652c:	f845 3b04 	str.w	r3, [r5], #4
 8006530:	d8e6      	bhi.n	8006500 <__mdiff+0x5a>
 8006532:	45be      	cmp	lr, r7
 8006534:	d20e      	bcs.n	8006554 <__mdiff+0xae>
 8006536:	f85e 1b04 	ldr.w	r1, [lr], #4
 800653a:	fa1c f281 	uxtah	r2, ip, r1
 800653e:	1413      	asrs	r3, r2, #16
 8006540:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8006544:	b292      	uxth	r2, r2
 8006546:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800654a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800654e:	f845 2b04 	str.w	r2, [r5], #4
 8006552:	e7ee      	b.n	8006532 <__mdiff+0x8c>
 8006554:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8006558:	b90b      	cbnz	r3, 800655e <__mdiff+0xb8>
 800655a:	3e01      	subs	r6, #1
 800655c:	e7fa      	b.n	8006554 <__mdiff+0xae>
 800655e:	6106      	str	r6, [r0, #16]
 8006560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006564 <__d2b>:
 8006564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006568:	460e      	mov	r6, r1
 800656a:	2101      	movs	r1, #1
 800656c:	ec59 8b10 	vmov	r8, r9, d0
 8006570:	4615      	mov	r5, r2
 8006572:	f7ff fd6e 	bl	8006052 <_Balloc>
 8006576:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800657a:	4607      	mov	r7, r0
 800657c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006580:	b10c      	cbz	r4, 8006586 <__d2b+0x22>
 8006582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006586:	9301      	str	r3, [sp, #4]
 8006588:	f1b8 0f00 	cmp.w	r8, #0
 800658c:	d019      	beq.n	80065c2 <__d2b+0x5e>
 800658e:	a802      	add	r0, sp, #8
 8006590:	f840 8d08 	str.w	r8, [r0, #-8]!
 8006594:	f7ff fe04 	bl	80061a0 <__lo0bits>
 8006598:	9b00      	ldr	r3, [sp, #0]
 800659a:	b148      	cbz	r0, 80065b0 <__d2b+0x4c>
 800659c:	9a01      	ldr	r2, [sp, #4]
 800659e:	f1c0 0120 	rsb	r1, r0, #32
 80065a2:	fa02 f101 	lsl.w	r1, r2, r1
 80065a6:	430b      	orrs	r3, r1
 80065a8:	40c2      	lsrs	r2, r0
 80065aa:	617b      	str	r3, [r7, #20]
 80065ac:	9201      	str	r2, [sp, #4]
 80065ae:	e000      	b.n	80065b2 <__d2b+0x4e>
 80065b0:	617b      	str	r3, [r7, #20]
 80065b2:	9b01      	ldr	r3, [sp, #4]
 80065b4:	61bb      	str	r3, [r7, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	bf14      	ite	ne
 80065ba:	2102      	movne	r1, #2
 80065bc:	2101      	moveq	r1, #1
 80065be:	6139      	str	r1, [r7, #16]
 80065c0:	e007      	b.n	80065d2 <__d2b+0x6e>
 80065c2:	a801      	add	r0, sp, #4
 80065c4:	f7ff fdec 	bl	80061a0 <__lo0bits>
 80065c8:	9b01      	ldr	r3, [sp, #4]
 80065ca:	617b      	str	r3, [r7, #20]
 80065cc:	2101      	movs	r1, #1
 80065ce:	6139      	str	r1, [r7, #16]
 80065d0:	3020      	adds	r0, #32
 80065d2:	b134      	cbz	r4, 80065e2 <__d2b+0x7e>
 80065d4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80065d8:	4404      	add	r4, r0
 80065da:	6034      	str	r4, [r6, #0]
 80065dc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80065e0:	e009      	b.n	80065f6 <__d2b+0x92>
 80065e2:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80065e6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80065ea:	6030      	str	r0, [r6, #0]
 80065ec:	6918      	ldr	r0, [r3, #16]
 80065ee:	f7ff fdb7 	bl	8006160 <__hi0bits>
 80065f2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80065f6:	6028      	str	r0, [r5, #0]
 80065f8:	4638      	mov	r0, r7
 80065fa:	b003      	add	sp, #12
 80065fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08006600 <_sbrk_r>:
 8006600:	b538      	push	{r3, r4, r5, lr}
 8006602:	4c06      	ldr	r4, [pc, #24]	; (800661c <_sbrk_r+0x1c>)
 8006604:	2300      	movs	r3, #0
 8006606:	4605      	mov	r5, r0
 8006608:	4608      	mov	r0, r1
 800660a:	6023      	str	r3, [r4, #0]
 800660c:	f000 fd7c 	bl	8007108 <_sbrk>
 8006610:	1c43      	adds	r3, r0, #1
 8006612:	d102      	bne.n	800661a <_sbrk_r+0x1a>
 8006614:	6823      	ldr	r3, [r4, #0]
 8006616:	b103      	cbz	r3, 800661a <_sbrk_r+0x1a>
 8006618:	602b      	str	r3, [r5, #0]
 800661a:	bd38      	pop	{r3, r4, r5, pc}
 800661c:	20000770 	.word	0x20000770

08006620 <__sread>:
 8006620:	b510      	push	{r4, lr}
 8006622:	460c      	mov	r4, r1
 8006624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006628:	f000 fafc 	bl	8006c24 <_read_r>
 800662c:	2800      	cmp	r0, #0
 800662e:	bfab      	itete	ge
 8006630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006632:	89a3      	ldrhlt	r3, [r4, #12]
 8006634:	181b      	addge	r3, r3, r0
 8006636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800663a:	bfac      	ite	ge
 800663c:	6563      	strge	r3, [r4, #84]	; 0x54
 800663e:	81a3      	strhlt	r3, [r4, #12]
 8006640:	bd10      	pop	{r4, pc}

08006642 <__swrite>:
 8006642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006646:	461f      	mov	r7, r3
 8006648:	898b      	ldrh	r3, [r1, #12]
 800664a:	05db      	lsls	r3, r3, #23
 800664c:	4605      	mov	r5, r0
 800664e:	460c      	mov	r4, r1
 8006650:	4616      	mov	r6, r2
 8006652:	d505      	bpl.n	8006660 <__swrite+0x1e>
 8006654:	2302      	movs	r3, #2
 8006656:	2200      	movs	r2, #0
 8006658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800665c:	f000 fab4 	bl	8006bc8 <_lseek_r>
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800666a:	81a3      	strh	r3, [r4, #12]
 800666c:	4632      	mov	r2, r6
 800666e:	463b      	mov	r3, r7
 8006670:	4628      	mov	r0, r5
 8006672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006676:	f000 b849 	b.w	800670c <_write_r>

0800667a <__sseek>:
 800667a:	b510      	push	{r4, lr}
 800667c:	460c      	mov	r4, r1
 800667e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006682:	f000 faa1 	bl	8006bc8 <_lseek_r>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	89a3      	ldrh	r3, [r4, #12]
 800668a:	bf15      	itete	ne
 800668c:	6560      	strne	r0, [r4, #84]	; 0x54
 800668e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006696:	81a3      	strheq	r3, [r4, #12]
 8006698:	bf18      	it	ne
 800669a:	81a3      	strhne	r3, [r4, #12]
 800669c:	bd10      	pop	{r4, pc}

0800669e <__sclose>:
 800669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066a2:	f000 b873 	b.w	800678c <_close_r>

080066a6 <__sprint_r>:
 80066a6:	6893      	ldr	r3, [r2, #8]
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	4680      	mov	r8, r0
 80066ae:	460f      	mov	r7, r1
 80066b0:	4614      	mov	r4, r2
 80066b2:	b91b      	cbnz	r3, 80066bc <__sprint_r+0x16>
 80066b4:	6053      	str	r3, [r2, #4]
 80066b6:	4618      	mov	r0, r3
 80066b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066bc:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80066be:	049d      	lsls	r5, r3, #18
 80066c0:	d51c      	bpl.n	80066fc <__sprint_r+0x56>
 80066c2:	6815      	ldr	r5, [r2, #0]
 80066c4:	68a0      	ldr	r0, [r4, #8]
 80066c6:	3508      	adds	r5, #8
 80066c8:	b1d0      	cbz	r0, 8006700 <__sprint_r+0x5a>
 80066ca:	f855 6c04 	ldr.w	r6, [r5, #-4]
 80066ce:	f855 ac08 	ldr.w	sl, [r5, #-8]
 80066d2:	08b6      	lsrs	r6, r6, #2
 80066d4:	f04f 0900 	mov.w	r9, #0
 80066d8:	454e      	cmp	r6, r9
 80066da:	dd0a      	ble.n	80066f2 <__sprint_r+0x4c>
 80066dc:	463a      	mov	r2, r7
 80066de:	f85a 1029 	ldr.w	r1, [sl, r9, lsl #2]
 80066e2:	4640      	mov	r0, r8
 80066e4:	f000 f8f3 	bl	80068ce <_fputwc_r>
 80066e8:	1c43      	adds	r3, r0, #1
 80066ea:	d009      	beq.n	8006700 <__sprint_r+0x5a>
 80066ec:	f109 0901 	add.w	r9, r9, #1
 80066f0:	e7f2      	b.n	80066d8 <__sprint_r+0x32>
 80066f2:	68a3      	ldr	r3, [r4, #8]
 80066f4:	eba3 0686 	sub.w	r6, r3, r6, lsl #2
 80066f8:	60a6      	str	r6, [r4, #8]
 80066fa:	e7e3      	b.n	80066c4 <__sprint_r+0x1e>
 80066fc:	f000 f90a 	bl	8006914 <__sfvwrite_r>
 8006700:	2300      	movs	r3, #0
 8006702:	60a3      	str	r3, [r4, #8]
 8006704:	6063      	str	r3, [r4, #4]
 8006706:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800670c <_write_r>:
 800670c:	b538      	push	{r3, r4, r5, lr}
 800670e:	4c07      	ldr	r4, [pc, #28]	; (800672c <_write_r+0x20>)
 8006710:	4605      	mov	r5, r0
 8006712:	4608      	mov	r0, r1
 8006714:	4611      	mov	r1, r2
 8006716:	2200      	movs	r2, #0
 8006718:	6022      	str	r2, [r4, #0]
 800671a:	461a      	mov	r2, r3
 800671c:	f000 fd02 	bl	8007124 <_write>
 8006720:	1c43      	adds	r3, r0, #1
 8006722:	d102      	bne.n	800672a <_write_r+0x1e>
 8006724:	6823      	ldr	r3, [r4, #0]
 8006726:	b103      	cbz	r3, 800672a <_write_r+0x1e>
 8006728:	602b      	str	r3, [r5, #0]
 800672a:	bd38      	pop	{r3, r4, r5, pc}
 800672c:	20000770 	.word	0x20000770

08006730 <_calloc_r>:
 8006730:	b510      	push	{r4, lr}
 8006732:	4351      	muls	r1, r2
 8006734:	f7ff fa60 	bl	8005bf8 <_malloc_r>
 8006738:	4604      	mov	r4, r0
 800673a:	b320      	cbz	r0, 8006786 <_calloc_r+0x56>
 800673c:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8006740:	f022 0203 	bic.w	r2, r2, #3
 8006744:	3a04      	subs	r2, #4
 8006746:	2a24      	cmp	r2, #36	; 0x24
 8006748:	d81a      	bhi.n	8006780 <_calloc_r+0x50>
 800674a:	2a13      	cmp	r2, #19
 800674c:	d912      	bls.n	8006774 <_calloc_r+0x44>
 800674e:	2100      	movs	r1, #0
 8006750:	2a1b      	cmp	r2, #27
 8006752:	6001      	str	r1, [r0, #0]
 8006754:	6041      	str	r1, [r0, #4]
 8006756:	d802      	bhi.n	800675e <_calloc_r+0x2e>
 8006758:	f100 0308 	add.w	r3, r0, #8
 800675c:	e00b      	b.n	8006776 <_calloc_r+0x46>
 800675e:	2a24      	cmp	r2, #36	; 0x24
 8006760:	6081      	str	r1, [r0, #8]
 8006762:	60c1      	str	r1, [r0, #12]
 8006764:	bf11      	iteee	ne
 8006766:	f100 0310 	addne.w	r3, r0, #16
 800676a:	6101      	streq	r1, [r0, #16]
 800676c:	f100 0318 	addeq.w	r3, r0, #24
 8006770:	6141      	streq	r1, [r0, #20]
 8006772:	e000      	b.n	8006776 <_calloc_r+0x46>
 8006774:	4603      	mov	r3, r0
 8006776:	2200      	movs	r2, #0
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	605a      	str	r2, [r3, #4]
 800677c:	609a      	str	r2, [r3, #8]
 800677e:	e002      	b.n	8006786 <_calloc_r+0x56>
 8006780:	2100      	movs	r1, #0
 8006782:	f7fc ffee 	bl	8003762 <memset>
 8006786:	4620      	mov	r0, r4
 8006788:	bd10      	pop	{r4, pc}
	...

0800678c <_close_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4c06      	ldr	r4, [pc, #24]	; (80067a8 <_close_r+0x1c>)
 8006790:	2300      	movs	r3, #0
 8006792:	4605      	mov	r5, r0
 8006794:	4608      	mov	r0, r1
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	f000 fc8e 	bl	80070b8 <_close>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_close_r+0x1a>
 80067a0:	6823      	ldr	r3, [r4, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_close_r+0x1a>
 80067a4:	602b      	str	r3, [r5, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	20000770 	.word	0x20000770

080067ac <_fclose_r>:
 80067ac:	b570      	push	{r4, r5, r6, lr}
 80067ae:	4605      	mov	r5, r0
 80067b0:	460c      	mov	r4, r1
 80067b2:	b909      	cbnz	r1, 80067b8 <_fclose_r+0xc>
 80067b4:	2000      	movs	r0, #0
 80067b6:	bd70      	pop	{r4, r5, r6, pc}
 80067b8:	b118      	cbz	r0, 80067c2 <_fclose_r+0x16>
 80067ba:	6983      	ldr	r3, [r0, #24]
 80067bc:	b90b      	cbnz	r3, 80067c2 <_fclose_r+0x16>
 80067be:	f7fe fff9 	bl	80057b4 <__sinit>
 80067c2:	4b20      	ldr	r3, [pc, #128]	; (8006844 <_fclose_r+0x98>)
 80067c4:	429c      	cmp	r4, r3
 80067c6:	d101      	bne.n	80067cc <_fclose_r+0x20>
 80067c8:	686c      	ldr	r4, [r5, #4]
 80067ca:	e008      	b.n	80067de <_fclose_r+0x32>
 80067cc:	4b1e      	ldr	r3, [pc, #120]	; (8006848 <_fclose_r+0x9c>)
 80067ce:	429c      	cmp	r4, r3
 80067d0:	d101      	bne.n	80067d6 <_fclose_r+0x2a>
 80067d2:	68ac      	ldr	r4, [r5, #8]
 80067d4:	e003      	b.n	80067de <_fclose_r+0x32>
 80067d6:	4b1d      	ldr	r3, [pc, #116]	; (800684c <_fclose_r+0xa0>)
 80067d8:	429c      	cmp	r4, r3
 80067da:	bf08      	it	eq
 80067dc:	68ec      	ldreq	r4, [r5, #12]
 80067de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d0e6      	beq.n	80067b4 <_fclose_r+0x8>
 80067e6:	4621      	mov	r1, r4
 80067e8:	4628      	mov	r0, r5
 80067ea:	f7fe fee9 	bl	80055c0 <__sflush_r>
 80067ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80067f0:	4606      	mov	r6, r0
 80067f2:	b133      	cbz	r3, 8006802 <_fclose_r+0x56>
 80067f4:	6a21      	ldr	r1, [r4, #32]
 80067f6:	4628      	mov	r0, r5
 80067f8:	4798      	blx	r3
 80067fa:	2800      	cmp	r0, #0
 80067fc:	bfb8      	it	lt
 80067fe:	f04f 36ff 	movlt.w	r6, #4294967295
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	061b      	lsls	r3, r3, #24
 8006806:	d503      	bpl.n	8006810 <_fclose_r+0x64>
 8006808:	6921      	ldr	r1, [r4, #16]
 800680a:	4628      	mov	r0, r5
 800680c:	f7ff f89a 	bl	8005944 <_free_r>
 8006810:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006812:	b141      	cbz	r1, 8006826 <_fclose_r+0x7a>
 8006814:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <_fclose_r+0x76>
 800681c:	4628      	mov	r0, r5
 800681e:	f7ff f891 	bl	8005944 <_free_r>
 8006822:	2300      	movs	r3, #0
 8006824:	6363      	str	r3, [r4, #52]	; 0x34
 8006826:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006828:	b121      	cbz	r1, 8006834 <_fclose_r+0x88>
 800682a:	4628      	mov	r0, r5
 800682c:	f7ff f88a 	bl	8005944 <_free_r>
 8006830:	2300      	movs	r3, #0
 8006832:	64a3      	str	r3, [r4, #72]	; 0x48
 8006834:	f7ff f82e 	bl	8005894 <__sfp_lock_acquire>
 8006838:	2300      	movs	r3, #0
 800683a:	81a3      	strh	r3, [r4, #12]
 800683c:	f7ff f82b 	bl	8005896 <__sfp_lock_release>
 8006840:	4630      	mov	r0, r6
 8006842:	bd70      	pop	{r4, r5, r6, pc}
 8006844:	08007300 	.word	0x08007300
 8006848:	08007320 	.word	0x08007320
 800684c:	08007340 	.word	0x08007340

08006850 <__fputwc>:
 8006850:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006854:	4680      	mov	r8, r0
 8006856:	460e      	mov	r6, r1
 8006858:	4614      	mov	r4, r2
 800685a:	f7ff f953 	bl	8005b04 <__locale_mb_cur_max>
 800685e:	2801      	cmp	r0, #1
 8006860:	d106      	bne.n	8006870 <__fputwc+0x20>
 8006862:	1e73      	subs	r3, r6, #1
 8006864:	2bfe      	cmp	r3, #254	; 0xfe
 8006866:	d803      	bhi.n	8006870 <__fputwc+0x20>
 8006868:	f88d 6004 	strb.w	r6, [sp, #4]
 800686c:	4605      	mov	r5, r0
 800686e:	e00e      	b.n	800688e <__fputwc+0x3e>
 8006870:	4632      	mov	r2, r6
 8006872:	f104 035c 	add.w	r3, r4, #92	; 0x5c
 8006876:	a901      	add	r1, sp, #4
 8006878:	4640      	mov	r0, r8
 800687a:	f000 fbeb 	bl	8007054 <_wcrtomb_r>
 800687e:	1c42      	adds	r2, r0, #1
 8006880:	4605      	mov	r5, r0
 8006882:	d104      	bne.n	800688e <__fputwc+0x3e>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	e01c      	b.n	80068c8 <__fputwc+0x78>
 800688e:	2700      	movs	r7, #0
 8006890:	42af      	cmp	r7, r5
 8006892:	d018      	beq.n	80068c6 <__fputwc+0x76>
 8006894:	ab01      	add	r3, sp, #4
 8006896:	5cf9      	ldrb	r1, [r7, r3]
 8006898:	68a3      	ldr	r3, [r4, #8]
 800689a:	3b01      	subs	r3, #1
 800689c:	2b00      	cmp	r3, #0
 800689e:	60a3      	str	r3, [r4, #8]
 80068a0:	da04      	bge.n	80068ac <__fputwc+0x5c>
 80068a2:	69a2      	ldr	r2, [r4, #24]
 80068a4:	4293      	cmp	r3, r2
 80068a6:	db06      	blt.n	80068b6 <__fputwc+0x66>
 80068a8:	290a      	cmp	r1, #10
 80068aa:	d004      	beq.n	80068b6 <__fputwc+0x66>
 80068ac:	6823      	ldr	r3, [r4, #0]
 80068ae:	1c5a      	adds	r2, r3, #1
 80068b0:	6022      	str	r2, [r4, #0]
 80068b2:	7019      	strb	r1, [r3, #0]
 80068b4:	e005      	b.n	80068c2 <__fputwc+0x72>
 80068b6:	4622      	mov	r2, r4
 80068b8:	4640      	mov	r0, r8
 80068ba:	f000 fb6d 	bl	8006f98 <__swbuf_r>
 80068be:	1c43      	adds	r3, r0, #1
 80068c0:	d002      	beq.n	80068c8 <__fputwc+0x78>
 80068c2:	3701      	adds	r7, #1
 80068c4:	e7e4      	b.n	8006890 <__fputwc+0x40>
 80068c6:	4630      	mov	r0, r6
 80068c8:	b002      	add	sp, #8
 80068ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080068ce <_fputwc_r>:
 80068ce:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
 80068d2:	b410      	push	{r4}
 80068d4:	049c      	lsls	r4, r3, #18
 80068d6:	d406      	bmi.n	80068e6 <_fputwc_r+0x18>
 80068d8:	6e54      	ldr	r4, [r2, #100]	; 0x64
 80068da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80068de:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 80068e2:	8193      	strh	r3, [r2, #12]
 80068e4:	6654      	str	r4, [r2, #100]	; 0x64
 80068e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ea:	f7ff bfb1 	b.w	8006850 <__fputwc>
	...

080068f0 <_fstat_r>:
 80068f0:	b538      	push	{r3, r4, r5, lr}
 80068f2:	4c07      	ldr	r4, [pc, #28]	; (8006910 <_fstat_r+0x20>)
 80068f4:	2300      	movs	r3, #0
 80068f6:	4605      	mov	r5, r0
 80068f8:	4608      	mov	r0, r1
 80068fa:	4611      	mov	r1, r2
 80068fc:	6023      	str	r3, [r4, #0]
 80068fe:	f000 fbe3 	bl	80070c8 <_fstat>
 8006902:	1c43      	adds	r3, r0, #1
 8006904:	d102      	bne.n	800690c <_fstat_r+0x1c>
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	b103      	cbz	r3, 800690c <_fstat_r+0x1c>
 800690a:	602b      	str	r3, [r5, #0]
 800690c:	bd38      	pop	{r3, r4, r5, pc}
 800690e:	bf00      	nop
 8006910:	20000770 	.word	0x20000770

08006914 <__sfvwrite_r>:
 8006914:	6893      	ldr	r3, [r2, #8]
 8006916:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800691a:	4606      	mov	r6, r0
 800691c:	460c      	mov	r4, r1
 800691e:	4690      	mov	r8, r2
 8006920:	b90b      	cbnz	r3, 8006926 <__sfvwrite_r+0x12>
 8006922:	2000      	movs	r0, #0
 8006924:	e13b      	b.n	8006b9e <__sfvwrite_r+0x28a>
 8006926:	898b      	ldrh	r3, [r1, #12]
 8006928:	0718      	lsls	r0, r3, #28
 800692a:	d50f      	bpl.n	800694c <__sfvwrite_r+0x38>
 800692c:	690b      	ldr	r3, [r1, #16]
 800692e:	b16b      	cbz	r3, 800694c <__sfvwrite_r+0x38>
 8006930:	f8b4 900c 	ldrh.w	r9, [r4, #12]
 8006934:	f8d8 b000 	ldr.w	fp, [r8]
 8006938:	f009 0502 	and.w	r5, r9, #2
 800693c:	b2ad      	uxth	r5, r5
 800693e:	b355      	cbz	r5, 8006996 <__sfvwrite_r+0x82>
 8006940:	f04f 0900 	mov.w	r9, #0
 8006944:	464f      	mov	r7, r9
 8006946:	f8df a25c 	ldr.w	sl, [pc, #604]	; 8006ba4 <__sfvwrite_r+0x290>
 800694a:	e01b      	b.n	8006984 <__sfvwrite_r+0x70>
 800694c:	4621      	mov	r1, r4
 800694e:	4630      	mov	r0, r6
 8006950:	f7fd ff96 	bl	8004880 <__swsetup_r>
 8006954:	2800      	cmp	r0, #0
 8006956:	d0eb      	beq.n	8006930 <__sfvwrite_r+0x1c>
 8006958:	e11f      	b.n	8006b9a <__sfvwrite_r+0x286>
 800695a:	4557      	cmp	r7, sl
 800695c:	463b      	mov	r3, r7
 800695e:	464a      	mov	r2, r9
 8006960:	bf28      	it	cs
 8006962:	4653      	movcs	r3, sl
 8006964:	6a21      	ldr	r1, [r4, #32]
 8006966:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006968:	4630      	mov	r0, r6
 800696a:	47a8      	blx	r5
 800696c:	2800      	cmp	r0, #0
 800696e:	f340 8110 	ble.w	8006b92 <__sfvwrite_r+0x27e>
 8006972:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006976:	4481      	add	r9, r0
 8006978:	1a3f      	subs	r7, r7, r0
 800697a:	1a18      	subs	r0, r3, r0
 800697c:	f8c8 0008 	str.w	r0, [r8, #8]
 8006980:	2800      	cmp	r0, #0
 8006982:	d0ce      	beq.n	8006922 <__sfvwrite_r+0xe>
 8006984:	2f00      	cmp	r7, #0
 8006986:	d1e8      	bne.n	800695a <__sfvwrite_r+0x46>
 8006988:	f8db 9000 	ldr.w	r9, [fp]
 800698c:	f8db 7004 	ldr.w	r7, [fp, #4]
 8006990:	f10b 0b08 	add.w	fp, fp, #8
 8006994:	e7f6      	b.n	8006984 <__sfvwrite_r+0x70>
 8006996:	f019 0901 	ands.w	r9, r9, #1
 800699a:	d003      	beq.n	80069a4 <__sfvwrite_r+0x90>
 800699c:	9500      	str	r5, [sp, #0]
 800699e:	46a9      	mov	r9, r5
 80069a0:	46aa      	mov	sl, r5
 80069a2:	e0bd      	b.n	8006b20 <__sfvwrite_r+0x20c>
 80069a4:	464f      	mov	r7, r9
 80069a6:	b937      	cbnz	r7, 80069b6 <__sfvwrite_r+0xa2>
 80069a8:	f8db 9000 	ldr.w	r9, [fp]
 80069ac:	f8db 7004 	ldr.w	r7, [fp, #4]
 80069b0:	f10b 0b08 	add.w	fp, fp, #8
 80069b4:	e7f7      	b.n	80069a6 <__sfvwrite_r+0x92>
 80069b6:	89a2      	ldrh	r2, [r4, #12]
 80069b8:	68a5      	ldr	r5, [r4, #8]
 80069ba:	0591      	lsls	r1, r2, #22
 80069bc:	d552      	bpl.n	8006a64 <__sfvwrite_r+0x150>
 80069be:	42af      	cmp	r7, r5
 80069c0:	d342      	bcc.n	8006a48 <__sfvwrite_r+0x134>
 80069c2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80069c6:	d03d      	beq.n	8006a44 <__sfvwrite_r+0x130>
 80069c8:	6921      	ldr	r1, [r4, #16]
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	1a5b      	subs	r3, r3, r1
 80069ce:	9300      	str	r3, [sp, #0]
 80069d0:	6963      	ldr	r3, [r4, #20]
 80069d2:	2002      	movs	r0, #2
 80069d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80069d8:	fb93 faf0 	sdiv	sl, r3, r0
 80069dc:	9b00      	ldr	r3, [sp, #0]
 80069de:	3301      	adds	r3, #1
 80069e0:	443b      	add	r3, r7
 80069e2:	459a      	cmp	sl, r3
 80069e4:	bf38      	it	cc
 80069e6:	469a      	movcc	sl, r3
 80069e8:	0553      	lsls	r3, r2, #21
 80069ea:	d510      	bpl.n	8006a0e <__sfvwrite_r+0xfa>
 80069ec:	4651      	mov	r1, sl
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff f902 	bl	8005bf8 <_malloc_r>
 80069f4:	4605      	mov	r5, r0
 80069f6:	b1c0      	cbz	r0, 8006a2a <__sfvwrite_r+0x116>
 80069f8:	9a00      	ldr	r2, [sp, #0]
 80069fa:	6921      	ldr	r1, [r4, #16]
 80069fc:	f7ff fb1c 	bl	8006038 <memcpy>
 8006a00:	89a3      	ldrh	r3, [r4, #12]
 8006a02:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a0a:	81a3      	strh	r3, [r4, #12]
 8006a0c:	e010      	b.n	8006a30 <__sfvwrite_r+0x11c>
 8006a0e:	4652      	mov	r2, sl
 8006a10:	4630      	mov	r0, r6
 8006a12:	f000 f919 	bl	8006c48 <_realloc_r>
 8006a16:	4605      	mov	r5, r0
 8006a18:	b950      	cbnz	r0, 8006a30 <__sfvwrite_r+0x11c>
 8006a1a:	6921      	ldr	r1, [r4, #16]
 8006a1c:	4630      	mov	r0, r6
 8006a1e:	f7fe ff91 	bl	8005944 <_free_r>
 8006a22:	89a3      	ldrh	r3, [r4, #12]
 8006a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a28:	81a3      	strh	r3, [r4, #12]
 8006a2a:	230c      	movs	r3, #12
 8006a2c:	6033      	str	r3, [r6, #0]
 8006a2e:	e0b0      	b.n	8006b92 <__sfvwrite_r+0x27e>
 8006a30:	9b00      	ldr	r3, [sp, #0]
 8006a32:	6125      	str	r5, [r4, #16]
 8006a34:	441d      	add	r5, r3
 8006a36:	ebc3 030a 	rsb	r3, r3, sl
 8006a3a:	6025      	str	r5, [r4, #0]
 8006a3c:	f8c4 a014 	str.w	sl, [r4, #20]
 8006a40:	463d      	mov	r5, r7
 8006a42:	60a3      	str	r3, [r4, #8]
 8006a44:	42af      	cmp	r7, r5
 8006a46:	d200      	bcs.n	8006a4a <__sfvwrite_r+0x136>
 8006a48:	463d      	mov	r5, r7
 8006a4a:	462a      	mov	r2, r5
 8006a4c:	4649      	mov	r1, r9
 8006a4e:	6820      	ldr	r0, [r4, #0]
 8006a50:	f000 f8cc 	bl	8006bec <memmove>
 8006a54:	68a3      	ldr	r3, [r4, #8]
 8006a56:	1b5b      	subs	r3, r3, r5
 8006a58:	60a3      	str	r3, [r4, #8]
 8006a5a:	6823      	ldr	r3, [r4, #0]
 8006a5c:	441d      	add	r5, r3
 8006a5e:	6025      	str	r5, [r4, #0]
 8006a60:	463d      	mov	r5, r7
 8006a62:	e029      	b.n	8006ab8 <__sfvwrite_r+0x1a4>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	6923      	ldr	r3, [r4, #16]
 8006a68:	4298      	cmp	r0, r3
 8006a6a:	d802      	bhi.n	8006a72 <__sfvwrite_r+0x15e>
 8006a6c:	6962      	ldr	r2, [r4, #20]
 8006a6e:	4297      	cmp	r7, r2
 8006a70:	d213      	bcs.n	8006a9a <__sfvwrite_r+0x186>
 8006a72:	42bd      	cmp	r5, r7
 8006a74:	bf28      	it	cs
 8006a76:	463d      	movcs	r5, r7
 8006a78:	462a      	mov	r2, r5
 8006a7a:	4649      	mov	r1, r9
 8006a7c:	f000 f8b6 	bl	8006bec <memmove>
 8006a80:	68a3      	ldr	r3, [r4, #8]
 8006a82:	6822      	ldr	r2, [r4, #0]
 8006a84:	1b5b      	subs	r3, r3, r5
 8006a86:	442a      	add	r2, r5
 8006a88:	60a3      	str	r3, [r4, #8]
 8006a8a:	6022      	str	r2, [r4, #0]
 8006a8c:	b9a3      	cbnz	r3, 8006ab8 <__sfvwrite_r+0x1a4>
 8006a8e:	4621      	mov	r1, r4
 8006a90:	4630      	mov	r0, r6
 8006a92:	f7fe fe25 	bl	80056e0 <_fflush_r>
 8006a96:	b178      	cbz	r0, 8006ab8 <__sfvwrite_r+0x1a4>
 8006a98:	e07b      	b.n	8006b92 <__sfvwrite_r+0x27e>
 8006a9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006a9e:	42bb      	cmp	r3, r7
 8006aa0:	bf28      	it	cs
 8006aa2:	463b      	movcs	r3, r7
 8006aa4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8006aa6:	fb93 f3f2 	sdiv	r3, r3, r2
 8006aaa:	6a21      	ldr	r1, [r4, #32]
 8006aac:	4353      	muls	r3, r2
 8006aae:	4630      	mov	r0, r6
 8006ab0:	464a      	mov	r2, r9
 8006ab2:	47a8      	blx	r5
 8006ab4:	1e05      	subs	r5, r0, #0
 8006ab6:	dd6c      	ble.n	8006b92 <__sfvwrite_r+0x27e>
 8006ab8:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006abc:	44a9      	add	r9, r5
 8006abe:	1b7f      	subs	r7, r7, r5
 8006ac0:	1b5d      	subs	r5, r3, r5
 8006ac2:	f8c8 5008 	str.w	r5, [r8, #8]
 8006ac6:	2d00      	cmp	r5, #0
 8006ac8:	f47f af6d 	bne.w	80069a6 <__sfvwrite_r+0x92>
 8006acc:	e729      	b.n	8006922 <__sfvwrite_r+0xe>
 8006ace:	9b00      	ldr	r3, [sp, #0]
 8006ad0:	b383      	cbz	r3, 8006b34 <__sfvwrite_r+0x220>
 8006ad2:	6820      	ldr	r0, [r4, #0]
 8006ad4:	6921      	ldr	r1, [r4, #16]
 8006ad6:	6962      	ldr	r2, [r4, #20]
 8006ad8:	4555      	cmp	r5, sl
 8006ada:	462b      	mov	r3, r5
 8006adc:	bf28      	it	cs
 8006ade:	4653      	movcs	r3, sl
 8006ae0:	4288      	cmp	r0, r1
 8006ae2:	d936      	bls.n	8006b52 <__sfvwrite_r+0x23e>
 8006ae4:	68a7      	ldr	r7, [r4, #8]
 8006ae6:	4417      	add	r7, r2
 8006ae8:	42bb      	cmp	r3, r7
 8006aea:	dd32      	ble.n	8006b52 <__sfvwrite_r+0x23e>
 8006aec:	4649      	mov	r1, r9
 8006aee:	463a      	mov	r2, r7
 8006af0:	f000 f87c 	bl	8006bec <memmove>
 8006af4:	6823      	ldr	r3, [r4, #0]
 8006af6:	443b      	add	r3, r7
 8006af8:	6023      	str	r3, [r4, #0]
 8006afa:	4621      	mov	r1, r4
 8006afc:	4630      	mov	r0, r6
 8006afe:	f7fe fdef 	bl	80056e0 <_fflush_r>
 8006b02:	2800      	cmp	r0, #0
 8006b04:	d145      	bne.n	8006b92 <__sfvwrite_r+0x27e>
 8006b06:	1bed      	subs	r5, r5, r7
 8006b08:	d03c      	beq.n	8006b84 <__sfvwrite_r+0x270>
 8006b0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006b0e:	44b9      	add	r9, r7
 8006b10:	ebc7 0a0a 	rsb	sl, r7, sl
 8006b14:	1bdf      	subs	r7, r3, r7
 8006b16:	f8c8 7008 	str.w	r7, [r8, #8]
 8006b1a:	2f00      	cmp	r7, #0
 8006b1c:	f43f af01 	beq.w	8006922 <__sfvwrite_r+0xe>
 8006b20:	f1ba 0f00 	cmp.w	sl, #0
 8006b24:	d1d3      	bne.n	8006ace <__sfvwrite_r+0x1ba>
 8006b26:	2300      	movs	r3, #0
 8006b28:	e89b 0600 	ldmia.w	fp, {r9, sl}
 8006b2c:	9300      	str	r3, [sp, #0]
 8006b2e:	f10b 0b08 	add.w	fp, fp, #8
 8006b32:	e7f5      	b.n	8006b20 <__sfvwrite_r+0x20c>
 8006b34:	4652      	mov	r2, sl
 8006b36:	210a      	movs	r1, #10
 8006b38:	4648      	mov	r0, r9
 8006b3a:	f7f9 fb49 	bl	80001d0 <memchr>
 8006b3e:	b118      	cbz	r0, 8006b48 <__sfvwrite_r+0x234>
 8006b40:	3001      	adds	r0, #1
 8006b42:	ebc9 0500 	rsb	r5, r9, r0
 8006b46:	e001      	b.n	8006b4c <__sfvwrite_r+0x238>
 8006b48:	f10a 0501 	add.w	r5, sl, #1
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	9300      	str	r3, [sp, #0]
 8006b50:	e7bf      	b.n	8006ad2 <__sfvwrite_r+0x1be>
 8006b52:	4293      	cmp	r3, r2
 8006b54:	db08      	blt.n	8006b68 <__sfvwrite_r+0x254>
 8006b56:	6aa7      	ldr	r7, [r4, #40]	; 0x28
 8006b58:	6a21      	ldr	r1, [r4, #32]
 8006b5a:	4613      	mov	r3, r2
 8006b5c:	4630      	mov	r0, r6
 8006b5e:	464a      	mov	r2, r9
 8006b60:	47b8      	blx	r7
 8006b62:	1e07      	subs	r7, r0, #0
 8006b64:	dccf      	bgt.n	8006b06 <__sfvwrite_r+0x1f2>
 8006b66:	e014      	b.n	8006b92 <__sfvwrite_r+0x27e>
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4649      	mov	r1, r9
 8006b6c:	9301      	str	r3, [sp, #4]
 8006b6e:	f000 f83d 	bl	8006bec <memmove>
 8006b72:	9b01      	ldr	r3, [sp, #4]
 8006b74:	68a2      	ldr	r2, [r4, #8]
 8006b76:	1ad2      	subs	r2, r2, r3
 8006b78:	60a2      	str	r2, [r4, #8]
 8006b7a:	6822      	ldr	r2, [r4, #0]
 8006b7c:	441a      	add	r2, r3
 8006b7e:	6022      	str	r2, [r4, #0]
 8006b80:	461f      	mov	r7, r3
 8006b82:	e7c0      	b.n	8006b06 <__sfvwrite_r+0x1f2>
 8006b84:	4621      	mov	r1, r4
 8006b86:	4630      	mov	r0, r6
 8006b88:	f7fe fdaa 	bl	80056e0 <_fflush_r>
 8006b8c:	b908      	cbnz	r0, 8006b92 <__sfvwrite_r+0x27e>
 8006b8e:	9500      	str	r5, [sp, #0]
 8006b90:	e7bb      	b.n	8006b0a <__sfvwrite_r+0x1f6>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b98:	81a3      	strh	r3, [r4, #12]
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	b003      	add	sp, #12
 8006ba0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba4:	7ffffc00 	.word	0x7ffffc00

08006ba8 <_isatty_r>:
 8006ba8:	b538      	push	{r3, r4, r5, lr}
 8006baa:	4c06      	ldr	r4, [pc, #24]	; (8006bc4 <_isatty_r+0x1c>)
 8006bac:	2300      	movs	r3, #0
 8006bae:	4605      	mov	r5, r0
 8006bb0:	4608      	mov	r0, r1
 8006bb2:	6023      	str	r3, [r4, #0]
 8006bb4:	f000 fa90 	bl	80070d8 <_isatty>
 8006bb8:	1c43      	adds	r3, r0, #1
 8006bba:	d102      	bne.n	8006bc2 <_isatty_r+0x1a>
 8006bbc:	6823      	ldr	r3, [r4, #0]
 8006bbe:	b103      	cbz	r3, 8006bc2 <_isatty_r+0x1a>
 8006bc0:	602b      	str	r3, [r5, #0]
 8006bc2:	bd38      	pop	{r3, r4, r5, pc}
 8006bc4:	20000770 	.word	0x20000770

08006bc8 <_lseek_r>:
 8006bc8:	b538      	push	{r3, r4, r5, lr}
 8006bca:	4c07      	ldr	r4, [pc, #28]	; (8006be8 <_lseek_r+0x20>)
 8006bcc:	4605      	mov	r5, r0
 8006bce:	4608      	mov	r0, r1
 8006bd0:	4611      	mov	r1, r2
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	461a      	mov	r2, r3
 8006bd8:	f000 fa86 	bl	80070e8 <_lseek>
 8006bdc:	1c43      	adds	r3, r0, #1
 8006bde:	d102      	bne.n	8006be6 <_lseek_r+0x1e>
 8006be0:	6823      	ldr	r3, [r4, #0]
 8006be2:	b103      	cbz	r3, 8006be6 <_lseek_r+0x1e>
 8006be4:	602b      	str	r3, [r5, #0]
 8006be6:	bd38      	pop	{r3, r4, r5, pc}
 8006be8:	20000770 	.word	0x20000770

08006bec <memmove>:
 8006bec:	4288      	cmp	r0, r1
 8006bee:	b510      	push	{r4, lr}
 8006bf0:	eb01 0302 	add.w	r3, r1, r2
 8006bf4:	d801      	bhi.n	8006bfa <memmove+0xe>
 8006bf6:	1e42      	subs	r2, r0, #1
 8006bf8:	e00b      	b.n	8006c12 <memmove+0x26>
 8006bfa:	4298      	cmp	r0, r3
 8006bfc:	d2fb      	bcs.n	8006bf6 <memmove+0xa>
 8006bfe:	1881      	adds	r1, r0, r2
 8006c00:	1ad2      	subs	r2, r2, r3
 8006c02:	42d3      	cmn	r3, r2
 8006c04:	d004      	beq.n	8006c10 <memmove+0x24>
 8006c06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006c0a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8006c0e:	e7f8      	b.n	8006c02 <memmove+0x16>
 8006c10:	bd10      	pop	{r4, pc}
 8006c12:	4299      	cmp	r1, r3
 8006c14:	d004      	beq.n	8006c20 <memmove+0x34>
 8006c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c1a:	f802 4f01 	strb.w	r4, [r2, #1]!
 8006c1e:	e7f8      	b.n	8006c12 <memmove+0x26>
 8006c20:	bd10      	pop	{r4, pc}
	...

08006c24 <_read_r>:
 8006c24:	b538      	push	{r3, r4, r5, lr}
 8006c26:	4c07      	ldr	r4, [pc, #28]	; (8006c44 <_read_r+0x20>)
 8006c28:	4605      	mov	r5, r0
 8006c2a:	4608      	mov	r0, r1
 8006c2c:	4611      	mov	r1, r2
 8006c2e:	2200      	movs	r2, #0
 8006c30:	6022      	str	r2, [r4, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	f000 fa60 	bl	80070f8 <_read>
 8006c38:	1c43      	adds	r3, r0, #1
 8006c3a:	d102      	bne.n	8006c42 <_read_r+0x1e>
 8006c3c:	6823      	ldr	r3, [r4, #0]
 8006c3e:	b103      	cbz	r3, 8006c42 <_read_r+0x1e>
 8006c40:	602b      	str	r3, [r5, #0]
 8006c42:	bd38      	pop	{r3, r4, r5, pc}
 8006c44:	20000770 	.word	0x20000770

08006c48 <_realloc_r>:
 8006c48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c4c:	4681      	mov	r9, r0
 8006c4e:	460c      	mov	r4, r1
 8006c50:	b929      	cbnz	r1, 8006c5e <_realloc_r+0x16>
 8006c52:	4611      	mov	r1, r2
 8006c54:	b003      	add	sp, #12
 8006c56:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c5a:	f7fe bfcd 	b.w	8005bf8 <_malloc_r>
 8006c5e:	9201      	str	r2, [sp, #4]
 8006c60:	f7ff f9f5 	bl	800604e <__malloc_lock>
 8006c64:	9a01      	ldr	r2, [sp, #4]
 8006c66:	f854 ec04 	ldr.w	lr, [r4, #-4]
 8006c6a:	f102 080b 	add.w	r8, r2, #11
 8006c6e:	f1b8 0f16 	cmp.w	r8, #22
 8006c72:	f1a4 0b08 	sub.w	fp, r4, #8
 8006c76:	f02e 0503 	bic.w	r5, lr, #3
 8006c7a:	d903      	bls.n	8006c84 <_realloc_r+0x3c>
 8006c7c:	f038 0807 	bics.w	r8, r8, #7
 8006c80:	d502      	bpl.n	8006c88 <_realloc_r+0x40>
 8006c82:	e003      	b.n	8006c8c <_realloc_r+0x44>
 8006c84:	f04f 0810 	mov.w	r8, #16
 8006c88:	4590      	cmp	r8, r2
 8006c8a:	d204      	bcs.n	8006c96 <_realloc_r+0x4e>
 8006c8c:	230c      	movs	r3, #12
 8006c8e:	f8c9 3000 	str.w	r3, [r9]
 8006c92:	2000      	movs	r0, #0
 8006c94:	e17d      	b.n	8006f92 <_realloc_r+0x34a>
 8006c96:	45a8      	cmp	r8, r5
 8006c98:	f340 8150 	ble.w	8006f3c <_realloc_r+0x2f4>
 8006c9c:	4ba6      	ldr	r3, [pc, #664]	; (8006f38 <_realloc_r+0x2f0>)
 8006c9e:	6898      	ldr	r0, [r3, #8]
 8006ca0:	eb0b 0105 	add.w	r1, fp, r5
 8006ca4:	4281      	cmp	r1, r0
 8006ca6:	684f      	ldr	r7, [r1, #4]
 8006ca8:	d005      	beq.n	8006cb6 <_realloc_r+0x6e>
 8006caa:	f027 0601 	bic.w	r6, r7, #1
 8006cae:	440e      	add	r6, r1
 8006cb0:	6876      	ldr	r6, [r6, #4]
 8006cb2:	07f6      	lsls	r6, r6, #31
 8006cb4:	d426      	bmi.n	8006d04 <_realloc_r+0xbc>
 8006cb6:	f027 0a03 	bic.w	sl, r7, #3
 8006cba:	4281      	cmp	r1, r0
 8006cbc:	eb05 070a 	add.w	r7, r5, sl
 8006cc0:	d118      	bne.n	8006cf4 <_realloc_r+0xac>
 8006cc2:	f108 0610 	add.w	r6, r8, #16
 8006cc6:	42b7      	cmp	r7, r6
 8006cc8:	db1f      	blt.n	8006d0a <_realloc_r+0xc2>
 8006cca:	eb0b 0008 	add.w	r0, fp, r8
 8006cce:	ebc8 0707 	rsb	r7, r8, r7
 8006cd2:	f047 0701 	orr.w	r7, r7, #1
 8006cd6:	6098      	str	r0, [r3, #8]
 8006cd8:	6047      	str	r7, [r0, #4]
 8006cda:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006cde:	f003 0301 	and.w	r3, r3, #1
 8006ce2:	ea43 0308 	orr.w	r3, r3, r8
 8006ce6:	4648      	mov	r0, r9
 8006ce8:	f844 3c04 	str.w	r3, [r4, #-4]
 8006cec:	f7ff f9b0 	bl	8006050 <__malloc_unlock>
 8006cf0:	4620      	mov	r0, r4
 8006cf2:	e14e      	b.n	8006f92 <_realloc_r+0x34a>
 8006cf4:	45b8      	cmp	r8, r7
 8006cf6:	dc08      	bgt.n	8006d0a <_realloc_r+0xc2>
 8006cf8:	68cb      	ldr	r3, [r1, #12]
 8006cfa:	688a      	ldr	r2, [r1, #8]
 8006cfc:	463d      	mov	r5, r7
 8006cfe:	60d3      	str	r3, [r2, #12]
 8006d00:	609a      	str	r2, [r3, #8]
 8006d02:	e11b      	b.n	8006f3c <_realloc_r+0x2f4>
 8006d04:	f04f 0a00 	mov.w	sl, #0
 8006d08:	4651      	mov	r1, sl
 8006d0a:	f01e 0f01 	tst.w	lr, #1
 8006d0e:	f040 80c3 	bne.w	8006e98 <_realloc_r+0x250>
 8006d12:	f854 7c08 	ldr.w	r7, [r4, #-8]
 8006d16:	ebc7 070b 	rsb	r7, r7, fp
 8006d1a:	687e      	ldr	r6, [r7, #4]
 8006d1c:	f026 0603 	bic.w	r6, r6, #3
 8006d20:	442e      	add	r6, r5
 8006d22:	2900      	cmp	r1, #0
 8006d24:	f000 8083 	beq.w	8006e2e <_realloc_r+0x1e6>
 8006d28:	4281      	cmp	r1, r0
 8006d2a:	44b2      	add	sl, r6
 8006d2c:	d147      	bne.n	8006dbe <_realloc_r+0x176>
 8006d2e:	f108 0110 	add.w	r1, r8, #16
 8006d32:	458a      	cmp	sl, r1
 8006d34:	db7b      	blt.n	8006e2e <_realloc_r+0x1e6>
 8006d36:	463e      	mov	r6, r7
 8006d38:	68fa      	ldr	r2, [r7, #12]
 8006d3a:	f856 1f08 	ldr.w	r1, [r6, #8]!
 8006d3e:	60ca      	str	r2, [r1, #12]
 8006d40:	6091      	str	r1, [r2, #8]
 8006d42:	1f2a      	subs	r2, r5, #4
 8006d44:	2a24      	cmp	r2, #36	; 0x24
 8006d46:	d825      	bhi.n	8006d94 <_realloc_r+0x14c>
 8006d48:	2a13      	cmp	r2, #19
 8006d4a:	d91b      	bls.n	8006d84 <_realloc_r+0x13c>
 8006d4c:	6821      	ldr	r1, [r4, #0]
 8006d4e:	60b9      	str	r1, [r7, #8]
 8006d50:	6861      	ldr	r1, [r4, #4]
 8006d52:	60f9      	str	r1, [r7, #12]
 8006d54:	2a1b      	cmp	r2, #27
 8006d56:	d803      	bhi.n	8006d60 <_realloc_r+0x118>
 8006d58:	f107 0210 	add.w	r2, r7, #16
 8006d5c:	3408      	adds	r4, #8
 8006d5e:	e012      	b.n	8006d86 <_realloc_r+0x13e>
 8006d60:	68a1      	ldr	r1, [r4, #8]
 8006d62:	6139      	str	r1, [r7, #16]
 8006d64:	68e1      	ldr	r1, [r4, #12]
 8006d66:	6179      	str	r1, [r7, #20]
 8006d68:	2a24      	cmp	r2, #36	; 0x24
 8006d6a:	bf01      	itttt	eq
 8006d6c:	6922      	ldreq	r2, [r4, #16]
 8006d6e:	61ba      	streq	r2, [r7, #24]
 8006d70:	6961      	ldreq	r1, [r4, #20]
 8006d72:	61f9      	streq	r1, [r7, #28]
 8006d74:	bf19      	ittee	ne
 8006d76:	f107 0218 	addne.w	r2, r7, #24
 8006d7a:	3410      	addne	r4, #16
 8006d7c:	f107 0220 	addeq.w	r2, r7, #32
 8006d80:	3418      	addeq	r4, #24
 8006d82:	e000      	b.n	8006d86 <_realloc_r+0x13e>
 8006d84:	4632      	mov	r2, r6
 8006d86:	6821      	ldr	r1, [r4, #0]
 8006d88:	6011      	str	r1, [r2, #0]
 8006d8a:	6861      	ldr	r1, [r4, #4]
 8006d8c:	6051      	str	r1, [r2, #4]
 8006d8e:	68a1      	ldr	r1, [r4, #8]
 8006d90:	6091      	str	r1, [r2, #8]
 8006d92:	e005      	b.n	8006da0 <_realloc_r+0x158>
 8006d94:	4621      	mov	r1, r4
 8006d96:	4630      	mov	r0, r6
 8006d98:	9301      	str	r3, [sp, #4]
 8006d9a:	f7ff ff27 	bl	8006bec <memmove>
 8006d9e:	9b01      	ldr	r3, [sp, #4]
 8006da0:	eb07 0208 	add.w	r2, r7, r8
 8006da4:	ebc8 0a0a 	rsb	sl, r8, sl
 8006da8:	609a      	str	r2, [r3, #8]
 8006daa:	f04a 0301 	orr.w	r3, sl, #1
 8006dae:	6053      	str	r3, [r2, #4]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f003 0301 	and.w	r3, r3, #1
 8006db6:	ea43 0308 	orr.w	r3, r3, r8
 8006dba:	607b      	str	r3, [r7, #4]
 8006dbc:	e0b6      	b.n	8006f2c <_realloc_r+0x2e4>
 8006dbe:	45d0      	cmp	r8, sl
 8006dc0:	dc35      	bgt.n	8006e2e <_realloc_r+0x1e6>
 8006dc2:	68cb      	ldr	r3, [r1, #12]
 8006dc4:	688a      	ldr	r2, [r1, #8]
 8006dc6:	4638      	mov	r0, r7
 8006dc8:	60d3      	str	r3, [r2, #12]
 8006dca:	609a      	str	r2, [r3, #8]
 8006dcc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	60d3      	str	r3, [r2, #12]
 8006dd4:	609a      	str	r2, [r3, #8]
 8006dd6:	1f2a      	subs	r2, r5, #4
 8006dd8:	2a24      	cmp	r2, #36	; 0x24
 8006dda:	d823      	bhi.n	8006e24 <_realloc_r+0x1dc>
 8006ddc:	2a13      	cmp	r2, #19
 8006dde:	d91a      	bls.n	8006e16 <_realloc_r+0x1ce>
 8006de0:	6823      	ldr	r3, [r4, #0]
 8006de2:	60bb      	str	r3, [r7, #8]
 8006de4:	6863      	ldr	r3, [r4, #4]
 8006de6:	60fb      	str	r3, [r7, #12]
 8006de8:	2a1b      	cmp	r2, #27
 8006dea:	d803      	bhi.n	8006df4 <_realloc_r+0x1ac>
 8006dec:	f107 0010 	add.w	r0, r7, #16
 8006df0:	3408      	adds	r4, #8
 8006df2:	e010      	b.n	8006e16 <_realloc_r+0x1ce>
 8006df4:	68a3      	ldr	r3, [r4, #8]
 8006df6:	613b      	str	r3, [r7, #16]
 8006df8:	68e3      	ldr	r3, [r4, #12]
 8006dfa:	617b      	str	r3, [r7, #20]
 8006dfc:	2a24      	cmp	r2, #36	; 0x24
 8006dfe:	bf01      	itttt	eq
 8006e00:	6923      	ldreq	r3, [r4, #16]
 8006e02:	61bb      	streq	r3, [r7, #24]
 8006e04:	6963      	ldreq	r3, [r4, #20]
 8006e06:	61fb      	streq	r3, [r7, #28]
 8006e08:	bf19      	ittee	ne
 8006e0a:	f107 0018 	addne.w	r0, r7, #24
 8006e0e:	3410      	addne	r4, #16
 8006e10:	f107 0020 	addeq.w	r0, r7, #32
 8006e14:	3418      	addeq	r4, #24
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	6003      	str	r3, [r0, #0]
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	6043      	str	r3, [r0, #4]
 8006e1e:	68a3      	ldr	r3, [r4, #8]
 8006e20:	6083      	str	r3, [r0, #8]
 8006e22:	e002      	b.n	8006e2a <_realloc_r+0x1e2>
 8006e24:	4621      	mov	r1, r4
 8006e26:	f7ff fee1 	bl	8006bec <memmove>
 8006e2a:	4655      	mov	r5, sl
 8006e2c:	e02e      	b.n	8006e8c <_realloc_r+0x244>
 8006e2e:	45b0      	cmp	r8, r6
 8006e30:	dc32      	bgt.n	8006e98 <_realloc_r+0x250>
 8006e32:	4638      	mov	r0, r7
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f850 2f08 	ldr.w	r2, [r0, #8]!
 8006e3a:	60d3      	str	r3, [r2, #12]
 8006e3c:	609a      	str	r2, [r3, #8]
 8006e3e:	1f2a      	subs	r2, r5, #4
 8006e40:	2a24      	cmp	r2, #36	; 0x24
 8006e42:	d825      	bhi.n	8006e90 <_realloc_r+0x248>
 8006e44:	2a13      	cmp	r2, #19
 8006e46:	d91a      	bls.n	8006e7e <_realloc_r+0x236>
 8006e48:	6823      	ldr	r3, [r4, #0]
 8006e4a:	60bb      	str	r3, [r7, #8]
 8006e4c:	6863      	ldr	r3, [r4, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]
 8006e50:	2a1b      	cmp	r2, #27
 8006e52:	d803      	bhi.n	8006e5c <_realloc_r+0x214>
 8006e54:	f107 0010 	add.w	r0, r7, #16
 8006e58:	3408      	adds	r4, #8
 8006e5a:	e010      	b.n	8006e7e <_realloc_r+0x236>
 8006e5c:	68a3      	ldr	r3, [r4, #8]
 8006e5e:	613b      	str	r3, [r7, #16]
 8006e60:	68e3      	ldr	r3, [r4, #12]
 8006e62:	617b      	str	r3, [r7, #20]
 8006e64:	2a24      	cmp	r2, #36	; 0x24
 8006e66:	bf01      	itttt	eq
 8006e68:	6923      	ldreq	r3, [r4, #16]
 8006e6a:	61bb      	streq	r3, [r7, #24]
 8006e6c:	6963      	ldreq	r3, [r4, #20]
 8006e6e:	61fb      	streq	r3, [r7, #28]
 8006e70:	bf19      	ittee	ne
 8006e72:	f107 0018 	addne.w	r0, r7, #24
 8006e76:	3410      	addne	r4, #16
 8006e78:	f107 0020 	addeq.w	r0, r7, #32
 8006e7c:	3418      	addeq	r4, #24
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	6003      	str	r3, [r0, #0]
 8006e82:	6863      	ldr	r3, [r4, #4]
 8006e84:	6043      	str	r3, [r0, #4]
 8006e86:	68a3      	ldr	r3, [r4, #8]
 8006e88:	6083      	str	r3, [r0, #8]
 8006e8a:	4635      	mov	r5, r6
 8006e8c:	46bb      	mov	fp, r7
 8006e8e:	e055      	b.n	8006f3c <_realloc_r+0x2f4>
 8006e90:	4621      	mov	r1, r4
 8006e92:	f7ff feab 	bl	8006bec <memmove>
 8006e96:	e7f8      	b.n	8006e8a <_realloc_r+0x242>
 8006e98:	4611      	mov	r1, r2
 8006e9a:	4648      	mov	r0, r9
 8006e9c:	f7fe feac 	bl	8005bf8 <_malloc_r>
 8006ea0:	4606      	mov	r6, r0
 8006ea2:	2800      	cmp	r0, #0
 8006ea4:	d042      	beq.n	8006f2c <_realloc_r+0x2e4>
 8006ea6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8006eaa:	f023 0301 	bic.w	r3, r3, #1
 8006eae:	f1a0 0208 	sub.w	r2, r0, #8
 8006eb2:	445b      	add	r3, fp
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d105      	bne.n	8006ec4 <_realloc_r+0x27c>
 8006eb8:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8006ebc:	f023 0303 	bic.w	r3, r3, #3
 8006ec0:	441d      	add	r5, r3
 8006ec2:	e03b      	b.n	8006f3c <_realloc_r+0x2f4>
 8006ec4:	1f2a      	subs	r2, r5, #4
 8006ec6:	2a24      	cmp	r2, #36	; 0x24
 8006ec8:	d829      	bhi.n	8006f1e <_realloc_r+0x2d6>
 8006eca:	2a13      	cmp	r2, #19
 8006ecc:	d91e      	bls.n	8006f0c <_realloc_r+0x2c4>
 8006ece:	6823      	ldr	r3, [r4, #0]
 8006ed0:	6003      	str	r3, [r0, #0]
 8006ed2:	6863      	ldr	r3, [r4, #4]
 8006ed4:	6043      	str	r3, [r0, #4]
 8006ed6:	2a1b      	cmp	r2, #27
 8006ed8:	d804      	bhi.n	8006ee4 <_realloc_r+0x29c>
 8006eda:	f100 0308 	add.w	r3, r0, #8
 8006ede:	f104 0208 	add.w	r2, r4, #8
 8006ee2:	e015      	b.n	8006f10 <_realloc_r+0x2c8>
 8006ee4:	68a3      	ldr	r3, [r4, #8]
 8006ee6:	6083      	str	r3, [r0, #8]
 8006ee8:	68e3      	ldr	r3, [r4, #12]
 8006eea:	60c3      	str	r3, [r0, #12]
 8006eec:	2a24      	cmp	r2, #36	; 0x24
 8006eee:	bf01      	itttt	eq
 8006ef0:	6923      	ldreq	r3, [r4, #16]
 8006ef2:	6103      	streq	r3, [r0, #16]
 8006ef4:	6961      	ldreq	r1, [r4, #20]
 8006ef6:	6141      	streq	r1, [r0, #20]
 8006ef8:	bf19      	ittee	ne
 8006efa:	f100 0310 	addne.w	r3, r0, #16
 8006efe:	f104 0210 	addne.w	r2, r4, #16
 8006f02:	f100 0318 	addeq.w	r3, r0, #24
 8006f06:	f104 0218 	addeq.w	r2, r4, #24
 8006f0a:	e001      	b.n	8006f10 <_realloc_r+0x2c8>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	4622      	mov	r2, r4
 8006f10:	6811      	ldr	r1, [r2, #0]
 8006f12:	6019      	str	r1, [r3, #0]
 8006f14:	6851      	ldr	r1, [r2, #4]
 8006f16:	6059      	str	r1, [r3, #4]
 8006f18:	6892      	ldr	r2, [r2, #8]
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	e002      	b.n	8006f24 <_realloc_r+0x2dc>
 8006f1e:	4621      	mov	r1, r4
 8006f20:	f7ff fe64 	bl	8006bec <memmove>
 8006f24:	4621      	mov	r1, r4
 8006f26:	4648      	mov	r0, r9
 8006f28:	f7fe fd0c 	bl	8005944 <_free_r>
 8006f2c:	4648      	mov	r0, r9
 8006f2e:	f7ff f88f 	bl	8006050 <__malloc_unlock>
 8006f32:	4630      	mov	r0, r6
 8006f34:	e02d      	b.n	8006f92 <_realloc_r+0x34a>
 8006f36:	bf00      	nop
 8006f38:	2000015c 	.word	0x2000015c
 8006f3c:	ebc8 0205 	rsb	r2, r8, r5
 8006f40:	2a0f      	cmp	r2, #15
 8006f42:	f8db 3004 	ldr.w	r3, [fp, #4]
 8006f46:	d914      	bls.n	8006f72 <_realloc_r+0x32a>
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	eb0b 0108 	add.w	r1, fp, r8
 8006f50:	ea43 0308 	orr.w	r3, r3, r8
 8006f54:	f8cb 3004 	str.w	r3, [fp, #4]
 8006f58:	f042 0301 	orr.w	r3, r2, #1
 8006f5c:	440a      	add	r2, r1
 8006f5e:	604b      	str	r3, [r1, #4]
 8006f60:	6853      	ldr	r3, [r2, #4]
 8006f62:	f043 0301 	orr.w	r3, r3, #1
 8006f66:	6053      	str	r3, [r2, #4]
 8006f68:	3108      	adds	r1, #8
 8006f6a:	4648      	mov	r0, r9
 8006f6c:	f7fe fcea 	bl	8005944 <_free_r>
 8006f70:	e00a      	b.n	8006f88 <_realloc_r+0x340>
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	432b      	orrs	r3, r5
 8006f78:	eb0b 0205 	add.w	r2, fp, r5
 8006f7c:	f8cb 3004 	str.w	r3, [fp, #4]
 8006f80:	6853      	ldr	r3, [r2, #4]
 8006f82:	f043 0301 	orr.w	r3, r3, #1
 8006f86:	6053      	str	r3, [r2, #4]
 8006f88:	4648      	mov	r0, r9
 8006f8a:	f7ff f861 	bl	8006050 <__malloc_unlock>
 8006f8e:	f10b 0008 	add.w	r0, fp, #8
 8006f92:	b003      	add	sp, #12
 8006f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006f98 <__swbuf_r>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	460f      	mov	r7, r1
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	4606      	mov	r6, r0
 8006fa0:	b118      	cbz	r0, 8006faa <__swbuf_r+0x12>
 8006fa2:	6983      	ldr	r3, [r0, #24]
 8006fa4:	b90b      	cbnz	r3, 8006faa <__swbuf_r+0x12>
 8006fa6:	f7fe fc05 	bl	80057b4 <__sinit>
 8006faa:	4b27      	ldr	r3, [pc, #156]	; (8007048 <__swbuf_r+0xb0>)
 8006fac:	429c      	cmp	r4, r3
 8006fae:	d101      	bne.n	8006fb4 <__swbuf_r+0x1c>
 8006fb0:	6874      	ldr	r4, [r6, #4]
 8006fb2:	e008      	b.n	8006fc6 <__swbuf_r+0x2e>
 8006fb4:	4b25      	ldr	r3, [pc, #148]	; (800704c <__swbuf_r+0xb4>)
 8006fb6:	429c      	cmp	r4, r3
 8006fb8:	d101      	bne.n	8006fbe <__swbuf_r+0x26>
 8006fba:	68b4      	ldr	r4, [r6, #8]
 8006fbc:	e003      	b.n	8006fc6 <__swbuf_r+0x2e>
 8006fbe:	4b24      	ldr	r3, [pc, #144]	; (8007050 <__swbuf_r+0xb8>)
 8006fc0:	429c      	cmp	r4, r3
 8006fc2:	bf08      	it	eq
 8006fc4:	68f4      	ldreq	r4, [r6, #12]
 8006fc6:	69a3      	ldr	r3, [r4, #24]
 8006fc8:	60a3      	str	r3, [r4, #8]
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	0719      	lsls	r1, r3, #28
 8006fce:	d50e      	bpl.n	8006fee <__swbuf_r+0x56>
 8006fd0:	6923      	ldr	r3, [r4, #16]
 8006fd2:	b163      	cbz	r3, 8006fee <__swbuf_r+0x56>
 8006fd4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006fd8:	049a      	lsls	r2, r3, #18
 8006fda:	b2fd      	uxtb	r5, r7
 8006fdc:	d410      	bmi.n	8007000 <__swbuf_r+0x68>
 8006fde:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006fe2:	81a3      	strh	r3, [r4, #12]
 8006fe4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006fea:	6663      	str	r3, [r4, #100]	; 0x64
 8006fec:	e008      	b.n	8007000 <__swbuf_r+0x68>
 8006fee:	4621      	mov	r1, r4
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	f7fd fc45 	bl	8004880 <__swsetup_r>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d0ec      	beq.n	8006fd4 <__swbuf_r+0x3c>
 8006ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8006ffe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007000:	6823      	ldr	r3, [r4, #0]
 8007002:	6920      	ldr	r0, [r4, #16]
 8007004:	1a18      	subs	r0, r3, r0
 8007006:	6963      	ldr	r3, [r4, #20]
 8007008:	4298      	cmp	r0, r3
 800700a:	db05      	blt.n	8007018 <__swbuf_r+0x80>
 800700c:	4621      	mov	r1, r4
 800700e:	4630      	mov	r0, r6
 8007010:	f7fe fb66 	bl	80056e0 <_fflush_r>
 8007014:	2800      	cmp	r0, #0
 8007016:	d1f0      	bne.n	8006ffa <__swbuf_r+0x62>
 8007018:	68a3      	ldr	r3, [r4, #8]
 800701a:	3b01      	subs	r3, #1
 800701c:	60a3      	str	r3, [r4, #8]
 800701e:	6823      	ldr	r3, [r4, #0]
 8007020:	1c5a      	adds	r2, r3, #1
 8007022:	6022      	str	r2, [r4, #0]
 8007024:	701f      	strb	r7, [r3, #0]
 8007026:	6962      	ldr	r2, [r4, #20]
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <__swbuf_r+0xa0>
 800702e:	89a3      	ldrh	r3, [r4, #12]
 8007030:	07db      	lsls	r3, r3, #31
 8007032:	d507      	bpl.n	8007044 <__swbuf_r+0xac>
 8007034:	2d0a      	cmp	r5, #10
 8007036:	d105      	bne.n	8007044 <__swbuf_r+0xac>
 8007038:	4621      	mov	r1, r4
 800703a:	4630      	mov	r0, r6
 800703c:	f7fe fb50 	bl	80056e0 <_fflush_r>
 8007040:	2800      	cmp	r0, #0
 8007042:	d1da      	bne.n	8006ffa <__swbuf_r+0x62>
 8007044:	4628      	mov	r0, r5
 8007046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007048:	08007300 	.word	0x08007300
 800704c:	08007320 	.word	0x08007320
 8007050:	08007340 	.word	0x08007340

08007054 <_wcrtomb_r>:
 8007054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007058:	461d      	mov	r5, r3
 800705a:	4b0f      	ldr	r3, [pc, #60]	; (8007098 <_wcrtomb_r+0x44>)
 800705c:	b086      	sub	sp, #24
 800705e:	4604      	mov	r4, r0
 8007060:	4690      	mov	r8, r2
 8007062:	460e      	mov	r6, r1
 8007064:	681f      	ldr	r7, [r3, #0]
 8007066:	b931      	cbnz	r1, 8007076 <_wcrtomb_r+0x22>
 8007068:	f7fe fd48 	bl	8005afc <__locale_charset>
 800706c:	9500      	str	r5, [sp, #0]
 800706e:	4603      	mov	r3, r0
 8007070:	4632      	mov	r2, r6
 8007072:	a903      	add	r1, sp, #12
 8007074:	e005      	b.n	8007082 <_wcrtomb_r+0x2e>
 8007076:	f7fe fd41 	bl	8005afc <__locale_charset>
 800707a:	9500      	str	r5, [sp, #0]
 800707c:	4603      	mov	r3, r0
 800707e:	4642      	mov	r2, r8
 8007080:	4631      	mov	r1, r6
 8007082:	4620      	mov	r0, r4
 8007084:	47b8      	blx	r7
 8007086:	1c43      	adds	r3, r0, #1
 8007088:	bf01      	itttt	eq
 800708a:	2300      	moveq	r3, #0
 800708c:	602b      	streq	r3, [r5, #0]
 800708e:	238a      	moveq	r3, #138	; 0x8a
 8007090:	6023      	streq	r3, [r4, #0]
 8007092:	b006      	add	sp, #24
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007098:	2000056c 	.word	0x2000056c

0800709c <__ascii_wctomb>:
 800709c:	b149      	cbz	r1, 80070b2 <__ascii_wctomb+0x16>
 800709e:	2aff      	cmp	r2, #255	; 0xff
 80070a0:	bf85      	ittet	hi
 80070a2:	238a      	movhi	r3, #138	; 0x8a
 80070a4:	6003      	strhi	r3, [r0, #0]
 80070a6:	700a      	strbls	r2, [r1, #0]
 80070a8:	f04f 30ff 	movhi.w	r0, #4294967295
 80070ac:	bf98      	it	ls
 80070ae:	2001      	movls	r0, #1
 80070b0:	4770      	bx	lr
 80070b2:	4608      	mov	r0, r1
 80070b4:	4770      	bx	lr
	...

080070b8 <_close>:
 80070b8:	4b02      	ldr	r3, [pc, #8]	; (80070c4 <_close+0xc>)
 80070ba:	2258      	movs	r2, #88	; 0x58
 80070bc:	601a      	str	r2, [r3, #0]
 80070be:	f04f 30ff 	mov.w	r0, #4294967295
 80070c2:	4770      	bx	lr
 80070c4:	20000770 	.word	0x20000770

080070c8 <_fstat>:
 80070c8:	4b02      	ldr	r3, [pc, #8]	; (80070d4 <_fstat+0xc>)
 80070ca:	2258      	movs	r2, #88	; 0x58
 80070cc:	601a      	str	r2, [r3, #0]
 80070ce:	f04f 30ff 	mov.w	r0, #4294967295
 80070d2:	4770      	bx	lr
 80070d4:	20000770 	.word	0x20000770

080070d8 <_isatty>:
 80070d8:	4b02      	ldr	r3, [pc, #8]	; (80070e4 <_isatty+0xc>)
 80070da:	2258      	movs	r2, #88	; 0x58
 80070dc:	601a      	str	r2, [r3, #0]
 80070de:	2000      	movs	r0, #0
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	20000770 	.word	0x20000770

080070e8 <_lseek>:
 80070e8:	4b02      	ldr	r3, [pc, #8]	; (80070f4 <_lseek+0xc>)
 80070ea:	2258      	movs	r2, #88	; 0x58
 80070ec:	601a      	str	r2, [r3, #0]
 80070ee:	f04f 30ff 	mov.w	r0, #4294967295
 80070f2:	4770      	bx	lr
 80070f4:	20000770 	.word	0x20000770

080070f8 <_read>:
 80070f8:	4b02      	ldr	r3, [pc, #8]	; (8007104 <_read+0xc>)
 80070fa:	2258      	movs	r2, #88	; 0x58
 80070fc:	601a      	str	r2, [r3, #0]
 80070fe:	f04f 30ff 	mov.w	r0, #4294967295
 8007102:	4770      	bx	lr
 8007104:	20000770 	.word	0x20000770

08007108 <_sbrk>:
 8007108:	4b04      	ldr	r3, [pc, #16]	; (800711c <_sbrk+0x14>)
 800710a:	6819      	ldr	r1, [r3, #0]
 800710c:	4602      	mov	r2, r0
 800710e:	b909      	cbnz	r1, 8007114 <_sbrk+0xc>
 8007110:	4903      	ldr	r1, [pc, #12]	; (8007120 <_sbrk+0x18>)
 8007112:	6019      	str	r1, [r3, #0]
 8007114:	6818      	ldr	r0, [r3, #0]
 8007116:	4402      	add	r2, r0
 8007118:	601a      	str	r2, [r3, #0]
 800711a:	4770      	bx	lr
 800711c:	200005cc 	.word	0x200005cc
 8007120:	20000774 	.word	0x20000774

08007124 <_write>:
 8007124:	4b02      	ldr	r3, [pc, #8]	; (8007130 <_write+0xc>)
 8007126:	2258      	movs	r2, #88	; 0x58
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	f04f 30ff 	mov.w	r0, #4294967295
 800712e:	4770      	bx	lr
 8007130:	20000770 	.word	0x20000770

08007134 <_init>:
 8007134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007136:	bf00      	nop
 8007138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800713a:	bc08      	pop	{r3}
 800713c:	469e      	mov	lr, r3
 800713e:	4770      	bx	lr

08007140 <_fini>:
 8007140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007142:	bf00      	nop
 8007144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007146:	bc08      	pop	{r3}
 8007148:	469e      	mov	lr, r3
 800714a:	4770      	bx	lr
